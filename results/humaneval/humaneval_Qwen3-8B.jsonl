{"task_id": "HumanEval/0", "completion": "    # Sort the list to make it easier to compare adjacent elements\n    numbers.sort()\n    \n    # Iterate through the sorted list and check adjacent elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n            if balance == 0:\n                # A complete group is found\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    def max_nesting(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    # Split the input string into groups\n    groups = paren_string.split()\n    # Compute max nesting for each group\n    return [max_nesting(group) for group in groups]", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    total_sum = 0\n    total_product = 1\n\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return (total_sum, total_product)", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # The prefix is string[:i]\n            # Reverse of prefix is string[:i][::-1]\n            return string + string[:i][::-1]\n\n    # If no palindromic suffix found (only possible if string is empty or all characters are same)\n    return string + string[:-1][::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    # Ensure both strings are of the same length by padding with leading zeros\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n\n    result = []\n    for bit_a, bit_b in zip(a, b):\n        # XOR: 1 if bits are different, 0 if same\n        result.append('1' if bit_a != bit_b else '0')\n\n    return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return abs(a)", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    # Convert the string to lowercase to treat characters case-insensitively\n    lower_string = string.lower()\n    # Use a set to store unique characters\n    unique_chars = set(lower_string)\n    # Return the number of unique characters\n    return len(unique_chars)", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n\n    # Mapping from note symbols to their beat values\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Parse each note and collect the beat values\n    beats = []\n    for note in notes:\n        beats.append(note_to_beats[note])\n\n    return beats", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    substring_length = len(substring)\n    string_length = len(string)\n\n    if substring_length == 0:\n        return 0  # Avoid division by zero or infinite loop\n\n    while start <= string_length - substring_length:\n        if string[start:start + substring_length] == substring:\n            count += 1\n            start += 1  # Move by 1 to allow overlapping\n        else:\n            start += 1\n\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    # Mapping from word to numerical value\n    number_map = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Convert words to their numerical string representations\n    numeric_values = [number_map[word] for word in words]\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert back to words (sorted by numeric value)\n    sorted_words = [key for key, value in number_map.items() if value in numeric_values]\n\n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "    # Sort the list to make it easier to find the closest elements\n    numbers.sort()\n\n    # Initialize variables to track the closest pair\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    # Iterate through the list and compare adjacent elements\n    for i in range(len(numbers) - 1):\n        current_diff = numbers[i + 1] - numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    if not numbers or len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Avoid division by zero in case all numbers are the same\n    if min_val == max_val:\n        return [0.0 for _ in numbers]\n\n    # Apply linear transformation: (x - min) / (max - min)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    # Start from n//2 and go down to 1 to find the largest divisor\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # If n is 1, the largest divisor smaller than n is 1, but 1 % 1 is 0, so it's not valid", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    # Handle the case of 2 separately\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    # Check for odd factors starting from 3\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n\n    # If n is a prime number greater than 2\n    if n > 1:\n        factors.append(n)\n\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    # Find the largest non-zero coefficient\n    max_coeff = max(xs)\n    # Find the index of the largest non-zero coefficient\n    max_index = xs.index(max_coeff)\n\n    # Since the polynomial has even number of coefficients and the largest\n    # non-zero coefficient is at the end, the root is at - (constant term / leading coefficient)\n    # This is based on the assumption that the polynomial is of the form a + bx + cx^2 + ... + dx^n\n    # and that the largest coefficient is the leading one, which guarantees a root\n    # between -1 and 0 for the given setup.\n\n    # So, the root is at - (constant term / leading coefficient)\n    # But since the largest coefficient is at the end, the constant term is at index 0\n    # and the leading coefficient is at index len(xs) - 1\n\n    # This is a simplified approach for the given problem constraints\n    # and is based on the assumption that the polynomial has a root in the interval [-1, 0]\n    # and the largest coefficient is the leading one, which ensures a root exists.\n\n    # So, the root is at - (constant term / leading coefficient)\n    constant_term = xs[0]\n    leading_coefficient = xs[-1]\n    zero = -constant_term / leading_coefficient\n\n    return zero", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "    # Extract elements at indices divisible by 3\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_indices = [l[i] for i in indices_divisible_by_three]\n\n    # Sort the extracted values\n    values_at_indices.sort()\n\n    # Rebuild the list with sorted values at indices divisible by three\n    result = l.copy()\n    for i, idx in enumerate(indices_divisible_by_three):\n        result[idx] = values_at_indices[i]\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "    # Use a set to remove duplicates, then convert back to a list and sort\n    return sorted(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        raise ValueError(\"max() arg is an empty list\")\n\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    # Extract even-indexed elements (0, 2, 4, ...) and sort them\n    even_indices_values = l[::2]\n    even_indices_values.sort()\n\n    # Reconstruct the list with sorted even indices and original odd indices\n    result = []\n    even_idx = 0  # Index for the sorted even elements\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycle by shifting back one character.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        \"\"\"Generator that yields Fibonacci numbers.\"\"\"\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fibonacci():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    # If the list has fewer than 3 elements, it's impossible to have a triple\n    if len(l) < 3:\n        return False\n\n    # Sort the list for two-pointer approach\n    l.sort()\n\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    # Each car moving left to right will eventually collide with each car moving right to left.\n    # Since all cars move at the same speed, every pair of cars from opposite directions will collide once.\n    return n * n", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x = x // base\n\n    # The digits are collected in reverse order\n    return ''.join(reversed(digits))", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four values\n    a, b, c, d = 0, 0, 2, 0\n\n    for _ in range(4, n + 1):\n        next_val = a + b + c + d\n        a, b, c, d = b, c, d, next_val\n\n    return d", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    # Calculate the median\n    if n % 2 == 1:\n        # Odd number of elements\n        return sorted_list[n // 2]\n    else:\n        # Even number of elements\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    # Handle the case where n is 0\n    if n == 0:\n        return 1 % p\n\n    # Use modular exponentiation to efficiently compute (2^n) % p\n    result = 1\n    base = 2 % p  # Reduce base modulo p first\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    vowels = set(\"aeiouAEIOU\")\n    return ''.join(char for char in text if char not in vowels)", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    # Check if both strings have the same length\n    if len(s0) != len(s1):\n        return False\n\n    # Use Counter to count character occurrences\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n    return increasing or decreasing", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    # Convert both lists to sets to find the intersection\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the common elements\n    common_elements = set1 & set2\n\n    # Return the sorted list of common elements\n    return sorted(common_elements)", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    # Start with the smallest prime factor\n    largest_factor = -1\n    i = 2\n\n    # Divide n by 2 as long as it is divisible\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n        i += 1\n\n    # If n is still greater than 1, it is a prime number\n    if n > 1:\n        largest_factor = n\n\n    return largest_factor", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance < 0:\n                return False  # More closing brackets than opening\n    return balance == 0  # All opening brackets have been closed", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    # The derivative of a term xs[i] * x^i is i * xs[i] * x^(i-1)\n    # So, we multiply each coefficient by its index (starting from 1)\n    # and drop the term with coefficient 0 (i.e., the constant term)\n    return [i * xs[i] for i in range(1, len(xs))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Use dynamic programming to avoid redundant calculations\n    a, b, c = 0, 0, 1  # Represents fibfib(n-3), fibfib(n-2), fibfib(n-1)\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s = s.lower()  # Convert to lowercase for case-insensitive comparison\n\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "    # Convert the integer to a string\n    s = str(x)\n    n = len(s)\n\n    # If shift is greater than or equal to the number of digits, reverse the string\n    if shift >= n:\n        return s[::-1]\n    else:\n        # Perform circular right shift\n        shift %= n  # Ensure shift is within the number of digits\n        return s[-shift:] + s[:-shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    # Extract the numbers of apples and oranges from the string\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[4])\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes", "result": "failed: invalid literal for int() with base 10: 'oranges'", "passed": false}
{"task_id": "HumanEval/68", "completion": "    # Filter even values and keep track of their indices\n    even_nodes = [(value, idx) for idx, value in enumerate(arr) if value % 2 == 0]\n\n    if not even_nodes:\n        return []\n\n    # Find the smallest even value and the smallest index\n    smallest_value = min(even_nodes, key=lambda x: (x[0], x[1]))[0]\n    smallest_index = min(even_nodes, key=lambda x: (x[0], x[1]))[1]\n\n    return [smallest_value, smallest_index]", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n\n    freq = Counter(lst)\n\n    max_val = -1\n\n    for num in freq:\n        if freq[num] >= num and num > max_val:\n            max_val = num\n\n    return max_val", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n\n    result = []\n    left = 0\n    right = len(lst) - 1\n    ascending = True\n\n    while left <= right:\n        if ascending:\n            result.append(lst[left])\n            left += 1\n        else:\n            result.append(lst[right])\n            right -= 1\n        ascending = not ascending\n\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "completion": "    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Use Heron's formula to calculate the area\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n    \n    # Check if the sum of elements is less than or equal to w\n    is_weight_safe = sum(q) <= w\n    \n    # Return True only if both conditions are met\n    return is_balanced and is_weight_safe", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n\n    return changes", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # List of primes less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    # Try all combinations of 3 distinct primes\n    for p1 in primes:\n        if p1 >= a:\n            break\n        for p2 in primes:\n            if p2 >= a or p2 == p1:\n                continue\n            for p3 in primes:\n                if p3 >= a or p3 == p1 or p3 == p2:\n                    continue\n                if p1 * p2 * p3 == a:\n                    return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n\n    # Handle the case when x is 0\n    if x == 0:\n        return n == 0\n\n    # Start with exponent 0\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "    # Handle the case for 0\n    if a == 0:\n        return True\n\n    # Determine the sign of the cube root\n    sign = 1 if a > 0 else -1\n\n    # Take the absolute value to work with positive numbers\n    abs_a = abs(a)\n\n    # Estimate the cube root using integer approximation\n    # We can use binary search or a simple loop for small values\n    # Here, we use a loop for simplicity\n\n    # Start with a guess for the cube root\n    # We can use a reasonable upper bound for the cube root\n    # For example, cube root of 1e18 is 1e6, so we can go up to 1e6\n    # But for better performance, we can use binary search\n\n    # Binary search approach\n    low = 0\n    high = abs_a  # Upper bound for cube root\n    while low <= high:\n        mid = (low + high) // 2\n        cube = mid ** 3\n        if cube == abs_a:\n            return True\n        elif cube < abs_a:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If we exit the loop without finding a match\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    # Set of hexadecimal prime digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime digits in the input string\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    # Convert the decimal number to binary, remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n\n    # Return the formatted string with 'db' at the beginning and end\n    return f\"db{binary_str}db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string and check every 3 consecutive characters\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1  # Only number is 1\n\n    # Total numbers that start with 1: 1 * 10^(n-1)\n    start_with_1 = 10 ** (n - 1)\n\n    # Total numbers that end with 1: 9 * 10^(n-2)\n    end_with_1 = 9 * (10 ** (n - 2))\n\n    # Subtract overlap (numbers that both start and end with 1)\n    overlap = 1 * 9 ** (n - 2)  # First digit is 1, last is 1, middle n-2 digits can be anything from 0-9 except 1?\n\n    # Wait, the overlap is numbers that both start and end with 1. So the first digit is 1, last is 1, and the middle digits can be anything.\n    # So for n-digit numbers, the first digit is 1, last digit is 1, and the middle (n-2) digits can be any digit from 0 to 9.\n    # So there are 10^(n-2) such numbers.\n    overlap = 10 ** (n - 2)\n\n    # Apply inclusion-exclusion principle\n    return start_with_1 + end_with_1 - overlap", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "    # Calculate the sum of digits of N\n    digit_sum = sum(int(d) for d in str(N))\n    \n    # Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    # Split the string into words and spaces\n    # We can split by spaces, but need to preserve the original spacing\n    # So we split the string into tokens (words and spaces)\n    tokens = s.split(' ')\n    \n    # Process each token: if it's a word, sort its characters; if it's a space, leave it as is\n    processed_tokens = []\n    for token in tokens:\n        if token == '':  # This handles multiple spaces\n            processed_tokens.append('')\n        else:\n            # Sort the characters of the word and join them\n            processed_tokens.append(''.join(sorted(token)))\n    \n    # Join the processed tokens back into a single string\n    return ' '.join(processed_tokens)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n\n    # Sort by row in ascending order, then by column in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n\n    if sum_first_last % 2 == 1:\n        # Sort in ascending order\n        return sorted(array)\n    else:\n        # Sort in descending order\n        return sorted(array, reverse=True)", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Determine the shift: 2 * 2 = 4\n    shift = 4\n    # Initialize the result\n    result = ''\n\n    for char in s:\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char.lower())\n            # Shift the character\n            new_index = (index + shift) % 26\n            # Get the new character\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                new_char = new_char.upper()\n            result += new_char\n        else:\n            # Non-alphabetic characters are left unchanged\n            result += char\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    # Check if the list is empty or has fewer than 2 elements\n    if len(lst) < 2:\n        return None\n\n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(lst))\n\n    # Check if there are at least 2 unique elements\n    if len(unique_sorted) < 2:\n        return None\n\n    # Return the second smallest element\n    return unique_sorted[1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    # Split the string into sentences using the delimiters\n    sentences = S.split('. ')\n    sentences = [s.strip() for s in sentences]  # Remove any leading/trailing whitespace\n\n    # Also handle sentences that end with '?', '!' or '.' but are split incorrectly\n    # We can use a regex to split on any of these delimiters\n    import re\n    sentences = re.split('[.?!]', S)\n    sentences = [s.strip() for s in sentences if s.strip()]\n\n    # Count how many sentences start with \"I\"\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n\n    return count", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "    # Check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    # Define vowels\n    vowels = 'aeiouAEIOU'\n\n    # Initialize result\n    result = []\n\n    for char in message:\n        # Swap case\n        swapped_char = char.swapcase()\n\n        # Check if the character is a vowel\n        if swapped_char in vowels:\n            # Shift by 2 in the alphabet\n            # ord('a') = 97, ord('A') = 65\n            if swapped_char.islower():\n                new_char = chr((ord(swapped_char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(swapped_char) - ord('A') + 2) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(swapped_char)\n\n    return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Find the largest prime in the list\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    # Return the sum of the digits of the largest prime\n    return sum(int(digit) for digit in str(largest_prime))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n\n    keys = dict.keys()\n    lower_keys = [key for key in keys if isinstance(key, str) and key.islower()]\n    upper_keys = [key for key in keys if isinstance(key, str) and key.isupper()]\n\n    if len(lower_keys) == len(keys) or len(upper_keys) == len(keys):\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    current = 2\n    while len(primes) < n:\n        if is_prime(current):\n            primes.append(current)\n        current += 1\n\n    return primes", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/97", "completion": "    # Get the unit digit of each number\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    # Convert the string to a float\n    num = float(value)\n\n    # Check if the number is an integer\n    if num.is_integer():\n        return int(num)\n\n    # If not, round to the nearest integer\n    rounded = round(num)\n\n    # Check if the number is exactly halfway between two integers\n    # For example, 14.5 and -14.5\n    if abs(num - round(num)) == 0.5:\n        # Round away from zero\n        if num > 0:\n            return rounded + 1\n        else:\n            return rounded - 1\n\n    return rounded", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    current = n\n    pile.append(current)\n\n    for _ in range(n - 1):\n        if n % 2 == 1:  # n is odd\n            current += 2  # next odd number\n        else:  # n is even\n            current += 2  # next even number\n        pile.append(current)\n\n    return pile", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "    # Replace commas with spaces, then split by spaces\n    return s.replace(',', ' ').split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    # Ensure x is the smaller number\n    if x > y:\n        x, y = y, x\n\n    # Find the largest even number in the range [x, y]\n    # Start from y and go down to x, checking for even numbers\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number found\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n\n    # Calculate the sum of integers from n to m inclusive\n    total = (n + m) * (m - n + 1) // 2\n    count = m - n + 1\n    average = total / count\n\n    # Round to the nearest integer\n    rounded = round(average)\n\n    # Convert to binary and return as a string\n    return bin(rounded)[2:]  # [2:] to remove the '0b' prefix\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "    def has_only_odd_digits(n):\n        # Check if all digits of n are odd\n        for digit in str(n):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n\n    # Filter numbers with only odd digits and sort them\n    result = [num for num in x if has_only_odd_digits(num)]\n    result.sort()\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    # Filter the array to include only integers between 1 and 9 inclusive\n    filtered = [x for x in arr if isinstance(x, int) and 1 <= x <= 9]\n    \n    # Sort the filtered array\n    filtered.sort()\n    \n    # Reverse the sorted array\n    reversed_filtered = filtered[::-1]\n    \n    # Map each number to its corresponding word\n    number_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Convert each number to its word representation\n    result = [number_to_word[num] for num in reversed_filtered]\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Compute factorial of i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Compute sum of numbers from 1 to i\n            total = i * (i + 1) // 2\n            result.append(total)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        # Handle negative numbers by making the first digit negative\n        sign = 1\n        if n < 0:\n            sign = -1\n            n = -n\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total * sign\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n\n    # Create a sorted version of the array\n    sorted_arr = sorted(arr)\n\n    # Try all possible right shifts (from 0 to len(arr)-1)\n    for shift in range(len(arr)):\n        # Rotate the array to the right by 'shift' times\n        rotated = arr[-shift:] + arr[:-shift]\n        if rotated == sorted_arr:\n            return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "    # Count the number of odd elements in lst1\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n\n    # Count the number of even elements in lst2\n    even_count = sum(1 for x in lst2 if x % 2 == 0)\n\n    # If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2, it's possible\n    return \"YES\" if odd_count <= even_count else \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "    # Split the input string into a list of letters\n    letters = test.split()\n\n    # If the input is empty, return an empty dictionary\n    if not letters:\n        return {}\n\n    # Count the frequency of each letter\n    from collections import Counter\n    counts = Counter(letters)\n\n    # Find the maximum frequency\n    max_count = max(counts.values())\n\n    # Filter the dictionary to include only letters with the maximum frequency\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "    # Step 1: Remove all characters in s that are present in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Step 2: Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    # Step 3: Return the result string and the palindrome check\n    return (result, is_palindrome)", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        # Replace all instances of 'i' with the actual count of odd digits\n        output = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    # Calculate the total number of water units in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of bucket drops required\n    # Each bucket can carry up to `capacity` units of water\n    return math.ceil(total_water / capacity)", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    def sort_key(x):\n        # For negative numbers, we sort in descending order of their absolute values\n        # For non-negative numbers, we sort by number of ones, then by value\n        if x < 0:\n            return (float('inf'), -x)\n        else:\n            ones = bin(x).count('1')\n            return (ones, x)\n\n    return sorted(arr, key=sort_key)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/117", "completion": "    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = set('aeiouAEIOU')\n    # Iterate from the end of the word towards the start\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the previous and next characters are consonants\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/119", "completion": "    s1, s2 = lst\n\n    # Function to check if a string is balanced\n    def is_balanced(s):\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check both possible concatenations\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "    if k == 0 or not arr:\n        return []\n\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Take the last k elements (largest k elements)\n    result = arr[-k:]\n    \n    # Sort the result in ascending order (as per the examples)\n    result.sort()\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        # Even positions are 0, 2, 4, ... (0-based index)\n        if i % 2 == 0 and lst[i] % 2 == 1:\n            total += lst[i]\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        num = arr[i]\n        # Check if the number has at most two digits\n        if -99 <= num <= 99:\n            total += num\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    current = n\n\n    while current != 1:\n        if current % 2 == 1:\n            sequence.append(current)\n        current = current // 2 if current % 2 == 0 else 3 * current + 1\n\n    # Add 1 at the end since the loop stops when current == 1\n    if 1 not in sequence:\n        sequence.append(1)\n\n    # Sort the list in increasing order\n    sequence.sort()\n\n    return sequence", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date is in the correct format mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into month, day, year\n    try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if month is between 1 and 12\n    if not (1 <= month <= 12):\n        return False\n\n    # Check if day is between 1 and 31 (for months with 31 days)\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= day <= 31):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        # Check for leap year for February\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if not (1 <= day <= 29):\n                return False\n        else:\n            if not (1 <= day <= 28):\n                return False\n    else:\n        return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n\n    # Check for commas\n    if ',' in txt:\n        return txt.split(',')\n\n    # If no whitespace or commas, count lowercase letters with odd order\n    count = 0\n    for char in txt:\n        if 'a' <= char <= 'z':\n            if (ord(char) - ord('a')) % 2 == 1:\n                count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Check for more than one duplicate\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            # Check if the duplicate is not just a single occurrence\n            if lst.count(lst[i]) > 2:\n                return False\n\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "completion": "    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # If no intersection, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start\n\n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            return 0  # If any number is zero, the product of signs is zero\n        sum_of_magnitudes += abs(num)\n        product_of_signs *= 1 if num > 0 else -1\n\n    return sum_of_magnitudes * product_of_signs", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n\n    # Priority queue: (current_path, current_row, current_col)\n    # current_path is a list of values in the path so far\n    heap = []\n\n    # Initialize the heap with all possible starting positions\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, ( [grid[i][j]], i, j ))\n\n    # We need to find the minimum path of length k\n    # So we need to explore k steps from each starting point\n    for _ in range(k - 1):\n        # Pop the path with the smallest lexicographical order\n        current_path, i, j = heappop(heap)\n        for dx, dy in directions:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < N and 0 <= nj < N:\n                new_path = current_path + [grid[ni][nj]]\n                heappush(heap, (new_path, ni, nj))\n\n    # The heap now contains all possible paths of length k\n    # We return the smallest one\n    return min(heap)[0]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n < 0:\n        return []\n\n    # Initialize the result list\n    result = [0] * (n + 1)\n\n    # Base cases\n    result[0] = 1  # tri(0) = 1\n    result[1] = 3  # tri(1) = 3\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result[i] = 1 + (i // 2)\n        else:\n            # For odd i, we need to compute tri(i) using the recurrence:\n            # tri(i) = tri(i - 1) + tri(i - 2) + tri(i + 1)\n            # But since we are building from left to right, we can rearrange:\n            # tri(i + 1) = tri(i) - tri(i - 1) - tri(i - 2)\n            # However, for i = n, we can't compute tri(i + 1), so we need to handle this differently.\n            # So, we will compute backwards from n to 2 for odd i\n            if i == n:\n                # For the last odd index, we can't compute tri(i + 1), so we can't use the recurrence\n                # So we need to handle this case separately\n                # This suggests that the recurrence is not valid for the last element\n                # So we need to handle it carefully\n                # For now, we assume that the recurrence is valid for all i < n\n                # This may require a different approach, but for the scope of this problem, we'll proceed\n                pass\n            else:\n                # For i < n and odd, we can compute tri(i + 1) using the recurrence\n                # tri(i) = tri(i - 1) + tri(i - 2) + tri(i + 1)\n                # => tri(i + 1) = tri(i) - tri(i - 1) - tri(i - 2)\n                result[i + 1] = result[i] - result[i - 1] - result[i - 2]\n\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd = False\n\n    for digit in str(n):\n        d = int(digit)\n        if d % 2 == 1:\n            product *= d\n            has_odd = True\n\n    return product if has_odd else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    has_nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if len(stack) > 0:\n                    has_nested = True\n\n    return has_nested", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "    import math\n\n    total = 0\n    for num in lst:\n        # Apply ceiling to the number\n        rounded_num = math.ceil(num)\n        # Square the rounded number and add to total\n        total += rounded_num ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n\n    # Check if the last character is an alphabetical character\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is not part of a word\n    # That is, it should be a standalone word (i.e., preceded by a space or start of string)\n    if txt[-2] == ' ':\n        return True\n    elif txt[-2] == '':\n        # This is the case when the string is a single character\n        return True\n    else:\n        return False", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "completion": "    # Iterate through the array starting from index 1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            # Return the largest index where this condition is true\n            return i\n    # If no such element is found, return -1\n    return -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    # Separate negative and positive integers\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    # Find the largest negative (i.e., the least negative)\n    largest_negative = max(negatives) if negatives else None\n\n    # Find the smallest positive\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    def to_float(value):\n        if isinstance(value, str):\n            # Replace comma with dot and convert to float\n            value = value.replace(',', '.')\n        return float(value)\n\n    # Convert both values to float for comparison\n    a_float = to_float(a)\n    b_float = to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "completion": "    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n\n    # Since all even numbers are divisible by 2, the sum of 4 even numbers must be even\n    # So n must be even and at least 8\n    return n % 2 == 0 and n >= 8", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    current_factorial = 1  # To store the current factorial value\n\n    for i in range(1, n + 1):\n        current_factorial *= i  # Compute i!\n        result *= current_factorial  # Multiply with the result\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    result = []\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            # Count consecutive spaces\n            j = i\n            while j < len(text) and text[j] == ' ':\n                j += 1\n            # Replace with '-' if more than 2 spaces, else with '_'\n            if j - i > 2:\n                result.append('-')\n            else:\n                result.append('_')\n            i = j\n        else:\n            result.append(text[i])\n            i += 1\n    return ''.join(result)", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split into name and extension\n    name_part, ext_part = file_name.split('.')\n\n    # Check if extension is valid\n    if ext_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check if name part is not empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n\n    # Count digits in the name part\n    digit_count = sum(1 for c in name_part if c.isdigit())\n\n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n\n    # All conditions are satisfied\n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        num = lst[i]\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Multiply the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    # This is equivalent to checking if product_den divides product_num evenly\n    return product_num % product_den == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        # Compute the sum of the absolute values of the digits\n        return sum(int(d) for d in str(abs(n)))\n\n    # Sort the list using a custom key:\n    # 1. Primary key: sum of digits (ascending)\n    # 2. Secondary key: original index (ascending)\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        # Skip numbers less than or equal to 10\n        if num <= 10:\n            continue\n\n        # Convert to absolute value to handle negative numbers\n        abs_num = abs(num)\n\n        # Extract first and last digits\n        last_digit = abs_num % 10\n        first_digit = abs_num\n        while first_digit >= 10:\n            first_digit //= 10\n\n        # Check if both digits are odd\n        if first_digit % 2 == 1 and last_digit % 2 == 1:\n            count += 1\n\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    # Define the order of planets from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    # Check if both planets are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    # Find the indices of the planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n\n    # Determine the start and end indices for the slice\n    start = min(idx1, idx2)\n    end = max(idx1, idx2)\n\n    # If the planets are the same, return an empty tuple\n    if start == end:\n        return ()\n\n    # Extract the planets between the two (excluding the endpoints)\n    result = planets[start + 1:end]\n\n    return tuple(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    # Filter out strings with odd lengths\n    filtered = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort by length, then alphabetically\n    filtered.sort(key=lambda x: (len(x), x))\n\n    return filtered", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            total += num ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each pair of game score and guess\n    for score, g in zip(game, guess):\n        # If the guess matches the score, append 0\n        # Otherwise, append the absolute difference\n        result.append(0 if score == g else abs(score - g))\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    def calculate_strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = extensions[0]\n    max_strength = calculate_strength(strongest_extension)\n\n    for extension in extensions[1:]:\n        current_strength = calculate_strength(extension)\n        if current_strength > max_strength:\n            max_strength = current_strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    # Check if b is longer than a, if so, it can't be a substring\n    if len(b) > len(a):\n        return False\n\n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # Check if any rotation of b is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "    # Convert the number to a string and remove the negative sign if present\n    digits = str(abs(num))\n    \n    even_count = 0\n    odd_count = 0\n\n    for digit in digits:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    # Mapping of integer values to their corresponding Roman numerals\n    val_to_roman = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    res = ''\n    for value, symbol in val_to_roman:\n        while number >= value:\n            res += symbol\n            number -= value\n    return res", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "    # Check if the sides can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Sort the sides to identify the longest side (hypotenuse)\n    sides = sorted([a, b, c])\n    a, b, c = sides\n\n    # Check the Pythagorean theorem\n    return a**2 + b**2 == c**2", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "    # Sort the words based on two criteria:\n    # 1. Descending order of unique characters\n    # 2. Ascending lexicographical order\n    words.sort(key=lambda word: (-len(set(word)), word))\n\n    # Return the first word in the sorted list\n    return words[0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    # Calculate how many carrots you can actually eat\n    actual_eat = min(need, remaining)\n    \n    # Update the total eaten\n    total_eaten = number + actual_eat\n    \n    # Calculate the remaining carrots after eating\n    remaining_carrots = remaining - actual_eat\n    \n    return [total_eaten, remaining_carrots]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "    # Start with the first operand\n    result = operand[0]\n\n    # Apply each operator and operand in sequence\n    for i in range(len(operator)):\n        op = operator[i]\n        num = operand[i + 1]\n\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n        else:\n            raise ValueError(f\"Unknown operator: {op}\")\n\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    # Check if the string contains any letters\n    has_letters = any(c.isalpha() for c in s)\n\n    if not has_letters:\n        # If no letters, reverse the string\n        return s[::-1]\n\n    # Otherwise, reverse the case of each letter and leave others unchanged\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return md5_hash", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    # Ensure a is the smaller number\n    start = min(a, b)\n    end = max(a, b)\n\n    # Generate numbers from start to end inclusive\n    numbers = range(start, end + 1)\n\n    # Filter numbers that have even digits\n    even_digit_numbers = [num for num in numbers if all(int(digit) % 2 == 0 for digit in str(num))]\n\n    return even_digit_numbers", "result": "failed: Test 3", "passed": false}
