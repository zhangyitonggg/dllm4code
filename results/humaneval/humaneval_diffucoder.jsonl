{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        depth = max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for num in numbers:\n        if not result or num > result[-1]:\n            result.append(num)\n        else:\n            result.append(result[-1])\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for x, y in zip(a, b):\n        result += str(int(x) ^ int(y))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    sorted_list = sorted(num_list)\n    return ' '.join(sorted_list)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "    result = [num for num in numbers if numbers.count(num) == 1]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "    return -xs[-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "completion": "    result = l[:]\n    for i in range(2, len(result), 3):\n        result[i] = sorted([result[i]])[0]\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "    return max(l)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n\n    result = l[:]\n    for i, value in zip(even_indices, even_values):\n        result[i] = value\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "    return s\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "completion": "    from sympy import isprime\n\n    fib_sequence = [0, 1]\n    count = 0\n    while True:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if isprime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return n\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "    return str(int(x, 10), base)\n", "result": "failed: int() can't convert non-string with explicit base", "passed": false}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "    return (2 ** n) % p\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "    return x + y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "    return sorted({x for x in l1 if x in l2})\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n = n // i\n    return n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "    return [i * x for i, x in enumerate(xs) if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiou' or (char == 'y' and char == s[-1]):\n            count += 1\n    return count\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(char) for char in s if char.isupper())\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    return n - apples - oranges\n", "result": "failed: invalid literal for int() with base 10: '5 apples'", "passed": false}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    return [min(even_values), arr.index(min(even_values))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    result = -1\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while lst:\n        result.append(min(lst))\n        if lst:\n            result.append(max(lst))\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[-i-1]:\n            changes += 1\n    return changes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "    if sum(len(x) for x in lst1) <= sum(len(x) for x in lst2):\n        return lst1\n    else:\n        return lst2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n            a //= prime\n    return count == 3\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x**n)\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "    root = round(abs(a) ** (1/3))\n    return root ** 3 == abs(a)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for char in num:\n        if char in {'2', '3', '5', '7', 'B', 'D'}:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "    output = []\n    for g in grades:\n        if g >= 4.0:\n            output.append('A+')\n        elif g >= 3.7:\n            output.append('A')\n        elif g >= 3.3:\n            output.append('A-')\n        elif g >= 3.0:\n            output.append('B+')\n        elif g >= 2.7:\n            output.append('B')\n        elif g >= 2.3:\n            output.append('B-')\n        elif g >= 2.0:\n            output.append('C+')\n        elif g >= 1.7:\n            output.append('C')\n        elif g >= 1.3:\n            output.append('C-')\n        elif g >= 1.0:\n            output.append('D+')\n        elif g >= 0.7:\n            output.append('D')\n        elif g >= 0.0:\n            output.append('D-')\n        else:\n            output.append('E')\n    return output", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 2\n    else:\n        return 2 * (10**(n-2))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "completion": "    sum=0\n    for i in range(1,len(lst),2):\n        if lst[i]%2==0:\n            sum+=lst[i]\n    return sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - start + 2*2) % 26 + start)\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char in 'aeiouAEIOU':\n            new_char = chr((ord(char) + 2) % 26 + ord('a') if char.islower() else ord('A'))\n            encoded_message += new_char.upper()\n        else:\n            encoded_message += char.lower()\n    return encoded_message\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                if num > largest_prime:\n                    largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(key.islower() for key in dict) or all(key.isupper() for key in dict)\n", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return round(num)\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i + 1)\n    return pile\n", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', ' ').split()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m-n+1)\n    return bin(int(round(avg)))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[x-1] for x in arr]", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "    from math import factorial\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    return arr == sorted_arr\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "    counts = {}\n    words = test.split()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    max_count = max(counts.values())\n    result = {word: count for word, count in counts.items() if count == max_count}\n\n    return result\n", "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "completion": "    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "    count=0\n    for row in grid:\n        count+=sum(row)\n    return math.ceil(count/capacity)", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = [word for word in words if sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou') == n]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "    sum=0\n    for i in range(0,len(lst),2):\n        if lst[i]%2!=0:\n            sum+=lst[i]\n    return sum", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = 3 * n + 1\n    return sorted(sequence)\n", "result": "timed out", "passed": false}
{"task_id": "HumanEval/124", "completion": "    return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 != 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n    return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n\n    sign = 1\n    total = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign *= -1\n        total += abs(num)\n\n    return sign * total\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    return [grid[0][0]] * k\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "    sequence = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num) ** 2\n    return result\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "completion": "    return txt and txt[-1].isalpha() and not txt[-2].isspace() if len(txt) > 1 else False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "    negative = []\n    positive = []\n\n    for num in lst:\n        if num < 0:\n            negative.append(num)\n        elif num > 0:\n            positive.append(num)\n\n    a = max(negative) if negative else None\n    b = min(positive) if positive else None\n\n    return (a, b)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n", "result": "failed: '>' not supported between instances of 'int' and 'str'", "passed": false}
{"task_id": "HumanEval/138", "completion": "    return n >= 8\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "    from math import factorial\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num**2\n        elif i % 4 == 0:\n            result += num**3\n        else:\n            result += num\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) in {2, 3, 5, 7}]\n    return ' '.join(prime_words)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "    return eval(x + '*' + n).is_integer()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(abs(digit) for digit in str(x)), nums.index(x)))\n", "result": "failed: bad operand type for abs(): 'str'", "passed": false}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (str(num)[0] in '13579' and str(num)[-1] in '13579'):\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort()\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num * num\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "    return [abs(g - h) for g, h in zip(game, guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = extensions[0]\n    max_strength = -1\n\n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    return b in a or (b*2)[1:-1] in a\n", "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "    from pyroman import int2roman\n    return int2roman(number).lower()\n", "result": "failed: No module named 'pyroman'", "passed": false}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique or (len(unique_chars) == max_unique and word < max_word):\n            max_word = word\n            max_unique = len(unique_chars)\n\n    return max_word\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "    return [number + remaining, 0]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "    result = [i for i in range(a, b+1) if i % 2 == 0]\n    return result\n", "result": "failed: Test 1", "passed": false}
