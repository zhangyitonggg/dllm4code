[
  {
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "generated_codes": [
      "def remove_Occ(s, char):\n    # Find the first occurrence of the character\n    first_index = s.find(char)\n    # Find the last occurrence of the character\n    last_index = s.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1 or last_index == -1:\n        return s\n    \n    # Remove the first occurrence\n    s = s[:first_index] + s[first_index+1:]\n    \n    # Remove the last occurrence\n    # Adjust the index since we removed one character\n    s = s[:last_index] + s[last_index+1:]\n    \n    return s\n\n# Test cases"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      9.24170907586813
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "generated_codes": [
      "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [(sum(row), row) for row in matrix]\n    # Sort the rows based on the sum of their elements\n    sorted_rows = sorted(row_sums, key=lambda x: x[0])\n    # Extract the sorted rows\n    sorted_matrix = [row for _, row in sorted_rows]\n    return sorted_matrix\n\n# Test cases"
    ],
    "token_counts": [
      281
    ],
    "generation_times": [
      12.143789179623127
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 13,
    "prompt": "Write a function to count the most common words in a dictionary.",
    "generated_codes": [
      "from collections import Counter\n\ndef count_common(words):\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Find the maximum frequency\n    max_count = max(word_counts.values())\n    \n    # Filter words with the maximum frequency\n    most_common = [(word, count) for word, count in word_counts.items() if count == max_count]\n    \n    # Sort the result by word (alphabetically)\n    most_common.sort(key=lambda x: x[0])\n    \n    return most_common"
    ],
    "token_counts": [
      255
    ],
    "generation_times": [
      11.103263530880213
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.",
    "generated_codes": [
      "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular base of the prism.\n    height (float): The height of the triangular base of the prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the area of the triangular base\n    area_of_triangle = 0.5 * base * height\n    # Calculate the volume of the prism\n    volume = area_of_triangle * length\n    return volume\n\n# Test cases"
    ],
    "token_counts": [
      205
    ],
    "generation_times": [
      8.913964468985796
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 15,
    "prompt": "Write a function to split a string at lowercase letters.",
    "generated_codes": [
      "def split_lowerstring(s):\n    result = []\n    current = ''\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(current)\n            current = char\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result"
    ],
    "token_counts": [
      243
    ],
    "generation_times": [
      10.583549413830042
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 16,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "generated_codes": [
      "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      285
    ],
    "generation_times": [
      12.285692386329174
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 17,
    "prompt": "Write a function to find the perimeter of a square.",
    "generated_codes": [
      "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test cases"
    ],
    "token_counts": [
      63
    ],
    "generation_times": [
      2.7124408297240734
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 18,
    "prompt": "Write a function to remove characters from the first string which are present in the second string.",
    "generated_codes": [
      "def remove_dirty_chars(s1, s2):\n    return ''.join([char for char in s1 if char not in s2])\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      4.558513090014458
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 19,
    "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
    "generated_codes": [
      "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    ],
    "token_counts": [
      362
    ],
    "generation_times": [
      15.693052779883146
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 20,
    "prompt": "Write a function to check if the given number is woodball or not.",
    "generated_codes": [
      "def is_woodall(n):\n    # A Woodall number is of the form n * (2^n - 1)\n    # We need to check if there exists an integer k such that n = k * (2^k - 1)\n    k = 1\n    while True:\n        woodall_number = k * (2**k - 1)\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        k += 1\n\n# Test cases"
    ],
    "token_counts": [
      163
    ],
    "generation_times": [
      7.108741790056229
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 21,
    "prompt": "Write a function to find m number of multiples of n.",
    "generated_codes": [
      "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      5.487521789968014
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 22,
    "prompt": "Write a function to find the first duplicate element in a given array of integers.",
    "generated_codes": [
      "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1"
    ],
    "token_counts": [
      49
    ],
    "generation_times": [
      2.162476986646652
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 23,
    "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "generated_codes": [
      "def maximum_Sum(list_of_lists):\n    return max(sum(sublist) for sublist in list_of_lists)"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      6.617449197918177
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 24,
    "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
    "generated_codes": [
      "def binary_to_decimal(binary):\n    decimal = 0\n    power = 0\n    while binary > 0:\n        digit = binary % 10\n        decimal += digit * (2 ** power)\n        binary //= 10\n        power += 1\n    return decimal"
    ],
    "token_counts": [
      357
    ],
    "generation_times": [
      15.473143380135298
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 25,
    "prompt": "Write a python function to find the product of non-repeated elements in a given array.",
    "generated_codes": [
      "def find_Product(arr, n):\n    # Create a dictionary to count occurrences of each element\n    count_dict = {}\n    \n    # Count occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the product of non-repeated elements\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    \n    return product"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      12.572300471365452
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 26,
    "prompt": "Write a function to check if the given tuple list has all k elements.",
    "generated_codes": [
      "def check_k_elements(tuple_list, k):\n    return all(len(t) == k for t in tuple_list)"
    ],
    "token_counts": [
      359
    ],
    "generation_times": [
      15.50618963316083
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 27,
    "prompt": "Write a python function to remove all digits from a list of strings.",
    "generated_codes": [
      "def remove(strings):\n    return [''.join(char for char in s if not char.isdigit()) for s in strings]"
    ],
    "token_counts": [
      252
    ],
    "generation_times": [
      10.953009109944105
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 28,
    "prompt": "Write a python function to find binomial co-efficient.",
    "generated_codes": [
      "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Test cases"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      6.578494247049093
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 29,
    "prompt": "Write a python function to find the element occurring odd number of times.",
    "generated_codes": [
      "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for i in range(n):\n        result ^= arr[i]\n    return result"
    ],
    "token_counts": [
      216
    ],
    "generation_times": [
      9.356471601873636
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 30,
    "prompt": "Write a python function to count all the substrings starting and ending with same characters.",
    "generated_codes": [
      "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over each character in the string\n    for i in range(n):\n        # For each character, consider it as the starting character\n        for j in range(i, n):\n            # Check if the starting and ending characters are the same\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      7.152315106242895
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 31,
    "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "generated_codes": [
      "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Flatten the list of lists and count occurrences\n    all_numbers = [num for sublist in lists for num in sublist]\n    count = Counter(all_numbers)\n    \n    # Use a min heap to keep track of the k most frequent elements\n    heap = []\n    for num, freq in count.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Extract the numbers from the heap and reverse the order\n    result = [num for _, num in sorted(heap, reverse=True)]\n    \n    return result"
    ],
    "token_counts": [
      408
    ],
    "generation_times": [
      17.735825672745705
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 32,
    "prompt": "Write a python function to find the largest prime factor of a given number.",
    "generated_codes": [
      "def max_Prime_Factors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def largest_prime_factor(num):\n        largest = -1\n        while num % 2 == 0:\n            largest = 2\n            num //= 2\n        for i in range(3, int(num**0.5) + 1, 2):\n            while num % i == 0:\n                largest = i\n                num //= i\n        if num > 2:\n            largest = num\n        return largest\n\n    return largest_prime_factor(n)\n\n# Test cases"
    ],
    "token_counts": [
      273
    ],
    "generation_times": [
      11.825899861752987
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 33,
    "prompt": "Write a python function to convert a decimal number to binary number.",
    "generated_codes": [
      "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return int(binary)\n\n# Test cases"
    ],
    "token_counts": [
      119
    ],
    "generation_times": [
      5.178328491747379
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 34,
    "prompt": "Write a python function to find the missing number in a sorted array.",
    "generated_codes": [
      "def find_missing(arr, n):\n    # Calculate the expected sum of the first n natural numbers\n    expected_sum = n * (n + 1) // 2\n    # Calculate the actual sum of the elements in the array\n    actual_sum = sum(arr)\n    # The missing number is the difference between the expected sum and the actual sum\n    return expected_sum - actual_sum\n\n# Test cases"
    ],
    "token_counts": [
      168
    ],
    "generation_times": [
      7.289515011012554
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 35,
    "prompt": "Write a function to find the n-th rectangular number.",
    "generated_codes": [
      "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    A rectangular number is a number that can be expressed as the area of a rectangle.\n    The n-th rectangular number is given by the formula: n * (n + 1) / 2.\n    \n    :param n: The position of the rectangular number to find.\n    :return: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Test cases"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      6.546955958008766
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 36,
    "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "generated_codes": [
      "def find_Nth_Digit(a, b, n):\n    # Generate the sequence of proper fractions\n    fractions = []\n    for numerator in range(1, a + 1):\n        for denominator in range(1, b + 1):\n            if numerator < denominator:\n                fractions.append((numerator, denominator))\n    \n    # Sort fractions by their decimal value\n    fractions.sort(key=lambda x: x[0] / x[1])\n    \n    # Convert fractions to their decimal representation\n    decimal_representation = ''\n    for numerator, denominator in fractions:\n        decimal_representation += str(numerator / denominator)\n    \n    # Find the nth digit\n    return int(decimal_representation[n - 1])\n\n# Test cases"
    ],
    "token_counts": [
      227
    ],
    "generation_times": [
      9.809669371694326
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 37,
    "prompt": "Write a function to sort a given mixed list of integers and strings.",
    "generated_codes": [
      "def sort_mixed_list(mixed_list):\n    # Separate integers and strings\n    integers = [x for x in mixed_list if isinstance(x, int)]\n    strings = [x for x in mixed_list if isinstance(x, str)]\n    \n    # Sort integers in ascending order\n    integers.sort()\n    \n    # Sort strings in alphabetical order\n    strings.sort()\n    \n    # Combine the sorted lists\n    return integers + strings"
    ],
    "token_counts": [
      209
    ],
    "generation_times": [
      9.076427068561316
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 38,
    "prompt": "Write a function to find the division of first even and odd number of a given list.",
    "generated_codes": [
      "def div_even_odd(numbers):\n    first_even = None\n    first_odd = None\n    \n    for num in numbers:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even // first_odd"
    ],
    "token_counts": [
      467
    ],
    "generation_times": [
      20.243580617010593
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 39,
    "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "generated_codes": [
      "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # If the most frequent character appears more than (n+1)/2 times,\n    # it's impossible to rearrange\n    if -max_heap[0][0] > (len(s) + 1) // 2:\n        return \"\"\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If there was a previous character with remaining count, add it back\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        # Update for the next iteration\n        prev_count, prev_char = count + 1, char\n    \n    return ''.join(result)\n\n# Test cases"
    ],
    "token_counts": [
      302
    ],
    "generation_times": [
      13.067672535777092
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 40,
    "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "generated_codes": [
      "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    # Use Counter to count the frequency of each element\n    frequency = Counter(flattened_list)\n    return dict(frequency)\n\n# Test cases"
    ],
    "token_counts": [
      389
    ],
    "generation_times": [
      16.899651382118464
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 41,
    "prompt": "Write a function to filter even numbers using lambda function.",
    "generated_codes": [
      "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      1.450675081461668
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 42,
    "prompt": "Write a python function to find the sum of repeated elements in a given array.",
    "generated_codes": [
      "def find_Sum(arr, n):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the sum of repeated elements\n    sum_repeated = 0\n    for num, count in freq.items():\n        if count > 1:\n            sum_repeated += num\n    \n    return sum_repeated"
    ],
    "token_counts": [
      284
    ],
    "generation_times": [
      12.275061525404453
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 43,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "generated_codes": [
      "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      154
    ],
    "generation_times": [
      6.69340306520462
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 44,
    "prompt": "Write a function that matches a word at the beginning of a string.",
    "generated_codes": [
      "import re\n\ndef text_match_string(text):\n    pattern = r'^\\w+'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      53
    ],
    "generation_times": [
      2.309735368937254
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 45,
    "prompt": "Write a function to find the gcd of the given array elements.",
    "generated_codes": [
      "def get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    \n    return result"
    ],
    "token_counts": [
      299
    ],
    "generation_times": [
      12.839260771870613
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 46,
    "prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
    "generated_codes": [
      "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))"
    ],
    "token_counts": [
      291
    ],
    "generation_times": [
      12.55473168194294
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 47,
    "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "generated_codes": [
      "def compute_Last_Digit(a, b):\n    if a > b:\n        return 1\n    \n    # Precompute last digits of factorials up to 20!\n    factorial_last_digits = [1]\n    for i in range(1, 21):\n        factorial_last_digits.append((factorial_last_digits[-1] * i) % 10)\n    \n    # Find the cycle length for each last digit\n    cycles = [1] * 10\n    for i in range(2, 10):\n        j = i\n        while True:\n            j = (j * i) % 10\n            cycles[i] += 1\n            if j == i:\n                break\n    \n    # Calculate the result\n    result = 1\n    for i in range(a, b + 1):\n        digit = factorial_last_digits[i]\n        cycle = cycles[digit]\n        result = (result * digit) % 10\n    \n    return result"
    ],
    "token_counts": [
      437
    ],
    "generation_times": [
      18.95346062630415
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 48,
    "prompt": "Write a python function to set all odd bits of a given number.",
    "generated_codes": [
      "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    \n    # Use bitwise OR to set all odd bits of n\n    return n | mask\n\n# Test cases"
    ],
    "token_counts": [
      312
    ],
    "generation_times": [
      13.566483404487371
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 49,
    "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "generated_codes": [
      "def specified_element(matrix, index):\n    return [row[index] for row in matrix]"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      8.339824233204126
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 50,
    "prompt": "Write a function to find the list with minimum length using lambda function.",
    "generated_codes": [
      "def min_length_list(lists):\n    return min(enumerate(lists, 1), key=lambda x: len(x[1]))"
    ],
    "token_counts": [
      167
    ],
    "generation_times": [
      7.288357209414244
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 51,
    "prompt": "Write a function to print check if the triangle is equilateral or not.",
    "generated_codes": [
      "def check_equilateral(a, b, c):\n    return a == b == c"
    ],
    "token_counts": [
      25
    ],
    "generation_times": [
      1.1038144081830978
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 52,
    "prompt": "Write a function to caluclate area of a parallelogram.",
    "generated_codes": [
      "def parallelogram_area(base, height):\n    return base * height"
    ],
    "token_counts": [
      21
    ],
    "generation_times": [
      0.9162279181182384
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 53,
    "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "generated_codes": [
      "def check_Equality(s):\n    if len(s) < 2:\n        return \"Not Equal\"\n    elif s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""
    ],
    "token_counts": [
      59
    ],
    "generation_times": [
      2.5676389038562775
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 54,
    "prompt": "Write a function to sort the given array by using counting sort.",
    "generated_codes": [
      "def counting_sort(arr):\n    if not arr:\n        return []\n\n    # Find the range of the input array\n    min_val = min(arr)\n    max_val = max(arr)\n    range_of_elements = max_val - min_val + 1\n\n    # Initialize the count array\n    count = [0] * range_of_elements\n\n    # Count the occurrences of each element\n    for num in arr:\n        count[num - min_val] += 1\n\n    # Modify the count array to store actual positions\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n\n    # Build the output array\n    output = [0] * len(arr)\n    for num in reversed(arr):\n        index = count[num - min_val] - 1\n        output[index] = num\n        count[num - min_val] -= 1\n\n    return output"
    ],
    "token_counts": [
      415
    ],
    "generation_times": [
      18.06065036728978
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 55,
    "prompt": "Write a function to find t-nth term of geometric series.",
    "generated_codes": [
      "def tn_gp(a, n, t):\n    \"\"\"\n    Calculate the t-th term of a geometric progression.\n\n    Parameters:\n    a (int): The first term of the geometric progression.\n    n (int): The number of terms in the geometric progression.\n    t (int): The term number to find.\n\n    Returns:\n    int: The t-th term of the geometric progression.\n    \"\"\"\n    # Calculate the common ratio r\n    r = (a * n) / a ** (n - 1)\n    \n    # Calculate the t-th term using the formula a * r^(t-1)\n    return a * (r ** (t - 1))\n\n# Test cases"
    ],
    "token_counts": [
      215
    ],
    "generation_times": [
      9.310605518519878
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 56,
    "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
    "generated_codes": [
      "def check(num):\n    # Reverse the number\n    reversed_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    return num == 2 * reversed_num - 1"
    ],
    "token_counts": [
      318
    ],
    "generation_times": [
      13.796660795807838
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 57,
    "prompt": "Write a python function to find the largest number that can be formed with the given digits.",
    "generated_codes": [
      "def find_Max_Num(digits, n):\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted digits to a string and then to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n    \n    return max_num"
    ],
    "token_counts": [
      249
    ],
    "generation_times": [
      10.820041980594397
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 58,
    "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
    "generated_codes": [
      "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)"
    ],
    "token_counts": [
      40
    ],
    "generation_times": [
      1.746934536844492
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 59,
    "prompt": "Write a function to find the nth octagonal number.",
    "generated_codes": [
      "def is_octagonal(n):\n    return 3 * n * n - 2 * n"
    ],
    "token_counts": [
      156
    ],
    "generation_times": [
      6.802427172660828
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 60,
    "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "generated_codes": [
      "def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n\n    # Initialize the maximum length of subsequence\n    max_len = 1\n\n    # Initialize the current length of subsequence\n    current_len = 1\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Check if the difference between current and previous element is 1\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_len += 1\n        else:\n            # Update the maximum length if current length is greater\n            max_len = max(max_len, current_len)\n            # Reset the current length\n            current_len = 1\n\n    # Update the maximum length for the last subsequence\n    max_len = max(max_len, current_len)\n\n    return max_len\n\n# Test cases"
    ],
    "token_counts": [
      293
    ],
    "generation_times": [
      12.702052667737007
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 61,
    "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "generated_codes": [
      "def count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"
    ],
    "token_counts": [
      348
    ],
    "generation_times": [
      13.748996775597334
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 62,
    "prompt": "Write a python function to find smallest number in a list.",
    "generated_codes": [
      "def smallest_num(numbers):\n    if not numbers:\n        raise ValueError(\"The list is empty\")\n    return min(numbers)\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      4.437923278659582
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 63,
    "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "generated_codes": [
      "def max_difference(pairs):\n    if not pairs:\n        return 0\n    \n    max_diff = float('-inf')\n    for pair in pairs:\n        diff = abs(pair[1] - pair[0])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    ],
    "token_counts": [
      233
    ],
    "generation_times": [
      10.016078226268291
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 64,
    "prompt": "Write a function to sort a list of tuples using lambda.",
    "generated_codes": [
      "def subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])"
    ],
    "token_counts": [
      264
    ],
    "generation_times": [
      11.219816897064447
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 65,
    "prompt": "Write a function of recursion list sum.",
    "generated_codes": [
      "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    ],
    "token_counts": [
      209
    ],
    "generation_times": [
      8.720479357987642
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 66,
    "prompt": "Write a python function to count positive numbers in a list.",
    "generated_codes": [
      "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)"
    ],
    "token_counts": [
      168
    ],
    "generation_times": [
      7.30882403254509
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 67,
    "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
    "generated_codes": [
      "def bell_number(n):\n    # Create a 2D array to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # Return the last value in the last row\n    return bell[n][0]\n\n# Test cases"
    ],
    "token_counts": [
      260
    ],
    "generation_times": [
      11.247531924396753
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 68,
    "prompt": "Write a python function to check whether the given array is monotonic or not.",
    "generated_codes": [
      "def is_Monotonic(arr):\n    if not arr:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            decreasing = False\n        elif arr[i] < arr[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"
    ],
    "token_counts": [
      279
    ],
    "generation_times": [
      11.959304824471474
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 69,
    "prompt": "Write a function to check whether a list contains the given sublist or not.",
    "generated_codes": [
      "def is_sublist(main_list, sub_list):\n    # Convert both lists to strings and check if sub_list is a substring of main_list\n    main_str = ','.join(map(str, main_list))\n    sub_str = ','.join(map(str, sub_list))\n    return sub_str in main_str\n\n# Test cases"
    ],
    "token_counts": [
      145
    ],
    "generation_times": [
      6.124257043004036
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 70,
    "prompt": "Write a function to find whether all the given tuples have equal length or not.",
    "generated_codes": [
      "def get_equal(tuples_list, expected_length):\n    for tup in tuples_list:\n        if len(tup) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n\n# Test cases"
    ],
    "token_counts": [
      176
    ],
    "generation_times": [
      7.330672156065702
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 71,
    "prompt": "Write a function to sort a list of elements using comb sort.",
    "generated_codes": [
      "def comb_sort(arr):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n# Test cases"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      11.951065134257078
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 72,
    "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "generated_codes": [
      "def dif_Square(n):\n    for i in range(int(n**0.5) + 1):\n        j = int((n + i*i)**0.5)\n        if i*i - j*j == n:\n            return True\n    return False"
    ],
    "token_counts": [
      64
    ],
    "generation_times": [
      2.773178432136774
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 73,
    "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
    "generated_codes": [
      "import re\n\ndef multiple_split(s):\n    return re.split(r'[\\s\\*]', s)"
    ],
    "token_counts": [
      138
    ],
    "generation_times": [
      5.929965756833553
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 74,
    "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
    "generated_codes": [
      "def is_samepatterns(words, patterns):\n    if len(words) != len(patterns):\n        return False\n    \n    word_to_pattern = {}\n    pattern_to_word = {}\n    \n    for word, pattern in zip(words, patterns):\n        if word in word_to_pattern:\n            if word_to_pattern[word] != pattern:\n                return False\n        else:\n            word_to_pattern[word] = pattern\n        \n        if pattern in pattern_to_word:\n            if pattern_to_word[pattern] != word:\n                return False\n        else:\n            pattern_to_word[pattern] = word\n    \n    return True"
    ],
    "token_counts": [
      142
    ],
    "generation_times": [
      6.158590719103813
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 75,
    "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "generated_codes": [
      "def find_tuples(tuples_list, k):\n    result = [tup for tup in tuples_list if all(elem % k == 0 for elem in tup)]\n    return str(result)"
    ],
    "token_counts": [
      215
    ],
    "generation_times": [
      9.312997501343489
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 76,
    "prompt": "Write a python function to count the number of squares in a rectangle.",
    "generated_codes": [
      "def count_Squares(width, height):\n    return width * height * (width + 1) * (height + 1) // 4\n\n# Test cases"
    ],
    "token_counts": [
      84
    ],
    "generation_times": [
      3.6297281682491302
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 77,
    "prompt": "Write a python function to find the difference between sum of even and odd digits.",
    "generated_codes": [
      "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    \n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        num //= 10\n    \n    return even_sum > odd_sum"
    ],
    "token_counts": [
      397
    ],
    "generation_times": [
      17.133572079241276
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 78,
    "prompt": "Write a python function to find number of integers with odd number of set bits.",
    "generated_codes": [
      "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count"
    ],
    "token_counts": [
      357
    ],
    "generation_times": [
      15.43537100031972
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 79,
    "prompt": "Write a python function to check whether the length of the word is odd or not.",
    "generated_codes": [
      "def word_len(word):\n    return len(word) % 2 != 0"
    ],
    "token_counts": [
      23
    ],
    "generation_times": [
      1.0009522922337055
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 80,
    "prompt": "Write a function to find the nth tetrahedral number.",
    "generated_codes": [
      "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n\n# Test cases"
    ],
    "token_counts": [
      80
    ],
    "generation_times": [
      3.5049399062991142
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 81,
    "prompt": "Write a function to zip the two given tuples.",
    "generated_codes": [
      "def zip_tuples(tuple1, tuple2):\n    result = []\n    len1, len2 = len(tuple1), len(tuple2)\n    for i in range(len1):\n        result.append((tuple1[i], tuple2[i % len2]))\n    return result"
    ],
    "token_counts": [
      293
    ],
    "generation_times": [
      12.806817181408405
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 82,
    "prompt": "Write a function to find the volume of a sphere.",
    "generated_codes": [
      "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3"
    ],
    "token_counts": [
      246
    ],
    "generation_times": [
      10.655459605157375
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 83,
    "prompt": "Write a python function to find the character made by adding all the characters of the given string.",
    "generated_codes": [
      "def get_Char(s):\n    # Initialize a variable to store the sum of ASCII values\n    total = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Add the ASCII value of the character to the total\n        total += ord(char)\n    \n    # Calculate the character corresponding to the sum of ASCII values\n    result_char = chr(total % 26 + ord('a'))\n    \n    return result_char\n\n# Test cases"
    ],
    "token_counts": [
      144
    ],
    "generation_times": [
      6.273891318589449
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 84,
    "prompt": "Write a function to find the n-th number in newman conway sequence.",
    "generated_codes": [
      "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Initialize the first two elements of the sequence\n    seq = [1, 1]\n    \n    # Generate the sequence up to the n-th element\n    for i in range(2, n):\n        # The next element is the (seq[i-1])-th element of the sequence\n        seq.append(seq[seq[i-1] - 1])\n    \n    return seq[n-1]\n\n# Test cases"
    ],
    "token_counts": [
      156
    ],
    "generation_times": [
      6.756959468126297
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 85,
    "prompt": "Write a function to find the surface area of a sphere.",
    "generated_codes": [
      "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2"
    ],
    "token_counts": [
      30
    ],
    "generation_times": [
      1.2990178503096104
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 86,
    "prompt": "Write a function to find nth centered hexagonal number.",
    "generated_codes": [
      "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    ],
    "token_counts": [
      209
    ],
    "generation_times": [
      9.065663874149323
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 87,
    "prompt": "Write a function to merge three dictionaries into a single expression.",
    "generated_codes": [
      "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      7.580519534647465
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 88,
    "prompt": "Write a function to get the frequency of the elements in a list.",
    "generated_codes": [
      "def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n# Test cases"
    ],
    "token_counts": [
      261
    ],
    "generation_times": [
      11.31805607303977
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 89,
    "prompt": "Write a function to find the closest smaller number than n.",
    "generated_codes": [
      "def closest_num(n):\n    return n - 1"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      6.49224953353405
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 90,
    "prompt": "Write a python function to find the length of the longest word.",
    "generated_codes": [
      "def len_log(words):\n    return max(len(word) for word in words)\n\n# Test cases"
    ],
    "token_counts": [
      72
    ],
    "generation_times": [
      3.142327092587948
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 91,
    "prompt": "Write a function to check if a substring is present in a given list of string values.",
    "generated_codes": [
      "def find_substring(strings, substring):\n    for string in strings:\n        if substring in string:\n            return True\n    return False"
    ],
    "token_counts": [
      37
    ],
    "generation_times": [
      1.6226315200328827
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 92,
    "prompt": "Write a function to check whether the given number is undulating or not.",
    "generated_codes": [
      "def is_undulating(number_str):\n    if len(number_str) < 2:\n        return False\n    \n    for i in range(1, len(number_str)):\n        if number_str[i] == number_str[i-1]:\n            return False\n        if i > 1 and number_str[i] == number_str[i-2]:\n            return False\n    \n    return True"
    ],
    "token_counts": [
      350
    ],
    "generation_times": [
      15.271966345608234
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 93,
    "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
    "generated_codes": [
      "def power(a, b):\n    return a ** b\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      2.726869486272335
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 94,
    "prompt": "Write a function to extract the index minimum value record from the given tuples.",
    "generated_codes": [
      "def index_minimum(tuples_list):\n    # Initialize the minimum value and corresponding name\n    min_value = float('inf')\n    min_name = None\n    \n    # Iterate through the list of tuples\n    for name, value in tuples_list:\n        # Check if the current value is less than the minimum value found so far\n        if value < min_value:\n            min_value = value\n            min_name = name\n    \n    return min_name\n\n# Test cases"
    ],
    "token_counts": [
      227
    ],
    "generation_times": [
      9.981174986809492
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 95,
    "prompt": "Write a python function to find the minimum length of sublist.",
    "generated_codes": [
      "def Find_Min_Length(lists):\n    if not lists:\n        return 0\n    return min(len(sublist) for sublist in lists)\n\n# Test cases"
    ],
    "token_counts": [
      119
    ],
    "generation_times": [
      5.158752176910639
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 96,
    "prompt": "Write a python function to find the number of divisors of a given integer.",
    "generated_codes": [
      "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      108
    ],
    "generation_times": [
      4.719363082200289
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 97,
    "prompt": "Write a function to find frequency count of list of lists.",
    "generated_codes": [
      "def frequency_lists(list_of_lists):\n    frequency = {}\n    for sublist in list_of_lists:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"
    ],
    "token_counts": [
      72
    ],
    "generation_times": [
      3.199346974492073
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 98,
    "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "generated_codes": [
      "def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    ],
    "token_counts": [
      50
    ],
    "generation_times": [
      2.1752967536449432
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 99,
    "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
    "generated_codes": [
      "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    \n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    \n    return binary\n\n# Test cases"
    ],
    "token_counts": [
      114
    ],
    "generation_times": [
      4.940221805125475
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 100,
    "prompt": "Write a function to find the next smallest palindrome of a specified number.",
    "generated_codes": [
      "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\n# Test cases"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      5.578784789890051
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 101,
    "prompt": "Write a function to find the kth element in the given array.",
    "generated_codes": [
      "def kth_element(arr, n, k):\n    # Sort the array\n    arr.sort()\n    \n    # Return the kth element (k-1 because of 0-based indexing)\n    return arr[k-1]"
    ],
    "token_counts": [
      342
    ],
    "generation_times": [
      14.812859926372766
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 102,
    "prompt": "Write a function to convert snake case string to camel case string.",
    "generated_codes": [
      "def snake_to_camel(snake_str):\n    # Split the string by underscores\n    words = snake_str.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_str\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      5.809804681688547
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 103,
    "prompt": "Write a function to find eulerian number a(n, m).",
    "generated_codes": [
      "def eulerian_num(n, m):\n    # Initialize a 2D list to store Eulerian numbers\n    euler = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    # Base case: eulerian_num(0, 0) = 1\n    euler[0][0] = 1\n    \n    # Fill the euler table\n    for i in range(1, n + 1):\n        for j in range(min(i, m) + 1):\n            if j == 0:\n                euler[i][j] = 1\n            else:\n                euler[i][j] = euler[i-1][j-1] + j * euler[i-1][j]\n    \n    return euler[n][m]\n\n# Test cases"
    ],
    "token_counts": [
      416
    ],
    "generation_times": [
      18.027278181165457
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 104,
    "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "generated_codes": [
      "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=lambda x: x.strip()) for sublist in list_of_lists]"
    ],
    "token_counts": [
      246
    ],
    "generation_times": [
      10.761263150721788
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 105,
    "prompt": "Write a python function to count true booleans in the given list.",
    "generated_codes": [
      "def count(lst):\n    return sum(lst)"
    ],
    "token_counts": [
      149
    ],
    "generation_times": [
      6.462046667933464
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 106,
    "prompt": "Write a function to add the given list to the given tuples.",
    "generated_codes": [
      "def add_lists(lst, tup):\n    return tup + tuple(lst)"
    ],
    "token_counts": [
      265
    ],
    "generation_times": [
      11.542342074215412
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 107,
    "prompt": "Write a python function to count hexadecimal numbers for a given range.",
    "generated_codes": [
      "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Convert to hex and remove '0x' prefix\n        if all(c in '0123456789ABCDEF' for c in hex_str):\n            count += 1\n    return count"
    ],
    "token_counts": [
      345
    ],
    "generation_times": [
      15.059733510017395
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 108,
    "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef merge_sorted_list(*sorted_lists):\n    # Create a min-heap\n    min_heap = []\n    \n    # Initialize the heap with the first element from each list\n    for i, sorted_list in enumerate(sorted_lists):\n        if sorted_list:  # Check if the list is not empty\n            heapq.heappush(min_heap, (sorted_list[0], i, 0))\n    \n    # List to store the merged sorted elements\n    merged_list = []\n    \n    # Extract elements from the heap and maintain the heap invariant\n    while min_heap:\n        # Pop the smallest element from the heap\n        value, list_index, element_index = heapq.heappop(min_heap)\n        merged_list.append(value)\n        \n        # If there is a next element in the same list, push it into the heap\n        if element_index + 1 < len(sorted_lists[list_index]):\n            next_value = sorted_lists[list_index][element_index + 1]\n            heapq.heappush(min_heap, (next_value, list_index, element_index + 1))\n    \n    return merged_list\n\n# Test cases"
    ],
    "token_counts": [
      713
    ],
    "generation_times": [
      31.109269678592682
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 109,
    "prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
    "generated_codes": [
      "def odd_Equivalent(s, n):\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 == 1\n\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if is_odd(rotated):\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      149
    ],
    "generation_times": [
      6.503739070147276
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 110,
    "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "generated_codes": [
      "def extract_missing(ranges, start, end):\n    result = []\n    current = start\n\n    for r_start, r_end in sorted(ranges):\n        if current < r_start:\n            result.append((current, r_start))\n        current = max(current, r_end + 1)\n\n    if current <= end:\n        result.append((current, end))\n\n    return result"
    ],
    "token_counts": [
      330
    ],
    "generation_times": [
      14.36502905935049
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 111,
    "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "generated_codes": [
      "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Convert the first list to a set\n    common = set(nested_lists[0])\n    \n    # Intersect with all other lists\n    for lst in nested_lists[1:]:\n        common.intersection_update(lst)\n    \n    # Convert back to a sorted list\n    return sorted(list(common))"
    ],
    "token_counts": [
      488
    ],
    "generation_times": [
      21.203517261892557
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 112,
    "prompt": "Write a python function to find the perimeter of a cylinder.",
    "generated_codes": [
      "import math\n\ndef perimeter(radius, height):\n    # The perimeter of a cylinder is the sum of the circumference of the two circular bases\n    # and the lateral surface area (which is not part of the perimeter).\n    # However, the problem seems to be asking for the perimeter of the circular base.\n    # The formula for the circumference of a circle is 2 * pi * radius.\n    # Since the problem doesn't specify the need for the lateral surface area,\n    # we'll assume it's not required in the perimeter calculation.\n    \n    # Calculate the circumference of the base\n    circumference = 2 * math.pi * radius\n    \n    # Return the circumference as the \"perimeter\"\n    return circumference\n\n# Test cases"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      8.579483613371849
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 113,
    "prompt": "Write a function to check if a string represents an integer or not.",
    "generated_codes": [
      "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      1.4435491561889648
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 114,
    "prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
    "generated_codes": [
      "def assign_freq(tuples_list):\n    from collections import defaultdict\n\n    # Dictionary to store the frequency of each tuple\n    freq_dict = defaultdict(int)\n\n    # Count the frequency of each tuple\n    for tup in tuples_list:\n        freq_dict[tup] += 1\n\n    # Create a list to store the result\n    result = []\n\n    # Append the tuple and its frequency to the result list\n    for tup in tuples_list:\n        if freq_dict[tup] > 0:\n            result.append(tup + (freq_dict[tup],))\n            freq_dict[tup] = 0  # Set frequency to 0 to avoid adding it again\n\n    return str(result)\n\n# Test cases"
    ],
    "token_counts": [
      443
    ],
    "generation_times": [
      19.17976715415716
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 115,
    "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
    "generated_codes": [
      "def empty_dit(dicts):\n    if isinstance(dicts, dict):\n        return len(dicts) == 0\n    elif isinstance(dicts, list):\n        return all(len(d) == 0 for d in dicts)\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      106
    ],
    "generation_times": [
      4.610013011842966
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 116,
    "prompt": "Write a function to convert a given tuple of positive integers into an integer.",
    "generated_codes": [
      "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      8.370794579386711
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 117,
    "prompt": "Write a function to convert all possible convertible elements in the list to float.",
    "generated_codes": [
      "def list_to_float(lst):\n    return str([tuple(float(x) for x in tup) for tup in lst])"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      8.429138857871294
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 118,
    "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "generated_codes": [
      "def string_to_list(s):\n    return s.split()"
    ],
    "token_counts": [
      75
    ],
    "generation_times": [
      3.236628510057926
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 119,
    "prompt": "Write a python function to find the element that appears only once in a sorted array.",
    "generated_codes": [
      "def search(arr, n):\n    # Initialize the low and high pointers\n    low, high = 0, n - 1\n    \n    # Iterate while low is less than high\n    while low < high:\n        # Find the middle index\n        mid = low + (high - low) // 2\n        \n        # Check if the mid is even or odd\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Compare the mid element with the next element\n        if arr[mid] == arr[mid + 1]:\n            # If they are equal, the single element must be in the right half\n            low = mid + 2\n        else:\n            # If they are not equal, the single element must be in the left half\n            high = mid\n    \n    # When low equals high, we have found the single element\n    return arr[low]\n\n# Test cases"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      12.039077647030354
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 120,
    "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "generated_codes": [
      "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for t1 in tuples_list:\n        for t2 in tuples_list:\n            if t1 != t2:\n                product = t1[0] * t2[0] + t1[1] * t2[1]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\n# Test cases"
    ],
    "token_counts": [
      214
    ],
    "generation_times": [
      9.202230643481016
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 121,
    "prompt": "Write a function to find the triplet with sum of the given array",
    "generated_codes": [
      "def check_triplet(arr, a, b, c):\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == a + b + c:\n                    return True\n    return False"
    ],
    "token_counts": [
      95
    ],
    "generation_times": [
      4.113971002399921
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 122,
    "prompt": "Write a function to find n’th smart number.",
    "generated_codes": [
      "def smartNumber(n):\n    def is_smart(num):\n        return num % 3 == 0 or num % 5 == 0 or num % 7 == 0\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_smart(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1"
    ],
    "token_counts": [
      418
    ],
    "generation_times": [
      18.1326693482697
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 123,
    "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "generated_codes": [
      "def amicable_numbers_sum(limit):\n    def sum_of_proper_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit and sum_of_proper_divisors(b) == a:\n            amicable_sum += a\n\n    return amicable_sum\n\n# Test cases"
    ],
    "token_counts": [
      175
    ],
    "generation_times": [
      7.566646993160248
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 124,
    "prompt": "Write a function to get the angle of a complex number.",
    "generated_codes": [
      "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)"
    ],
    "token_counts": [
      303
    ],
    "generation_times": [
      13.151689156889915
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 125,
    "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "generated_codes": [
      "def find_length(s, n):\n    max_diff = 0\n    count = {0: -1}\n    current_diff = 0\n\n    for i in range(n):\n        if s[i] == '1':\n            current_diff += 1\n        else:\n            current_diff -= 1\n\n        if current_diff in count:\n            max_diff = max(max_diff, i - count[current_diff])\n        else:\n            count[current_diff] = i\n\n    return max_diff"
    ],
    "token_counts": [
      354
    ],
    "generation_times": [
      15.337163262069225
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 126,
    "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
    "generated_codes": [
      "def sum_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n // i)\n        return divs\n\n    common_divisors = divisors(a) & divisors(b)\n    return sum(common_divisors)"
    ],
    "token_counts": [
      415
    ],
    "generation_times": [
      17.95320277288556
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 127,
    "prompt": "Write a function to multiply two integers without using the * operator in python.",
    "generated_codes": [
      "def multiply_int(a, b):\n    result = 0\n    for _ in range(abs(b)):\n        result += abs(a)\n    if (a < 0) ^ (b < 0):  # XOR to check if one is negative\n        result = -result\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      5.325155187398195
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 128,
    "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
    "generated_codes": [
      "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]"
    ],
    "token_counts": [
      36
    ],
    "generation_times": [
      1.5630365274846554
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 129,
    "prompt": "Write a function to calculate magic square.",
    "generated_codes": [
      "def magic_square_test(matrix):\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the magic constant\n    magic_constant = sum(matrix[0])\n    \n    # Check rows\n    if any(sum(row) != magic_constant for row in matrix):\n        return False\n    \n    # Check columns\n    if any(sum(matrix[i][j] for i in range(n)) != magic_constant for j in range(n)):\n        return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][n-1-i] for i in range(n)) != magic_constant:\n        return False\n    \n    return True"
    ],
    "token_counts": [
      401
    ],
    "generation_times": [
      17.487160049378872
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 130,
    "prompt": "Write a function to find the item with maximum frequency in a given list.",
    "generated_codes": [
      "def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    max_item = None\n    max_count = 0\n    \n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return (max_item, max_count)\n\n# Test cases"
    ],
    "token_counts": [
      279
    ],
    "generation_times": [
      12.207082957029343
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 131,
    "prompt": "Write a python function to reverse only the vowels of a given string.",
    "generated_codes": [
      "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    \n    return ''.join(s)\n\n# Test cases"
    ],
    "token_counts": [
      179
    ],
    "generation_times": [
      7.709343001246452
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 132,
    "prompt": "Write a function to convert tuple to a string.",
    "generated_codes": [
      "def tup_string(tup):\n    return ''.join(tup)"
    ],
    "token_counts": [
      22
    ],
    "generation_times": [
      0.9756169430911541
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 133,
    "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "generated_codes": [
      "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))"
    ],
    "token_counts": [
      165
    ],
    "generation_times": [
      7.134204231202602
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 134,
    "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "generated_codes": [
      "def check_last(arr, p, m):\n    # Get the last element of the array\n    last = arr[-1]\n    \n    # Perform the operation p times\n    for _ in range(p):\n        # Add m to the last element\n        last += m\n        \n        # If the last element becomes even, break the loop\n        if last % 2 == 0:\n            break\n    \n    # Check if the final last element is even or odd\n    if last % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\""
    ],
    "token_counts": [
      373
    ],
    "generation_times": [
      16.123312260955572
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 135,
    "prompt": "Write a function to find the nth hexagonal number.",
    "generated_codes": [
      "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Test cases"
    ],
    "token_counts": [
      63
    ],
    "generation_times": [
      2.7627765499055386
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 136,
    "prompt": "Write a function to calculate electricity bill.",
    "generated_codes": [
      "def cal_electbill(units):\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 25 + (units - 50) * 0.75\n    elif units <= 250:\n        return 100 + (units - 150) * 1.20\n    else:\n        return 220 + (units - 250) * 1.50\n\n# Test cases"
    ],
    "token_counts": [
      181
    ],
    "generation_times": [
      7.806197237223387
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 137,
    "prompt": "Write a function to find the ration of zeroes in an array of integers.",
    "generated_codes": [
      "def zero_count(arr):\n    if not arr:\n        return 0.00\n    zeroes = arr.count(0)\n    return round(zeroes / len(arr), 2)\n\n# Test cases"
    ],
    "token_counts": [
      192
    ],
    "generation_times": [
      8.362054362893105
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 138,
    "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "generated_codes": [
      "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    \n    while n > 0:\n        if n & 1:  # Check if the least significant bit is 1\n            n -= 1  # Subtract 1 to remove the rightmost 1\n        else:\n            n >>= 1  # Right shift by 1 (equivalent to dividing by 2)\n    \n    return n == 0\n\n# Test cases"
    ],
    "token_counts": [
      411
    ],
    "generation_times": [
      17.802914533764124
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 139,
    "prompt": "Write a function to find the circumference of a circle.",
    "generated_codes": [
      "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius"
    ],
    "token_counts": [
      206
    ],
    "generation_times": [
      8.97876327112317
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 140,
    "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
    "generated_codes": [
      "def extract_singly(tuple_list):\n    # Create a dictionary to count occurrences of each element\n    element_count = {}\n    \n    # Iterate through each tuple in the list\n    for tup in tuple_list:\n        # Count occurrences of each element in the tuple\n        for element in tup:\n            element_count[element] = element_count.get(element, 0) + 1\n    \n    # Extract elements that occur only once\n    singly_occurring = [element for element, count in element_count.items() if count == 1]\n    \n    return singly_occurring"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      12.445982228964567
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 141,
    "prompt": "Write a function to sort a list of elements using pancake sort.",
    "generated_codes": [
      "def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum element in arr[0:size]\n        max_index = arr.index(max(arr[:size]))\n        \n        # If the maximum element is not already at its correct position\n        if max_index != size - 1:\n            # Flip the maximum element to the front if it's not already there\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            # Flip it to its correct position\n            arr = flip(arr, size)\n    \n    return arr\n\n# Test cases"
    ],
    "token_counts": [
      314
    ],
    "generation_times": [
      12.757659740746021
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 142,
    "prompt": "Write a function to count the same pair in three given lists.",
    "generated_codes": [
      "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    ],
    "token_counts": [
      358
    ],
    "generation_times": [
      13.474804393947124
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 143,
    "prompt": "Write a function to find number of lists present in the given tuple.",
    "generated_codes": [
      "def find_lists(tup):\n    return sum(isinstance(item, list) for item in tup)"
    ],
    "token_counts": [
      293
    ],
    "generation_times": [
      11.197179529815912
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 144,
    "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "generated_codes": [
      "def sum_Pairs(arr, n):\n    # Sort the array to make it easier to calculate the absolute differences\n    arr.sort()\n    \n    # Initialize the sum of absolute differences\n    total_sum = 0\n    \n    # Calculate the sum of absolute differences for all pairs\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    \n    return total_sum\n\n# Test cases"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      7.481905274093151
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 145,
    "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
    "generated_codes": [
      "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    \n    min_element = arr[0]\n    max_element = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n        elif arr[i] > max_element:\n            max_element = arr[i]\n    \n    return max_element - min_element\n\n# Test cases"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      6.212516915053129
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 146,
    "prompt": "Write a function to find the ascii value of total characters in a string.",
    "generated_codes": [
      "def ascii_value_string(s):\n    return sum(ord(char) for char in s)"
    ],
    "token_counts": [
      26
    ],
    "generation_times": [
      0.958167303353548
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 147,
    "prompt": "Write a function to find the maximum total path sum in the given triangle.",
    "generated_codes": [
      "def max_path_sum(triangle, row, col):\n    # Start from the second last row and move upwards\n    for i in range(row - 1, -1, -1):\n        for j in range(col):\n            # Update the current element to be the sum of itself and the maximum of the two elements directly below it\n            if triangle[i + 1][j] != 0 and triangle[i + 1][j + 1] != 0:\n                triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n            elif triangle[i + 1][j] != 0:\n                triangle[i][j] += triangle[i + 1][j]\n            elif triangle[i + 1][j + 1] != 0:\n                triangle[i][j] += triangle[i + 1][j + 1]\n\n    # The top element now contains the maximum total path sum\n    return triangle[0][0]\n\n# Test cases"
    ],
    "token_counts": [
      367
    ],
    "generation_times": [
      13.997267737984657
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 148,
    "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "generated_codes": [
      "def sum_digits_twoparts(n):\n    digits = [int(d) for d in str(n)]\n    total_sum = sum(digits)\n    \n    # Try all possible splits\n    max_sum = 0\n    for i in range(1, len(digits)):\n        left_sum = sum(digits[:i])\n        right_sum = total_sum - left_sum\n        max_sum = max(max_sum, left_sum + right_sum)\n    \n    return max_sum\n\n# Test cases"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      10.932041179388762
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 149,
    "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "generated_codes": [
      "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n\n    # Create a dictionary to store the length of the longest subsequence\n    # ending at each element\n    dp = {}\n\n    # Initialize the maximum length\n    max_len = 1\n\n    # Iterate over each element in the array\n    for i in range(n):\n        # Check for the previous element in the sequence\n        if arr[i] - 1 in dp:\n            dp[arr[i]] = dp[arr[i] - 1] + 1\n        # Check for the next element in the sequence\n        elif arr[i] + 1 in dp:\n            dp[arr[i]] = dp[arr[i] + 1] + 1\n        else:\n            dp[arr[i]] = 1\n\n        # Update the maximum length\n        max_len = max(max_len, dp[arr[i]])\n\n    return max_len\n\n# Test cases"
    ],
    "token_counts": [
      329
    ],
    "generation_times": [
      12.194914124906063
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 150,
    "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "generated_codes": [
      "def does_Contain_B(a, b, n):\n    if a == b:\n        return a == n\n    \n    if (n - a) % (b - a) == 0 and (n - a) // (b - a) >= 0:\n        return True\n    \n    return False"
    ],
    "token_counts": [
      357
    ],
    "generation_times": [
      13.645822893828154
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 151,
    "prompt": "Write a python function to check whether the given number is co-prime or not.",
    "generated_codes": [
      "def is_coprime(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b) == 1"
    ],
    "token_counts": [
      324
    ],
    "generation_times": [
      13.952645249664783
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 152,
    "prompt": "Write a function to sort the given array by using merge sort.",
    "generated_codes": [
      "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result"
    ],
    "token_counts": [
      275
    ],
    "generation_times": [
      11.866176627576351
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 153,
    "prompt": "Write a function to find the vertex of a parabola.",
    "generated_codes": [
      "def parabola_vertex(a, b, c):\n    # The vertex form of a parabola is y = a(x - h)^2 + k\n    # where (h, k) is the vertex.\n    # Given the standard form y = ax^2 + bx + c, we can find h and k as follows:\n    \n    # h = -b / (2a)\n    h = -b / (2 * a)\n    \n    # k = f(h) = a*h^2 + b*h + c\n    k = a * h**2 + b * h + c\n    \n    return (h, k)\n\n# Test cases"
    ],
    "token_counts": [
      257
    ],
    "generation_times": [
      11.108533665537834
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 154,
    "prompt": "Write a function to extract every specified element from a given two dimensional list.",
    "generated_codes": [
      "def specified_element(matrix, index):\n    return [row[index] for row in matrix]"
    ],
    "token_counts": [
      215
    ],
    "generation_times": [
      9.347782876342535
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 155,
    "prompt": "Write a python function to toggle all even bits of a given number.",
    "generated_codes": [
      "def even_bit_toggle_number(n):\n    # Create a mask with all even bits set to 1\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    \n    # XOR the number with the mask to toggle even bits\n    return n ^ mask\n\n# Test cases"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      12.601556364446878
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 156,
    "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "generated_codes": [
      "def tuple_int_str(tuple_of_strings):\n    return tuple(tuple(map(int, strings)) for strings in tuple_of_strings)"
    ],
    "token_counts": [
      35
    ],
    "generation_times": [
      1.5452776104211807
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 157,
    "prompt": "Write a function to reflect the run-length encoding from a list.",
    "generated_codes": [
      "def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    current_element = lst[0]\n    count = 1\n    \n    for element in lst[1:]:\n        if element == current_element:\n            count += 1\n        else:\n            encoded.append([count, current_element])\n            current_element = element\n            count = 1\n    \n    encoded.append([count, current_element])\n    return encoded"
    ],
    "token_counts": [
      106
    ],
    "generation_times": [
      4.650283344089985
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 158,
    "prompt": "Write a python function to find k number of operations required to make all elements equal.",
    "generated_codes": [
      "def min_Ops(arr, n, k):\n    # Sort the array\n    arr.sort()\n    \n    # Find the median\n    median = arr[n // 2]\n    \n    # Calculate the total operations needed\n    total_ops = sum(abs(x - median) for x in arr)\n    \n    # Check if the total operations are within the limit\n    if total_ops <= k:\n        return total_ops\n    else:\n        return -1\n\n# Test cases"
    ],
    "token_counts": [
      329
    ],
    "generation_times": [
      14.42129910737276
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 159,
    "prompt": "Write a function to print the season for the given month and day.",
    "generated_codes": [
      "def month_season(month, day):\n    # Define the seasons and their corresponding months\n    seasons = {\n        'spring': ['March', 'April', 'May'],\n        'summer': ['June', 'July', 'August'],\n        'autumn': ['September', 'October', 'November'],\n        'winter': ['December', 'January', 'February']\n    }\n    \n    # Determine the season based on the month\n    for season, months in seasons.items():\n        if month in months:\n            return season\n    \n    # If the month is not found, return None\n    return None\n\n# Test cases"
    ],
    "token_counts": [
      188
    ],
    "generation_times": [
      8.08205983415246
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 160,
    "prompt": "Write a function to find x and y that satisfies ax + by = n.",
    "generated_codes": [
      "def solution(a, b, n):\n    # Check if n is divisible by the greatest common divisor of a and b\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return 'No solution'\n\n    # Use the Extended Euclidean Algorithm to find x and y\n    def extended_gcd(x, y):\n        if y == 0:\n            return x, 1, 0\n        g, x1, y1 = extended_gcd(y, x % y)\n        x = y1\n        y = x1 - (x // y) * y1\n        return g, x, y\n\n    g, x, y = extended_gcd(a, b)\n    x *= n // g\n    y *= n // g\n\n    return ('x = ', x, ', y = ', y)\n\n# Test cases"
    ],
    "token_counts": [
      300
    ],
    "generation_times": [
      13.003187578171492
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 161,
    "prompt": "Write a function to remove all elements from a given list present in another list.",
    "generated_codes": [
      "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"
    ],
    "token_counts": [
      347
    ],
    "generation_times": [
      15.102626021951437
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 162,
    "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "generated_codes": [
      "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\n# Test cases"
    ],
    "token_counts": [
      82
    ],
    "generation_times": [
      3.54230023548007
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 163,
    "prompt": "Write a function to calculate the area of a regular polygon.",
    "generated_codes": [
      "import math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Parameters:\n    n (int): Number of sides of the polygon\n    s (float): Length of each side\n    \n    Returns:\n    float: Area of the polygon\n    \"\"\"\n    # Formula: (n * s^2) / (4 * tan(π / n))\n    return (n * s**2) / (4 * math.tan(math.pi / n))"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      8.591293655335903
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 164,
    "prompt": "Write a python function to check whether the sum of divisors are same or not.",
    "generated_codes": [
      "def areEquivalent(a, b):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n + 1) if n % i == 0)\n    \n    return sum_of_divisors(a) == sum_of_divisors(b)"
    ],
    "token_counts": [
      67
    ],
    "generation_times": [
      2.9294933900237083
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 165,
    "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "generated_codes": [
      "def count_char_position(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i, char in enumerate(s.lower()):\n        if char in alphabet and i == alphabet.index(char):\n            count += 1\n    return count"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      9.217576552182436
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 166,
    "prompt": "Write a python function to count the pairs with xor as an even number.",
    "generated_codes": [
      "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      144
    ],
    "generation_times": [
      6.277613118290901
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 167,
    "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "generated_codes": [
      "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n# Test cases"
    ],
    "token_counts": [
      103
    ],
    "generation_times": [
      4.472074918448925
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 168,
    "prompt": "Write a python function to find the frequency of a number in a given array.",
    "generated_codes": [
      "def frequency(arr, num):\n    return arr.count(num)"
    ],
    "token_counts": [
      19
    ],
    "generation_times": [
      0.8379874564707279
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 169,
    "prompt": "Write a function to calculate the nth pell number.",
    "generated_codes": [
      "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    pell = [0] * (n + 1)\n    pell[0] = 0\n    pell[1] = 1\n    \n    for i in range(2, n + 1):\n        pell[i] = 2 * pell[i-1] + pell[i-2]\n    \n    return pell[n]"
    ],
    "token_counts": [
      326
    ],
    "generation_times": [
      14.122661616653204
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 170,
    "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "generated_codes": [
      "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"
    ],
    "token_counts": [
      346
    ],
    "generation_times": [
      15.043019097298384
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 171,
    "prompt": "Write a function to find the perimeter of a pentagon.",
    "generated_codes": [
      "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Test cases"
    ],
    "token_counts": [
      68
    ],
    "generation_times": [
      2.940956514328718
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 172,
    "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "generated_codes": [
      "def count_occurance(s):\n    return s.count('std')\n\n# Test cases"
    ],
    "token_counts": [
      77
    ],
    "generation_times": [
      3.3733021952211857
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 173,
    "prompt": "Write a function to remove everything except alphanumeric characters from a string.",
    "generated_codes": [
      "def remove_splchar(s):\n    return ''.join(char for char in s if char.isalnum())\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      5.812827728688717
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 174,
    "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "generated_codes": [
      "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result"
    ],
    "token_counts": [
      224
    ],
    "generation_times": [
      9.746642533689737
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 175,
    "prompt": "Write a function to verify validity of a string of parentheses.",
    "generated_codes": [
      "def is_valid_parenthese(s: str) -> bool:\n    # Dictionary to hold the mapping of closing to opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    # Stack to keep track of opening brackets\n    stack = []\n    \n    for char in s:\n        if char in bracket_map:\n            # Pop the topmost element from the stack if it is not empty, otherwise assign a dummy value\n            top_element = stack.pop() if stack else '#'\n            # Check if the popped element is the correct opening bracket\n            if bracket_map[char] != top_element:\n                return False\n        else:\n            # If it is an opening bracket, push it onto the stack\n            stack.append(char)\n    \n    # If the stack is empty, all the opening brackets have been matched\n    return not stack\n\n# Test cases"
    ],
    "token_counts": [
      233
    ],
    "generation_times": [
      10.084779120981693
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 176,
    "prompt": "Write a function to find the perimeter of a triangle.",
    "generated_codes": [
      "def perimeter_triangle(a, b, c):\n    return a + b + c"
    ],
    "token_counts": [
      24
    ],
    "generation_times": [
      1.0551614351570606
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 177,
    "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "generated_codes": [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef answer(start, end):\n    for i in range(start, end + 1):\n        for j in range(i + 1, end + 1):\n            if start <= lcm(i, j) <= end:\n                return (i, j)\n    return None  # In case no such pair is found"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      5.444506019353867
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 178,
    "prompt": "Write a function to search some literals strings in a string.",
    "generated_codes": [
      "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not Matched!'"
    ],
    "token_counts": [
      47
    ],
    "generation_times": [
      2.0337401814758778
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 179,
    "prompt": "Write a function to find if the given number is a keith number or not.",
    "generated_codes": [
      "def is_num_keith(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Initialize the sequence with the original number\n    sequence = digits[:]\n    \n    # Generate the sequence until we find the number or exceed it\n    while True:\n        # Calculate the next number in the sequence\n        next_num = sum(sequence[-len(digits):])\n        \n        # If we've found the number, it's a Keith number\n        if next_num == n:\n            return True\n        \n        # If we've exceeded the number, it's not a Keith number\n        if next_num > n:\n            return False\n        \n        # Add the next number to the sequence\n        sequence.append(next_num)"
    ],
    "token_counts": [
      444
    ],
    "generation_times": [
      19.196737252175808
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 180,
    "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
    "generated_codes": [
      "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    \n    # Haversine formula\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    \n    # Radius of Earth in kilometers\n    r = 6371\n    \n    # Calculate the distance\n    distance = c * r\n    \n    return distance"
    ],
    "token_counts": [
      385
    ],
    "generation_times": [
      16.69674714654684
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 181,
    "prompt": "Write a function to find the longest common prefix in the given set of strings.",
    "generated_codes": [
      "def common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n    \n    # Start with the first string as the prefix\n    prefix = strings[0]\n    \n    # Compare the prefix with each string\n    for i in range(1, n):\n        # Find the minimum length between the current prefix and the next string\n        min_length = min(len(prefix), len(strings[i]))\n        \n        # Initialize a temporary prefix\n        temp_prefix = \"\"\n        \n        # Compare characters of the prefix and the current string\n        for j in range(min_length):\n            if prefix[j] == strings[i][j]:\n                temp_prefix += prefix[j]\n            else:\n                break\n        \n        # Update the prefix\n        prefix = temp_prefix\n        \n        # If at any point the prefix becomes empty, return an empty string\n        if not prefix:\n            return \"\"\n    \n    return prefix\n\n# Test cases"
    ],
    "token_counts": [
      274
    ],
    "generation_times": [
      11.874715942889452
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 182,
    "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "generated_codes": [
      "import re\n\ndef find_character(s):\n    uppercase = re.findall(r'[A-Z]', s)\n    lowercase = re.findall(r'[a-z]', s)\n    digits = re.findall(r'\\d', s)\n    special_chars = re.findall(r'[^A-Za-z0-9]', s)\n    return (uppercase, lowercase, digits, special_chars)"
    ],
    "token_counts": [
      303
    ],
    "generation_times": [
      13.207493085414171
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 183,
    "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "generated_codes": [
      "def count_pairs(arr, n, k):\n    # Create a set to store unique elements\n    num_set = set(arr)\n    \n    # Initialize the count of pairs\n    count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Check if num + k exists in the set\n        if num + k in num_set:\n            count += 1\n        # Check if num - k exists in the set (to avoid counting the same pair twice)\n        if num - k in num_set and k != 0:\n            count += 1\n    \n    # Divide the count by 2 to avoid counting pairs twice\n    return count // 2"
    ],
    "token_counts": [
      508
    ],
    "generation_times": [
      22.01526252180338
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 184,
    "prompt": "Write a function to find all the values in a list that are greater than a specified number.",
    "generated_codes": [
      "def greater_specificnum(numbers, threshold):\n    return any(num > threshold for num in numbers)"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      12.57141299545765
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 185,
    "prompt": "Write a function to find the focus of a parabola.",
    "generated_codes": [
      "def parabola_focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola given its vertex coordinates and the directrix equation.\n    \n    Parameters:\n    a, b, c (float): Coefficients of the directrix equation y = ax + b.\n    \n    Returns:\n    tuple: Coordinates of the focus (x, y).\n    \"\"\"\n    # The distance from the vertex to the focus is given by the formula:\n    # distance = sqrt(4a^2 - (b^2 - c^2)) / 2a\n    \n    # Calculate the distance from the vertex to the focus\n    distance = ((4 * a**2) - (b**2 - c**2)) / (2 * a)\n    \n    # Calculate the x-coordinate of the focus\n    x_focus = -distance\n    \n    # Calculate the y-coordinate of the focus using the directrix equation\n    y_focus = a * x_focus + b\n    \n    return (x_focus, y_focus)\n\n# Test cases"
    ],
    "token_counts": [
      329
    ],
    "generation_times": [
      14.302757859230042
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 186,
    "prompt": "Write a function to search some literals strings in a string by using regex.",
    "generated_codes": [
      "import re\n\ndef check_literals(text, literals):\n    pattern = '|'.join(map(re.escape, literals))\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not Matched!'"
    ],
    "token_counts": [
      230
    ],
    "generation_times": [
      9.986188266426325
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 187,
    "prompt": "Write a function to find the longest common subsequence for the given two sequences.",
    "generated_codes": [
      "def longest_common_subsequence(X, Y, m, n):\n    # Create a 2D table to store lengths of LCS\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the L table in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of LCS\n    return L[m][n]"
    ],
    "token_counts": [
      383
    ],
    "generation_times": [
      16.643512833863497
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 188,
    "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "generated_codes": [
      "def prod_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        j = int((n / i)**0.5)\n        if i * i + j * j == n:\n            return True\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      4.930716086179018
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 189,
    "prompt": "Write a python function to find the first missing positive number.",
    "generated_codes": [
      "def first_Missing_Positive(nums, n):\n    # Create a set of all positive numbers in the list\n    positive_set = set(x for x in nums if x > 0)\n    \n    # Start checking from 1 upwards\n    for i in range(1, n + 2):  # We go up to n+2 to ensure we find the first missing positive\n        if i not in positive_set:\n            return i\n\n# Test cases"
    ],
    "token_counts": [
      195
    ],
    "generation_times": [
      8.436143320053816
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 190,
    "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "generated_codes": [
      "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the number of integral points along the x-axis\n    x_points = abs(x2 - x1) + 1\n    \n    # Calculate the number of integral points along the y-axis\n    y_points = abs(y2 - y1) + 1\n    \n    # The total number of integral points inside the square is the product of the two\n    return x_points * y_points\n\n# Test cases"
    ],
    "token_counts": [
      184
    ],
    "generation_times": [
      8.035364210605621
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 191,
    "prompt": "Write a function to check whether the given month name contains 30 days or not.",
    "generated_codes": [
      "def check_monthnumber(month_name):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in thirty_day_months\n\n# Test cases"
    ],
    "token_counts": [
      77
    ],
    "generation_times": [
      3.340610232204199
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 192,
    "prompt": "Write a python function to check whether a string has atleast one letter and one number.",
    "generated_codes": [
      "def check_String(s):\n    has_letter = False\n    has_number = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        \n        if has_letter and has_number:\n            return True\n    \n    return False"
    ],
    "token_counts": [
      165
    ],
    "generation_times": [
      7.129304062575102
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 193,
    "prompt": "Write a function to remove the duplicates from the given tuple.",
    "generated_codes": [
      "def remove_tuple(tup):\n    return tuple(dict.fromkeys(tup))"
    ],
    "token_counts": [
      157
    ],
    "generation_times": [
      6.799261651933193
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 194,
    "prompt": "Write a python function to convert octal number to decimal number.",
    "generated_codes": [
      "def octal_To_Decimal(octal_num):\n    decimal_num = 0\n    base = 1\n    while octal_num > 0:\n        last_digit = octal_num % 10\n        decimal_num += last_digit * base\n        octal_num //= 10\n        base *= 8\n    return decimal_num\n\n# Test cases"
    ],
    "token_counts": [
      140
    ],
    "generation_times": [
      6.059256546199322
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 195,
    "prompt": "Write a python function to find the first position of an element in a sorted array.",
    "generated_codes": [
      "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1  # Continue searching towards left\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result\n\n# Test cases"
    ],
    "token_counts": [
      213
    ],
    "generation_times": [
      9.235736016184092
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 196,
    "prompt": "Write a function to remove all the tuples with length k.",
    "generated_codes": [
      "def remove_tuples(tuples_list, k):\n    return [tup for tup in tuples_list if len(tup) != k]\n\n# Test cases"
    ],
    "token_counts": [
      245
    ],
    "generation_times": [
      10.63873539865017
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 197,
    "prompt": "Write a function to perform the exponentiation of the given two tuples.",
    "generated_codes": [
      "def find_exponentio(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      168
    ],
    "generation_times": [
      7.278371311724186
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 198,
    "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "generated_codes": [
      "import math\n\ndef largest_triangle(a, b):\n    # The largest inscribed triangle in an ellipse is a right triangle\n    # with one leg on the major axis (a) and one leg on the minor axis (b).\n    # The area of this triangle is given by the formula:\n    # Area = (1/2) * a * b * sin(θ)\n    # where θ is the angle between the major axis and the hypotenuse.\n    \n    # The angle θ is always 45 degrees in this case.\n    # sin(45°) = cos(45°) = 1/√2\n    \n    # Therefore, the area of the triangle is:\n    area = 0.5 * a * b * math.sqrt(2)\n    \n    return area\n\n# Test cases"
    ],
    "token_counts": [
      273
    ],
    "generation_times": [
      11.838196586817503
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 199,
    "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
    "generated_codes": [
      "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      4.562643971294165
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 200,
    "prompt": "Write a function to find all index positions of the maximum values in a given list.",
    "generated_codes": [
      "def position_max(lst):\n    if not lst:\n        return []\n    \n    max_value = max(lst)\n    return [i for i, value in enumerate(lst) if value == max_value]"
    ],
    "token_counts": [
      51
    ],
    "generation_times": [
      2.215563464909792
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 201,
    "prompt": "Write a python function to check whether the elements in a list are same or not.",
    "generated_codes": [
      "def chkList(lst):\n    if not lst:\n        return True\n    return all(x == lst[0] for x in lst)"
    ],
    "token_counts": [
      225
    ],
    "generation_times": [
      9.749456319957972
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 202,
    "prompt": "Write a function to remove even characters in a string.",
    "generated_codes": [
      "def remove_even(s):\n    return s[::2]"
    ],
    "token_counts": [
      224
    ],
    "generation_times": [
      9.700925823301077
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 203,
    "prompt": "Write a python function to find the hamming distance between given two integers.",
    "generated_codes": [
      "def hamming_Distance(x, y):\n    # XOR the two numbers to find differing bits\n    xor_result = x ^ y\n    \n    # Count the number of 1s in the binary representation of the XOR result\n    distance = 0\n    while xor_result:\n        # Increment distance for each 1 found\n        distance += xor_result & 1\n        # Shift right to check the next bit\n        xor_result >>= 1\n    \n    return distance\n\n# Test cases"
    ],
    "token_counts": [
      161
    ],
    "generation_times": [
      7.036457043141127
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 204,
    "prompt": "Write a python function to count the occurrence of a given character in a string.",
    "generated_codes": [
      "def count(string, char):\n    return string.count(char)\n\n# Test cases"
    ],
    "token_counts": [
      65
    ],
    "generation_times": [
      2.85273864492774
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 205,
    "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "generated_codes": [
      "def inversion_elements(tup):\n    min_val = min(tup)\n    return tuple(-(x - min_val + 1) for x in tup)"
    ],
    "token_counts": [
      329
    ],
    "generation_times": [
      14.212255768477917
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 206,
    "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "generated_codes": [
      "def concatenate_elements(tuples):\n    return tuple(f\"{tuples[i]}{tuples[i+1]}\" for i in range(len(tuples) - 1))"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      6.710031624883413
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 207,
    "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "generated_codes": [
      "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n\n# Test cases"
    ],
    "token_counts": [
      214
    ],
    "generation_times": [
      9.267212972044945
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 208,
    "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "generated_codes": [
      "import re\n\ndef is_decimal(number):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, number))"
    ],
    "token_counts": [
      302
    ],
    "generation_times": [
      13.167623315006495
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 209,
    "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "generated_codes": [
      "import heapq\n\ndef heap_replace(heap, item):\n    # Remove the smallest element\n    smallest = heapq.heappop(heap)\n    \n    # Insert the new item\n    heapq.heappush(heap, item)\n    \n    return heap"
    ],
    "token_counts": [
      443
    ],
    "generation_times": [
      19.177291724830866
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 210,
    "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "generated_codes": [
      "import re\n\ndef is_allowed_specific_char(s):\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern, s))"
    ],
    "token_counts": [
      348
    ],
    "generation_times": [
      15.089588362723589
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 211,
    "prompt": "Write a python function to count numbers whose oth and nth bits are set.",
    "generated_codes": [
      "def count_Num(n):\n    count = 0\n    for i in range(1 << n):\n        if (i & (1 << 0)) and (i & (1 << n)):\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      98
    ],
    "generation_times": [
      4.283725127577782
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 212,
    "prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
    "generated_codes": [
      "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n\n# Test cases"
    ],
    "token_counts": [
      81
    ],
    "generation_times": [
      3.547496922314167
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 213,
    "prompt": "Write a function to perform the concatenation of two string tuples.",
    "generated_codes": [
      "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      7.314930956810713
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 214,
    "prompt": "Write a function to convert radians to degrees.",
    "generated_codes": [
      "import math\n\ndef degree_radian(degrees):\n    return degrees * (180 / math.pi)"
    ],
    "token_counts": [
      30
    ],
    "generation_times": [
      1.316408209502697
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 215,
    "prompt": "Write a function to decode a run-length encoded given list.",
    "generated_codes": [
      "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list) and len(item) == 2 and isinstance(item[0], int):\n            decoded.extend([item[1]] * item[0])\n        else:\n            decoded.append(item)\n    return decoded"
    ],
    "token_counts": [
      244
    ],
    "generation_times": [
      10.652618195861578
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 216,
    "prompt": "Write a function to check if a nested list is a subset of another nested list.",
    "generated_codes": [
      "def check_subset_list(list1, list2):\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    flat_list1 = flatten(list1)\n    flat_list2 = flatten(list2)\n    \n    return all(item in flat_list1 for item in flat_list2)"
    ],
    "token_counts": [
      285
    ],
    "generation_times": [
      12.329431388527155
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 217,
    "prompt": "Write a python function to find the first repeated character in a given string.",
    "generated_codes": [
      "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return '\\0'"
    ],
    "token_counts": [
      51
    ],
    "generation_times": [
      2.2285737097263336
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 218,
    "prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
    "generated_codes": [
      "def min_Operations(a, b):\n    if a == b:\n        return 0\n    \n    operations = 0\n    while a != b:\n        if a < b:\n            if b % 2 == 0:\n                b //= 2\n            else:\n                b += 1\n        else:\n            a -= 1\n        operations += 1\n    \n    return operations\n\n# Test cases"
    ],
    "token_counts": [
      340
    ],
    "generation_times": [
      14.716245017945766
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 219,
    "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "generated_codes": [
      "def extract_min_max(tup, k):\n    # Convert the tuple to a list to sort it\n    sorted_list = sorted(tup)\n    \n    # Extract the first k elements for the minimum values\n    min_elements = sorted_list[:k]\n    \n    # Extract the last k elements for the maximum values\n    max_elements = sorted_list[-k:]\n    \n    # Combine the min and max elements\n    result = tuple(min_elements + max_elements)\n    \n    return result\n\n# Test cases"
    ],
    "token_counts": [
      247
    ],
    "generation_times": [
      10.736414175480604
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 220,
    "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "generated_codes": [
      "def replace_max_specialchar(s, n):\n    special_chars = set([' ', ',', '.'])\n    count = 0\n    result = []\n    \n    for char in s:\n        if char in special_chars and count < n:\n            result.append(':')\n            count += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result)"
    ],
    "token_counts": [
      351
    ],
    "generation_times": [
      15.219608008861542
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 221,
    "prompt": "Write a python function to find the first even number in a given list of numbers.",
    "generated_codes": [
      "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None  # Return None if no even number is found"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      12.485595669597387
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 222,
    "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
    "generated_codes": [
      "def check_type(tup):\n    if not tup:  # Handle empty tuple\n        return True\n    first_type = type(tup[0])\n    return all(isinstance(item, first_type) for item in tup)"
    ],
    "token_counts": [
      323
    ],
    "generation_times": [
      13.944909498095512
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 223,
    "prompt": "Write a function to check for majority element in the given sorted array.",
    "generated_codes": [
      "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first = binary_search(arr, 0, n-1, x)\n    \n    # If x is not present in the array\n    if first == -1:\n        return False\n    \n    # Find the last occurrence of x\n    last = binary_search_last(arr, first, n-1, x)\n    \n    # Check if the count of x is more than n/2\n    return (last - first + 1) > n // 2\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid-1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, mid + 1, high, x)\n        else:\n            return binary_search(arr, low, mid - 1, x)\n    return -1\n\ndef binary_search_last(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == len(arr)-1 or x < arr[mid+1]) and arr[mid] == x:\n            return mid\n        elif x < arr[mid]:\n            return binary_search_last(arr, low, mid - 1, x)\n        else:\n            return binary_search_last(arr, mid + 1, high, x)\n    return -1"
    ],
    "token_counts": [
      521
    ],
    "generation_times": [
      22.60844101384282
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 224,
    "prompt": "Write a python function to count set bits of a given number.",
    "generated_codes": [
      "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      3.5510972291231155
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 225,
    "prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
    "generated_codes": [
      "def find_Min(arr, low, high):\n    # If the array is not rotated at all\n    if arr[low] <= arr[high]:\n        return arr[low]\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        # Check if mid+1 is the minimum element\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid + 1]\n        \n        # Check if mid is the minimum element\n        if arr[mid] < arr[mid - 1]:\n            return arr[mid]\n        \n        # Decide whether we need to go to the left half or the right half\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n# Test cases"
    ],
    "token_counts": [
      269
    ],
    "generation_times": [
      11.608020354062319
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 226,
    "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
    "generated_codes": [
      "def odd_values_string(s):\n    return s[::2]"
    ],
    "token_counts": [
      127
    ],
    "generation_times": [
      5.53995156288147
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 227,
    "prompt": "Write a function to find minimum of three numbers.",
    "generated_codes": [
      "def min_of_three(a, b, c):\n    return min(a, b, c)"
    ],
    "token_counts": [
      27
    ],
    "generation_times": [
      1.1876318976283073
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 228,
    "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
    "generated_codes": [
      "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with 1's in the range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if all bits in the range are set\n    return (n & mask) == mask"
    ],
    "token_counts": [
      402
    ],
    "generation_times": [
      17.534847747534513
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 229,
    "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "generated_codes": [
      "def re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        # Move left pointer until we find a positive number\n        while left < n and arr[left] < 0:\n            left += 1\n        \n        # Move right pointer until we find a negative number\n        while right >= 0 and arr[right] >= 0:\n            right -= 1\n        \n        # If left is less than right, swap the elements\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n    \n    return arr"
    ],
    "token_counts": [
      331
    ],
    "generation_times": [
      14.233345668762922
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 230,
    "prompt": "Write a function to replace blank spaces with any character in a string.",
    "generated_codes": [
      "def replace_blank(s, char):\n    return s.replace(' ', char)"
    ],
    "token_counts": [
      23
    ],
    "generation_times": [
      1.0086313672363758
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 231,
    "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "generated_codes": [
      "def max_sum(triangle, n):\n    # Start from the second last row and move upwards\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # Update the current element to be the sum of itself and the maximum of the two elements below it\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    \n    # The top element now contains the maximum sum\n    return triangle[0][0]\n\n# Test cases"
    ],
    "token_counts": [
      213
    ],
    "generation_times": [
      9.214283470064402
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 232,
    "prompt": "Write a function to get the n largest items from a dataset.",
    "generated_codes": [
      "def larg_nnum(dataset, n):\n    # Sort the dataset in descending order\n    sorted_dataset = sorted(dataset, reverse=True)\n    # Return the first n elements from the sorted dataset\n    return sorted_dataset[:n]\n\n# Test cases"
    ],
    "token_counts": [
      265
    ],
    "generation_times": [
      10.534249659627676
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 233,
    "prompt": "Write a function to find the lateral surface area of a cylinder.",
    "generated_codes": [
      "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      1.3128482066094875
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 234,
    "prompt": "Write a function to find the volume of a cube.",
    "generated_codes": [
      "def volume_cube(side_length):\n    return side_length ** 3\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      2.3588443733751774
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 235,
    "prompt": "Write a python function to set all even bits of a given number.",
    "generated_codes": [
      "def even_bit_set_number(n):\n    # Create a mask with all even bits set\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    \n    # Use bitwise OR to set all even bits of n\n    return n | mask\n\n# Test cases"
    ],
    "token_counts": [
      370
    ],
    "generation_times": [
      13.999138414859772
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 236,
    "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "generated_codes": [
      "def No_of_Triangle(n, k):\n    if k > n:\n        return -1\n    \n    total_triangles = 0\n    for i in range(1, k + 1):\n        triangles_at_level = (n - i + 1) * (n - i + 2) // 2\n        total_triangles += triangles_at_level\n    \n    return total_triangles\n\n# Test cases"
    ],
    "token_counts": [
      143
    ],
    "generation_times": [
      5.282125446945429
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 237,
    "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "generated_codes": [
      "def check_occurences(tuples):\n    # Create a dictionary to store the occurrences\n    occurrences = {}\n    \n    # Iterate through the tuples\n    for t in tuples:\n        # Sort the tuple to ensure consistent ordering\n        sorted_t = tuple(sorted(t))\n        \n        # Update the occurrence count\n        if sorted_t in occurrences:\n            occurrences[sorted_t] += 1\n        else:\n            occurrences[sorted_t] = 1\n    \n    return occurrences"
    ],
    "token_counts": [
      306
    ],
    "generation_times": [
      11.507196843624115
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 238,
    "prompt": "Write a python function to count number of non-empty substrings of a given string.",
    "generated_codes": [
      "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"
    ],
    "token_counts": [
      349
    ],
    "generation_times": [
      13.221588265150785
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 239,
    "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "generated_codes": [
      "def get_total_number_of_sequences(n, m):\n    # Initialize a list to store the number of sequences ending with each number\n    dp = [0] * (m + 1)\n    \n    # Base case: there's one way to have a sequence of length 1 for each number\n    for i in range(1, m + 1):\n        dp[i] = 1\n    \n    # Fill the dp table\n    for length in range(2, n + 1):\n        new_dp = [0] * (m + 1)\n        for i in range(1, m + 1):\n            for j in range(i, m + 1):\n                if j >= 2 * i:\n                    new_dp[j] += dp[i]\n        dp = new_dp\n    \n    # Sum up all possible sequences of length n\n    return sum(dp)\n\n# Test cases"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      9.917279314249754
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 240,
    "prompt": "Write a function to replace the last element of the list with another list.",
    "generated_codes": [
      "def replace_list(original_list, replacement_list):\n    return original_list[:-1] + replacement_list"
    ],
    "token_counts": [
      331
    ],
    "generation_times": [
      12.576522342860699
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 241,
    "prompt": "Write a function to generate a 3d array having each element as '*'.",
    "generated_codes": [
      "def array_3d(x, y, z):\n    return [[['*' for _ in range(z)] for _ in range(y)] for _ in range(x)]"
    ],
    "token_counts": [
      160
    ],
    "generation_times": [
      6.045537319034338
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 242,
    "prompt": "Write a function to count total characters in a string.",
    "generated_codes": [
      "def count_charac(s):\n    return len(s)"
    ],
    "token_counts": [
      18
    ],
    "generation_times": [
      0.709809634834528
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 243,
    "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "generated_codes": [
      "def sort_on_occurence(lst):\n    from collections import defaultdict\n    \n    # Dictionary to store the first element of each tuple as key and list of second elements as value\n    occurrence_dict = defaultdict(list)\n    \n    # Populate the dictionary\n    for item in lst:\n        occurrence_dict[item[0]].append(item[1])\n    \n    # Create the result list\n    result = []\n    for key in sorted(occurrence_dict.keys()):\n        values = occurrence_dict[key]\n        # Append the tuple with the first element, all second elements, and the count of occurrences\n        result.append((key, *values, len(values)))\n    \n    return result\n\n# Test cases"
    ],
    "token_counts": [
      323
    ],
    "generation_times": [
      12.608610183000565
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 244,
    "prompt": "Write a python function to find the next perfect square greater than a given number.",
    "generated_codes": [
      "import math\n\ndef next_Perfect_Square(n):\n    # Find the square root of the given number\n    root = math.isqrt(n)\n    \n    # If n is already a perfect square, return the next one\n    if root * root == n:\n        return (root + 1) * (root + 1)\n    \n    # Otherwise, return the next perfect square\n    return (root + 1) * (root + 1)"
    ],
    "token_counts": [
      350
    ],
    "generation_times": [
      14.93518628180027
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 245,
    "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "generated_codes": [
      "def max_sum(arr, n):\n    # Initialize two arrays to store increasing and decreasing sums\n    inc = [0] * n\n    dec = [0] * n\n\n    # Calculate increasing sums\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Calculate decreasing sums\n    dec[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Find the maximum sum of bi-tonic sub-sequence\n    max_sum = 0\n    for i in range(n):\n        if inc[i] + dec[i] - arr[i] > max_sum:\n            max_sum = inc[i] + dec[i] - arr[i]\n\n    return max_sum"
    ],
    "token_counts": [
      519
    ],
    "generation_times": [
      22.486273508518934
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 246,
    "prompt": "Write a function for computing square roots using the babylonian method.",
    "generated_codes": [
      "def babylonian_squareroot(n, epsilon=1e-10):\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    if n == 0:\n        return 0\n    \n    x = n\n    while True:\n        root = 0.5 * (x + n / x)\n        if abs(root - x) < epsilon:\n            return root\n        x = root"
    ],
    "token_counts": [
      484
    ],
    "generation_times": [
      20.840060956776142
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 247,
    "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
    "generated_codes": [
      "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check substrings of length 2 to n\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n\n# Test cases"
    ],
    "token_counts": [
      260
    ],
    "generation_times": [
      11.266711495816708
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 248,
    "prompt": "Write a function to calculate the harmonic sum of n-1.",
    "generated_codes": [
      "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    return sum(1/i for i in range(1, n))\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      5.3061846271157265
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 249,
    "prompt": "Write a function to find the intersection of two arrays using lambda function.",
    "generated_codes": [
      "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))"
    ],
    "token_counts": [
      386
    ],
    "generation_times": [
      16.507807280868292
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 250,
    "prompt": "Write a python function to count the occcurences of an element in a tuple.",
    "generated_codes": [
      "def count_X(tup, x):\n    return tup.count(x)"
    ],
    "token_counts": [
      22
    ],
    "generation_times": [
      0.9726973511278629
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 251,
    "prompt": "Write a function to insert an element before each element of a list.",
    "generated_codes": [
      "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    ],
    "token_counts": [
      184
    ],
    "generation_times": [
      8.041664727032185
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 252,
    "prompt": "Write a python function to convert complex numbers to polar coordinates.",
    "generated_codes": [
      "import cmath\n\ndef convert(z):\n    r, theta = cmath.polar(z)\n    return (r, theta)"
    ],
    "token_counts": [
      236
    ],
    "generation_times": [
      10.209456358104944
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 253,
    "prompt": "Write a python function to count integers from a given list.",
    "generated_codes": [
      "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))"
    ],
    "token_counts": [
      230
    ],
    "generation_times": [
      10.000122908502817
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 254,
    "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "generated_codes": [
      "def words_ae(s):\n    words = s.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result"
    ],
    "token_counts": [
      58
    ],
    "generation_times": [
      2.5076209753751755
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 255,
    "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "generated_codes": [
      "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))"
    ],
    "token_counts": [
      272
    ],
    "generation_times": [
      11.780860297381878
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 256,
    "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "generated_codes": [
      "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Use the Sieve of Eratosthenes to find all primes less than n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of primes\n    return sum(is_prime)\n\n# Test cases"
    ],
    "token_counts": [
      215
    ],
    "generation_times": [
      9.251883506774902
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 257,
    "prompt": "Write a function to swap two numbers.",
    "generated_codes": [
      "def swap_numbers(a, b):\n    return b, a"
    ],
    "token_counts": [
      165
    ],
    "generation_times": [
      7.114123892039061
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 258,
    "prompt": "Write a function to find number of odd elements in the given list using lambda function.",
    "generated_codes": [
      "def count_odd(numbers):\n    return len(list(filter(lambda x: x % 2 != 0, numbers)))"
    ],
    "token_counts": [
      32
    ],
    "generation_times": [
      1.4044230245053768
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 259,
    "prompt": "Write a function to maximize the given two tuples.",
    "generated_codes": [
      "def maximize_elements(tuple1, tuple2):\n    result = []\n    for t1, t2 in zip(tuple1, tuple2):\n        max_tuple = tuple(max(a, b) for a, b in zip(t1, t2))\n        result.append(max_tuple)\n    return tuple(result)"
    ],
    "token_counts": [
      270
    ],
    "generation_times": [
      11.579481694847345
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 260,
    "prompt": "Write a function to find the nth newman–shanks–williams prime number.",
    "generated_codes": [
      "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num) and (num - 1) % 4 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Test cases"
    ],
    "token_counts": [
      175
    ],
    "generation_times": [
      7.590211216360331
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 261,
    "prompt": "Write a function to perform mathematical division operation across the given tuples.",
    "generated_codes": [
      "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      314
    ],
    "generation_times": [
      13.685654196888208
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 262,
    "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "generated_codes": [
      "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]"
    ],
    "token_counts": [
      188
    ],
    "generation_times": [
      8.191115159541368
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 263,
    "prompt": "Write a function to merge two dictionaries.",
    "generated_codes": [
      "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      5.408922236412764
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 264,
    "prompt": "Write a function to calculate a dog's age in dog's years.",
    "generated_codes": [
      "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Test cases"
    ],
    "token_counts": [
      103
    ],
    "generation_times": [
      4.476173430681229
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 265,
    "prompt": "Write a function to split a list for every nth element.",
    "generated_codes": [
      "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"
    ],
    "token_counts": [
      149
    ],
    "generation_times": [
      6.480785146355629
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 266,
    "prompt": "Write a function to find the lateral surface area of a cube.",
    "generated_codes": [
      "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n\n# Test cases"
    ],
    "token_counts": [
      77
    ],
    "generation_times": [
      3.3416749574244022
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 267,
    "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "generated_codes": [
      "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_squares += i**2\n    return sum_squares\n\n# Test cases"
    ],
    "token_counts": [
      92
    ],
    "generation_times": [
      4.005153879523277
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 268,
    "prompt": "Write a function to find the n'th star number.",
    "generated_codes": [
      "def find_star_num(n):\n    return 2 * n * n - 2 * n + 1"
    ],
    "token_counts": [
      186
    ],
    "generation_times": [
      8.00817758962512
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 269,
    "prompt": "Write a function to find the ascii value of a character.",
    "generated_codes": [
      "def ascii_value(char):\n    return ord(char)"
    ],
    "token_counts": [
      18
    ],
    "generation_times": [
      0.7952526025474072
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 270,
    "prompt": "Write a python function to find the sum of even numbers at even positions.",
    "generated_codes": [
      "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(0, n, 2):  # Iterate over even indices\n        if arr[i] % 2 == 0:  # Check if the number at the even index is even\n            total += arr[i]\n    return total\n\n# Test cases"
    ],
    "token_counts": [
      203
    ],
    "generation_times": [
      8.841876782476902
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 271,
    "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "generated_codes": [
      "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum += even_number ** 5\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      106
    ],
    "generation_times": [
      4.53420402854681
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 272,
    "prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
    "generated_codes": [
      "def rear_extract(records):\n    return [record[-1] for record in records]"
    ],
    "token_counts": [
      284
    ],
    "generation_times": [
      12.237688895314932
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 273,
    "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "generated_codes": [
      "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      164
    ],
    "generation_times": [
      7.137941922992468
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 274,
    "prompt": "Write a python function to find sum of even index binomial coefficients.",
    "generated_codes": [
      "def even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for k in range(0, n + 1, 2):\n        sum_even += binomial_coefficient(n, k)\n    return sum_even\n\ndef binomial_coefficient(n, k):\n    if k > n - k:\n        k = n - k\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Test cases"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      7.659099709242582
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 275,
    "prompt": "Write a python function to find the position of the last removed element from the given array.",
    "generated_codes": [
      "def get_Position(arr, n, k):\n    # Create a list of tuples (value, original_index)\n    indexed_arr = list(enumerate(arr))\n    \n    # Sort the list based on values\n    indexed_arr.sort(key=lambda x: x[1])\n    \n    # Find the k-th smallest element\n    kth_smallest = indexed_arr[k-1][1]\n    \n    # Find the original index of the k-th smallest element\n    for i, (original_index, value) in enumerate(indexed_arr):\n        if value == kth_smallest:\n            return original_index + 1  # Adding 1 to convert to 1-based indexing\n    \n    # If k-th smallest element is not found (should not happen with given constraints)\n    return -1"
    ],
    "token_counts": [
      439
    ],
    "generation_times": [
      19.085892409086227
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 276,
    "prompt": "Write a function to find the volume of a cylinder.",
    "generated_codes": [
      "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height"
    ],
    "token_counts": [
      29
    ],
    "generation_times": [
      1.2767815180122852
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 277,
    "prompt": "Write a function to filter a dictionary based on values.",
    "generated_codes": [
      "def dict_filter(d, min_value):\n    return {k: v for k, v in d.items() if v >= min_value}"
    ],
    "token_counts": [
      178
    ],
    "generation_times": [
      7.79384072124958
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 278,
    "prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
    "generated_codes": [
      "def count_first_elements(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      5.817632436752319
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 279,
    "prompt": "Write a function to find the nth decagonal number.",
    "generated_codes": [
      "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n\n\n# Test cases"
    ],
    "token_counts": [
      73
    ],
    "generation_times": [
      3.167072545737028
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 280,
    "prompt": "Write a function to search an element in the given array by using sequential search.",
    "generated_codes": [
      "def sequential_search(arr, target):\n    for index, element in enumerate(arr):\n        if element == target:\n            return (True, index)\n    return (False, -1)\n\n# Test cases"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      8.664439130574465
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 281,
    "prompt": "Write a python function to check if the elements of a given list are unique or not.",
    "generated_codes": [
      "def all_unique(lst):\n    return len(lst) == len(set(lst))"
    ],
    "token_counts": [
      217
    ],
    "generation_times": [
      9.382384318858385
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 282,
    "prompt": "Write a function to substaract two lists using map and lambda function.",
    "generated_codes": [
      "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))"
    ],
    "token_counts": [
      35
    ],
    "generation_times": [
      1.5200775377452374
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 283,
    "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "generated_codes": [
      "def validate(number):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(number)\n    \n    # Create a dictionary to count the frequency of each digit\n    digit_count = {}\n    \n    # Count the frequency of each digit\n    for digit in num_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True\n\n# Test cases"
    ],
    "token_counts": [
      184
    ],
    "generation_times": [
      7.94416344538331
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 284,
    "prompt": "Write a function to check whether all items of a list are equal to a given string.",
    "generated_codes": [
      "def check_element(lst, string):\n    return all(item == string for item in lst)"
    ],
    "token_counts": [
      26
    ],
    "generation_times": [
      1.1439847350120544
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 285,
    "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "generated_codes": [
      "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      9.171948850154877
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 286,
    "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "generated_codes": [
      "def max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the sum of the entire array\n    total_sum = sum(arr)\n    \n    # If k is 1, we can use Kadane's algorithm directly\n    if k == 1:\n        return kadane(arr)\n    \n    # Calculate the maximum sum for two consecutive arrays\n    max_sum = kadane(arr + arr)\n    \n    # If the total sum is positive, we can add (k-2) * total_sum\n    if total_sum > 0:\n        return max_sum + (k - 2) * total_sum\n    else:\n        # If total sum is non-positive, we only need the maximum sum of two consecutive arrays\n        return max_sum\n\ndef kadane(arr):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    ],
    "token_counts": [
      454
    ],
    "generation_times": [
      18.905170436948538
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 287,
    "prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
    "generated_codes": [
      "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_squares += even_number ** 2\n    return sum_squares\n\n# Test cases"
    ],
    "token_counts": [
      101
    ],
    "generation_times": [
      4.204894106835127
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 288,
    "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "generated_codes": [
      "def modular_inverse(arr, start, p):\n    count = 0\n    for i in range(start, len(arr)):\n        if arr[i] % p == arr[i]:\n            count += 1\n    return count"
    ],
    "token_counts": [
      385
    ],
    "generation_times": [
      16.620746191591024
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 289,
    "prompt": "Write a python function to calculate the number of odd days in a given year.",
    "generated_codes": [
      "def odd_Days(year):\n    # Check if the year is a leap year\n    is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    \n    # Days in each month for a non-leap year and a leap year\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if is_leap_year:\n        days_in_month[1] = 29\n    \n    # Calculate the total number of days in the year\n    total_days = sum(days_in_month)\n    \n    # Calculate the number of odd days\n    odd_days = (total_days + 1) // 2  # Adding 1 to handle the case when total_days is even\n    \n    return odd_days\n\n# Test cases"
    ],
    "token_counts": [
      264
    ],
    "generation_times": [
      11.414553862065077
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 290,
    "prompt": "Write a function to find the list of lists with maximum length.",
    "generated_codes": [
      "def max_length(lists):\n    if not lists:\n        return (0, [])\n    \n    max_len = 0\n    max_list = []\n    \n    for sublist in lists:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return (max_len, max_list)"
    ],
    "token_counts": [
      257
    ],
    "generation_times": [
      11.110063590109348
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 291,
    "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "generated_codes": [
      "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Initialize the number of ways for the first two posts\n    same = k  # Ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # Ways to paint the first two posts with different colors\n    \n    # Calculate the number of ways for the remaining posts\n    for i in range(3, n + 1):\n        new_same = diff  # If the current post has the same color as the previous one\n        new_diff = (same + diff) * (k - 1)  # If the current post has a different color\n        \n        same = new_same\n        diff = new_diff\n    \n    # Total number of ways is the sum of ways where the last two posts are the same or different\n    return same + diff\n\n# Test cases"
    ],
    "token_counts": [
      266
    ],
    "generation_times": [
      11.557203285396099
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 292,
    "prompt": "Write a python function to find quotient of two numbers.",
    "generated_codes": [
      "def find(a, b):\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a // b"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      8.574609749019146
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 293,
    "prompt": "Write a function to find the third side of a right angled triangle.",
    "generated_codes": [
      "import math\n\ndef otherside_rightangle(a, b):\n    # Calculate the hypotenuse using the Pythagorean theorem\n    hypotenuse = math.sqrt(a**2 + b**2)\n    # Round the result to 10 decimal places as per the test cases\n    return round(hypotenuse, 10)"
    ],
    "token_counts": [
      79
    ],
    "generation_times": [
      3.4345693923532963
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 294,
    "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
    "generated_codes": [
      "def max_val(lst):\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return max_value"
    ],
    "token_counts": [
      56
    ],
    "generation_times": [
      2.4380024075508118
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 295,
    "prompt": "Write a function to return the sum of all divisors of a number.",
    "generated_codes": [
      "def sum_div(n):\n    if n < 1:\n        return 0\n    divisors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      4.577554170042276
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 296,
    "prompt": "Write a python function to count inversions in an array.",
    "generated_codes": [
      "def get_Inv_Count(arr, n):\n    def merge_and_count(left, right):\n        i, j = 0, 0\n        inv_count = 0\n        merged = []\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    def merge_sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        merged, merge_inv = merge_and_count(left, right)\n        \n        return merged, left_inv + right_inv + merge_inv\n\n    _, inversions = merge_sort_and_count(arr)\n    return inversions"
    ],
    "token_counts": [
      491
    ],
    "generation_times": [
      13.864784900099039
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 297,
    "prompt": "Write a function to flatten a given nested list structure.",
    "generated_codes": [
      "def flatten_list(nested_list):\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      5.342183459550142
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 298,
    "prompt": "Write a function to find the nested list elements which are present in another list.",
    "generated_codes": [
      "def intersection_nested_lists(main_list, nested_lists):\n    result = []\n    for sublist in nested_lists:\n        intersection = [item for item in sublist if item in main_list]\n        result.append(intersection)\n    return result"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      5.970002304762602
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 299,
    "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "generated_codes": [
      "def max_aggregate(tuples_list):\n    aggregate_dict = {}\n    \n    # Calculate the aggregate for each name\n    for name, value in tuples_list:\n        if name in aggregate_dict:\n            aggregate_dict[name] += value\n        else:\n            aggregate_dict[name] = value\n    \n    # Find the name with the maximum aggregate\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    max_value = aggregate_dict[max_name]\n    \n    return (max_name, max_value)\n\n# Test cases"
    ],
    "token_counts": [
      304
    ],
    "generation_times": [
      7.03892570361495
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 300,
    "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "generated_codes": [
      "def count_binary_seq(n):\n    # The number of ways to choose n positions out of 2n positions such that the sum of the first n bits is equal to the sum of the last n bits is given by the binomial coefficient C(2n, n).\n    # This is because we need to choose n positions to be 1s and the remaining n positions to be 0s.\n    from math import comb\n    return comb(2 * n, n)\n\n# Test cases"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      3.497236341238022
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 301,
    "prompt": "Write a function to find the depth of a dictionary.",
    "generated_codes": [
      "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\n# Test cases"
    ],
    "token_counts": [
      122
    ],
    "generation_times": [
      2.8221284672617912
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 302,
    "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
    "generated_codes": [
      "def set_Bit_Number(n):\n    # Start with the most significant bit position\n    position = 1 << (n.bit_length() - 1)\n    \n    # Iterate downwards to find the most significant set bit\n    while position > 0:\n        if n & position:\n            return position\n        position >>= 1\n\n# Test cases"
    ],
    "token_counts": [
      126
    ],
    "generation_times": [
      2.9213086180388927
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 303,
    "prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
    "generated_codes": [
      "def solve(arr, n):\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    \n    return inversions % 2 == 0"
    ],
    "token_counts": [
      383
    ],
    "generation_times": [
      8.836414325982332
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 304,
    "prompt": "Write a python function to find element at a given index after number of rotations.",
    "generated_codes": [
      "def find_Element(arr, rotations, start_index, k):\n    # Apply each rotation\n    for rotation in rotations:\n        direction, steps = rotation\n        if direction == 0:  # Left rotation\n            steps = steps % len(arr)\n            arr = arr[steps:] + arr[:steps]\n        elif direction == 1:  # Right rotation\n            steps = steps % len(arr)\n            arr = arr[-steps:] + arr[:-steps]\n    \n    # Find the element at the given index after rotations\n    return arr[(start_index + k) % len(arr)]\n\n# Test cases"
    ],
    "token_counts": [
      261
    ],
    "generation_times": [
      6.034177042543888
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 305,
    "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
    "generated_codes": [
      "def start_withp(words):\n    p_words = [word for word in words if word.startswith('p', 0) or word.startswith('P', 0)]\n    if len(p_words) >= 2:\n        return tuple(p_words[:2])\n    return None\n\n# Test cases"
    ],
    "token_counts": [
      145
    ],
    "generation_times": [
      3.357040099799633
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 306,
    "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "generated_codes": [
      "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array where dp[j] will store the maximum sum of increasing subsequence ending at index j\n    dp = [0] * n\n    \n    # Initialize dp[i] with arr[i] since the subsequence can start with arr[i]\n    dp[i] = arr[i]\n    \n    # Fill dp array for all indices before k\n    for j in range(i):\n        if arr[j] < arr[i]:\n            dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    # The result is the maximum sum of increasing subsequence ending at i plus arr[k]\n    return dp[i] + arr[k]\n\n# Test cases"
    ],
    "token_counts": [
      304
    ],
    "generation_times": [
      7.037848688662052
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 307,
    "prompt": "Write a function to get a colon of a tuple.",
    "generated_codes": [
      "def colon_tuplex(tuplex, start, end):\n    return tuplex[:start] + (list(range(start, end + 1)),) + tuplex[start + 1:]"
    ],
    "token_counts": [
      349
    ],
    "generation_times": [
      8.069834154099226
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 308,
    "prompt": "Write a function to find the specified number of largest products from two given lists.",
    "generated_codes": [
      "def large_product(list1, list2, n):\n    # Generate all possible products of elements from list1 and list2\n    products = [x * y for x in list1 for y in list2]\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the top n products\n    return products[:n]\n\n# Test cases"
    ],
    "token_counts": [
      270
    ],
    "generation_times": [
      6.257619474083185
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 309,
    "prompt": "Write a python function to find the maximum of two numbers.",
    "generated_codes": [
      "def maximum(a, b):\n    return a if a > b else b"
    ],
    "token_counts": [
      22
    ],
    "generation_times": [
      0.5190258584916592
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 310,
    "prompt": "Write a function to convert a given string to a tuple.",
    "generated_codes": [
      "def string_to_tuple(s):\n    return tuple(s)"
    ],
    "token_counts": [
      202
    ],
    "generation_times": [
      4.679907761514187
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 311,
    "prompt": "Write a python function to set the left most unset bit.",
    "generated_codes": [
      "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number itself\n    if n == (1 << n.bit_length()) - 1:\n        return n\n    \n    # Find the position of the leftmost unset bit\n    position = 0\n    while n & (1 << position):\n        position += 1\n    \n    # Set the leftmost unset bit\n    return n | (1 << position)"
    ],
    "token_counts": [
      357
    ],
    "generation_times": [
      8.275608751922846
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 312,
    "prompt": "Write a function to find the volume of a cone.",
    "generated_codes": [
      "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.614790163934231
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 313,
    "prompt": "Write a python function to print positive numbers in a list.",
    "generated_codes": [
      "def pos_nos(lst):\n    positive_numbers = [str(num) for num in lst if num > 0]\n    return ','.join(positive_numbers)\n\n# Test cases"
    ],
    "token_counts": [
      111
    ],
    "generation_times": [
      2.5733483098447323
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 314,
    "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "generated_codes": [
      "def max_sum_rectangular_grid(grid, n):\n    if not grid or n <= 0:\n        return 0\n\n    # Initialize two variables to store the maximum sum including and excluding the previous element\n    include = 0\n    exclude = 0\n\n    for i in range(n):\n        # Current max excluding i\n        new_exclude = max(include, exclude)\n\n        # Current max including i\n        include = exclude + max(grid[0][i], grid[1][i])\n        exclude = new_exclude\n\n    # Return max of including and excluding the last element\n    return max(include, exclude)\n\n# Test cases"
    ],
    "token_counts": [
      277
    ],
    "generation_times": [
      6.431418713182211
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 315,
    "prompt": "Write a python function to find the first maximum length of even word.",
    "generated_codes": [
      "def find_Max_Len_Even(sentence):\n    words = sentence.split()\n    max_length = 0\n    max_even_word = \"-1\"\n    \n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n            max_even_word = word\n    \n    return max_even_word\n\n# Test cases"
    ],
    "token_counts": [
      147
    ],
    "generation_times": [
      3.4109665602445602
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 316,
    "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "generated_codes": [
      "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    ],
    "token_counts": [
      433
    ],
    "generation_times": [
      9.997687373310328
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 317,
    "prompt": "Write a function to reflect the modified run-length encoding from a list.",
    "generated_codes": [
      "def modified_encode(sequence):\n    if not sequence:\n        return []\n\n    result = []\n    current_char = sequence[0]\n    count = 1\n\n    for char in sequence[1:]:\n        if char == current_char:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current_char])\n            else:\n                result.append(current_char)\n            current_char = char\n            count = 1\n\n    # Handle the last group\n    if count > 1:\n        result.append([count, current_char])\n    else:\n        result.append(current_char)\n\n    return result"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      3.4854474626481533
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 318,
    "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "generated_codes": [
      "def max_volume(sum_of_sides):\n    if sum_of_sides < 6:\n        return 0\n    \n    # The optimal configuration for maximum volume is when the cuboid is as close to a cube as possible\n    # The sides should be as equal as possible\n    side_length = sum_of_sides // 6\n    \n    # If there's a remainder, we need to adjust one side\n    remainder = sum_of_sides % 6\n    \n    if remainder == 0:\n        # Perfect cube\n        return side_length ** 3\n    elif remainder == 1:\n        # Adjust one side down by 1\n        return (side_length - 1) ** 3\n    elif remainder == 2:\n        # Adjust one side down by 1\n        return (side_length - 1) ** 3\n    elif remainder == 3:\n        # Adjust two sides down by 1\n        return (side_length - 1) ** 3\n    elif remainder == 4:\n        # Adjust two sides down by 1\n        return (side_length - 1) ** 3\n    else:  # remainder == 5\n        # Adjust two sides down by 1\n        return (side_length - 1) ** 3\n\n# Test cases"
    ],
    "token_counts": [
      314
    ],
    "generation_times": [
      7.246118199080229
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 319,
    "prompt": "Write a function to find all five characters long word in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)"
    ],
    "token_counts": [
      222
    ],
    "generation_times": [
      5.121573779731989
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 320,
    "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "generated_codes": [
      "def sum_difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_n = n * (n + 1) // 2\n    \n    # Calculate the square of the sum\n    square_of_sum = sum_of_n ** 2\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the difference\n    difference = square_of_sum - sum_of_squares\n    \n    return difference\n\n# Test cases"
    ],
    "token_counts": [
      179
    ],
    "generation_times": [
      4.135837826877832
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 321,
    "prompt": "Write a function to find the demlo number for the given number.",
    "generated_codes": [
      "def find_demlo(number):\n    n = len(number)\n    result = []\n    \n    # Generate the first half of the demlo number\n    for i in range(1, n + 1):\n        result.append(str(i))\n    \n    # Add the middle number(s)\n    if n % 2 == 0:\n        result.append(str(n // 2 + 1))\n    else:\n        result.append(str((n + 1) // 2))\n        result.append(str(n // 2 + 1))\n    \n    # Generate the second half of the demlo number (reverse of the first half)\n    result.extend(result[-2::-1])\n    \n    return ''.join(result)"
    ],
    "token_counts": [
      425
    ],
    "generation_times": [
      9.78634351119399
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 322,
    "prompt": "Write a function to find all index positions of the minimum values in a given list.",
    "generated_codes": [
      "def position_min(lst):\n    if not lst:\n        return []\n    \n    min_value = min(lst)\n    return [i for i, value in enumerate(lst) if value == min_value]"
    ],
    "token_counts": [
      51
    ],
    "generation_times": [
      1.1859930641949177
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 323,
    "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "generated_codes": [
      "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n    \n    # Initialize result array\n    result = [0] * n\n    \n    # Fill result array with alternating positive and negative numbers\n    i, j, k = 0, 0, 0\n    while i < len(neg) and j < len(pos):\n        result[k] = neg[i]\n        k += 1\n        i += 1\n        result[k] = pos[j]\n        k += 1\n        j += 1\n    \n    # If there are remaining positive numbers\n    while j < len(pos):\n        result[k] = pos[j]\n        k += 1\n        j += 1\n    \n    # If there are remaining negative numbers\n    while i < len(neg):\n        result[k] = neg[i]\n        k += 1\n        i += 1\n    \n    return result"
    ],
    "token_counts": [
      351
    ],
    "generation_times": [
      8.396624818444252
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 324,
    "prompt": "Write a function to extract the sum of alternate chains of tuples.",
    "generated_codes": [
      "def sum_of_alternates(tup):\n    if len(tup) < 2:\n        return (sum(tup), 0)\n    \n    even_sum = sum(tup[::2])\n    odd_sum = sum(tup[1::2])\n    \n    return (even_sum, odd_sum)"
    ],
    "token_counts": [
      441
    ],
    "generation_times": [
      10.448152471333742
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 325,
    "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "generated_codes": [
      "def get_Min_Squares(n):\n    # Create a list to store the minimum number of squares for each number up to n\n    dp = [float('inf')] * (n + 1)\n    \n    # Base case: 0 can be represented by 0 squares\n    dp[0] = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Check all square numbers less than or equal to i\n        j = 1\n        while j * j <= i:\n            # Update dp[i] if we find a smaller sum\n            dp[i] = min(dp[i], dp[i - j*j] + 1)\n            j += 1\n    \n    # Return the minimum number of squares for n\n    return dp[n]"
    ],
    "token_counts": [
      490
    ],
    "generation_times": [
      11.485183116048574
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 326,
    "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
    "generated_codes": [
      "def most_occurrences(strings_list):\n    from collections import Counter\n    \n    # Initialize a Counter to keep track of word occurrences\n    word_count = Counter()\n    \n    # Iterate over each string in the list\n    for string in strings_list:\n        # Split the string into words and update the counter\n        words = string.split()\n        word_count.update(words)\n    \n    # Find the word with the maximum occurrences\n    most_common_word, _ = word_count.most_common(1)[0]\n    \n    return most_common_word\n\n# Test cases"
    ],
    "token_counts": [
      219
    ],
    "generation_times": [
      5.147909473627806
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 327,
    "prompt": "Write a function to print check if the triangle is isosceles or not.",
    "generated_codes": [
      "def check_isosceles(a, b, c):\n    # Check if any two sides are equal\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      117
    ],
    "generation_times": [
      2.7475783340632915
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 328,
    "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
    "generated_codes": [
      "def rotate_left(lst, rotate_by, num_elements):\n    # Calculate the effective rotation needed\n    rotate_by %= num_elements\n    # Perform the rotation\n    return lst[rotate_by:num_elements] + lst[:rotate_by]\n\n# Test cases"
    ],
    "token_counts": [
      274
    ],
    "generation_times": [
      6.454602308571339
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 329,
    "prompt": "Write a python function to count negative numbers in a list.",
    "generated_codes": [
      "def neg_count(numbers):\n    return sum(1 for num in numbers if num < 0)"
    ],
    "token_counts": [
      167
    ],
    "generation_times": [
      4.0296550989151
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 330,
    "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef find_char(s):\n    # Use regex to find words of length 3, 4, or 5\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, s)"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      6.4016541838645935
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 331,
    "prompt": "Write a python function to count unset bits of a given number.",
    "generated_codes": [
      "def count_unset_bits(n):\n    # Convert the number to binary and count the '0's\n    return bin(n).count('0') - 1\n\n# Test cases"
    ],
    "token_counts": [
      80
    ],
    "generation_times": [
      1.845464427024126
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 332,
    "prompt": "Write a function to count character frequency of a given string.",
    "generated_codes": [
      "def char_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency"
    ],
    "token_counts": [
      57
    ],
    "generation_times": [
      1.3213592804968357
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 333,
    "prompt": "Write a python function to sort a list according to the second element in sublist.",
    "generated_codes": [
      "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])"
    ],
    "token_counts": [
      321
    ],
    "generation_times": [
      7.388974774628878
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 334,
    "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "generated_codes": [
      "def check_Validity(a, b, c):\n    # Check if the sum of any two sides is greater than the third side\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.831317249685526
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 335,
    "prompt": "Write a function to find the sum of arithmetic progression.",
    "generated_codes": [
      "def ap_sum(a1, n, d):\n    \"\"\"\n    Calculate the sum of the first n terms of an arithmetic progression.\n    \n    Parameters:\n    a1 (int): The first term of the arithmetic progression.\n    n (int): The number of terms to sum.\n    d (int): The common difference between terms.\n    \n    Returns:\n    int: The sum of the first n terms of the arithmetic progression.\n    \"\"\"\n    # Formula for the sum of the first n terms of an arithmetic progression\n    return n * (2 * a1 + (n - 1) * d) // 2\n\n# Test cases"
    ],
    "token_counts": [
      195
    ],
    "generation_times": [
      4.483701046556234
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 336,
    "prompt": "Write a function to check whether the given month name contains 28 days or not.",
    "generated_codes": [
      "def check_monthnum(month_name):\n    # List of months with 28 days\n    months_with_28_days = [\"February\"]\n    \n    # Convert the input to title case for case-insensitive comparison\n    month_name = month_name.title()\n    \n    # Check if the month is in the list of months with 28 days\n    return month_name in months_with_28_days"
    ],
    "token_counts": [
      311
    ],
    "generation_times": [
      7.151424877345562
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 337,
    "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "generated_codes": [
      "import re\n\ndef text_match_word(text):\n    pattern = r'\\b\\w+\\b[.!?]?$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      297
    ],
    "generation_times": [
      6.825461156666279
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 338,
    "prompt": "Write a python function to count the number of substrings with same first and last characters.",
    "generated_codes": [
      "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Iterate over all possible starting points of substrings\n    for i in range(n):\n        # Iterate over all possible ending points of substrings\n        for j in range(i, n):\n            # Check if the first and last characters are the same\n            if s[i] == s[j]:\n                count += 1\n    \n    return count\n\n# Test cases"
    ],
    "token_counts": [
      168
    ],
    "generation_times": [
      3.8702097050845623
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 339,
    "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
    "generated_codes": [
      "def find_Divisor(start, end):\n    # Initialize a dictionary to count occurrences of each divisor\n    divisor_count = {}\n    \n    # Iterate over each number in the interval [start, end]\n    for num in range(start, end + 1):\n        # Check for each possible divisor from 1 to num\n        for divisor in range(1, num + 1):\n            if num % divisor == 0:\n                # Increment the count for this divisor\n                if divisor in divisor_count:\n                    divisor_count[divisor] += 1\n                else:\n                    divisor_count[divisor] = 1\n    \n    # Find the divisor with the maximum occurrence\n    max_divisor = max(divisor_count, key=divisor_count.get)\n    \n    return max_divisor\n\n# Test cases"
    ],
    "token_counts": [
      239
    ],
    "generation_times": [
      5.4911617413163185
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 340,
    "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "generated_codes": [
      "def sum_three_smallest_nums(numbers):\n    # Filter out non-positive numbers\n    positive_numbers = [num for num in numbers if num > 0]\n    \n    # Sort the positive numbers\n    positive_numbers.sort()\n    \n    # Sum the three smallest numbers\n    return sum(positive_numbers[:3])"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      1.7500452995300293
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 341,
    "prompt": "Write a function to convert the given set into ordered tuples.",
    "generated_codes": [
      "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))"
    ],
    "token_counts": [
      173
    ],
    "generation_times": [
      3.9799395985901356
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 342,
    "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "generated_codes": [
      "import heapq\n\ndef find_minimum_range(arrays):\n    # Initialize the heap and the current maximum value\n    min_heap = []\n    current_max = float('-inf')\n    \n    # Push the first element of each array into the heap\n    for i, array in enumerate(arrays):\n        heapq.heappush(min_heap, (array[0], i, 0))\n        current_max = max(current_max, array[0])\n    \n    # Initialize the range\n    min_range = float('inf')\n    range_start, range_end = -1, -1\n    \n    while min_heap:\n        # Get the smallest element from the heap\n        current_min, array_index, element_index = heapq.heappop(min_heap)\n        \n        # Update the range if the current range is smaller\n        if current_max - current_min < min_range:\n            min_range = current_max - current_min\n            range_start, range_end = current_min, current_max\n        \n        # If we have reached the end of any array, break the loop\n        if element_index + 1 == len(arrays[array_index]):\n            break\n        \n        # Push the next element from the same array into the heap\n        next_element = arrays[array_index][element_index + 1]\n        heapq.heappush(min_heap, (next_element, array_index, element_index + 1))\n        \n        # Update the current maximum value\n        current_max = max(current_max, next_element)\n    \n    return (range_start, range_end)"
    ],
    "token_counts": [
      335
    ],
    "generation_times": [
      7.69389271736145
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 343,
    "prompt": "Write a function to calculate the number of digits and letters in a string.",
    "generated_codes": [
      "def dig_let(s):\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return (digits, letters)"
    ],
    "token_counts": [
      49
    ],
    "generation_times": [
      1.133336290717125
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 344,
    "prompt": "Write a python function to find number of elements with odd factors in a given range.",
    "generated_codes": [
      "def count_Odd_Squares(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if int(num**0.5)**2 == num:  # Check if num is a perfect square\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.8319318778812885
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 345,
    "prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
    "generated_codes": [
      "def diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums) - 1)]"
    ],
    "token_counts": [
      371
    ],
    "generation_times": [
      8.520167201757431
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 346,
    "prompt": "Write a function to find entringer number e(n, k).",
    "generated_codes": [
      "def zigzag(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    \n    # Initialize the first row of the zigzag pattern\n    prev_row = [0] * (n + 1)\n    prev_row[0] = 1\n    \n    # Compute each row of the zigzag pattern\n    for i in range(1, n + 1):\n        current_row = [0] * (n + 1)\n        for j in range(n + 1):\n            if j == 0:\n                current_row[j] = prev_row[j]\n            else:\n                current_row[j] = current_row[j - 1] + prev_row[j]\n        prev_row = current_row\n    \n    return prev_row[k]\n\n# Test cases"
    ],
    "token_counts": [
      238
    ],
    "generation_times": [
      5.469107262790203
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 347,
    "prompt": "Write a python function to count the number of squares in a rectangle.",
    "generated_codes": [
      "def count_Squares(width, height):\n    return width * height"
    ],
    "token_counts": [
      20
    ],
    "generation_times": [
      0.4690781459212303
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 348,
    "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "generated_codes": [
      "def find_ways(n):\n    # Initialize a list to store the number of ways to form sequences of length i\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to form a sequence of length 0 (the empty sequence)\n\n    # Iterate over each length from 1 to n\n    for length in range(1, n + 1):\n        # Iterate over each possible value that can be added to the sequence\n        for value in [1, -1]:\n            if length - value >= 0:\n                dp[length] += dp[length - value]\n\n    return dp[n]\n\n# Test cases"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      4.533902138471603
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 349,
    "prompt": "Write a python function to check whether the given string is a binary string or not.",
    "generated_codes": [
      "def check(s):\n    return \"Yes\" if all(char in '01' for char in s) else \"No\""
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      0.7592306919395924
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 350,
    "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "generated_codes": [
      "def minimum_Length(s):\n    # Create a dictionary to count occurrences of each character\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the maximum count\n    max_count = max(char_count.values())\n    \n    # If the maximum count is 1, we can remove any character\n    if max_count == 1:\n        return len(s) - 1\n    \n    # Otherwise, we can remove all occurrences of the most frequent character\n    return len(s) - max_count\n\n# Test cases"
    ],
    "token_counts": [
      187
    ],
    "generation_times": [
      4.238945540040731
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 351,
    "prompt": "Write a python function to find the first element occurring k times in a given array.",
    "generated_codes": [
      "def first_Element(arr, n, k):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array\n    for num in arr:\n        # Update the frequency of the current element\n        freq[num] = freq.get(num, 0) + 1\n        \n        # If the frequency of the current element is k, return it\n        if freq[num] == k:\n            return num\n    \n    # If no element occurs k times, return -1\n    return -1"
    ],
    "token_counts": [
      486
    ],
    "generation_times": [
      11.015430562198162
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 352,
    "prompt": "Write a python function to check whether all the characters in a given string are unique.",
    "generated_codes": [
      "def unique_Characters(s):\n    # Create a set to store unique characters\n    char_set = set()\n    \n    # Iterate through each character in the string\n    for char in s:\n        # If the character is already in the set, return False\n        if char in char_set:\n            return False\n        # Otherwise, add the character to the set\n        char_set.add(char)\n    \n    # If we've gone through all characters without finding duplicates, return True\n    return True"
    ],
    "token_counts": [
      382
    ],
    "generation_times": [
      8.678079042583704
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 353,
    "prompt": "Write a function to remove a specified column from a given nested list.",
    "generated_codes": [
      "def remove_column(nested_list, column_index):\n    return [[row[i] for i in range(len(row)) if i != column_index] for row in nested_list]"
    ],
    "token_counts": [
      42
    ],
    "generation_times": [
      0.9711427614092827
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 354,
    "prompt": "Write a function to find t-nth term of arithemetic progression.",
    "generated_codes": [
      "def tn_ap(a1, n, d):\n    \"\"\"\n    Calculate the n-th term of an arithmetic progression.\n\n    Parameters:\n    a1 (int): The first term of the arithmetic progression.\n    n (int): The term number to find.\n    d (int): The common difference between the terms.\n\n    Returns:\n    int: The n-th term of the arithmetic progression.\n    \"\"\"\n    return a1 + (n - 1) * d\n\n# Test cases"
    ],
    "token_counts": [
      163
    ],
    "generation_times": [
      3.7095550149679184
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 355,
    "prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
    "generated_codes": [
      "import math\n\ndef count_Rectangles(r):\n    if r <= 0:\n        return 0\n    \n    count = 0\n    for width in range(1, 2*r + 1):\n        for height in range(1, 2*r + 1):\n            if width * height <= 4 * r * r:\n                count += 1\n    \n    return count"
    ],
    "token_counts": [
      350
    ],
    "generation_times": [
      7.9289684891700745
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 356,
    "prompt": "Write a function to find the third angle of a triangle using two angles.",
    "generated_codes": [
      "def find_angle(angle1, angle2):\n    # The sum of angles in a triangle is always 180 degrees\n    return 180 - (angle1 + angle2)\n\n# Test cases"
    ],
    "token_counts": [
      100
    ],
    "generation_times": [
      2.2796456329524517
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 357,
    "prompt": "Write a function to find the maximum element of all the given tuple records.",
    "generated_codes": [
      "def find_max(records):\n    return max(max(record) for record in records)"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.855860274285078
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 358,
    "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
    "generated_codes": [
      "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))"
    ],
    "token_counts": [
      36
    ],
    "generation_times": [
      0.8308671712875366
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 359,
    "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "generated_codes": [
      "import math\n\ndef Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the equation has real roots\n    if discriminant < 0:\n        return \"No\"\n    \n    # Calculate the roots\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Check if one root is twice the other\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return \"Yes\"\n    else:\n        return \"No\""
    ],
    "token_counts": [
      162
    ],
    "generation_times": [
      3.699996240437031
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 360,
    "prompt": "Write a function to find the n’th carol number.",
    "generated_codes": [
      "def get_carol(n):\n    if n <= 0:\n        return None\n    \n    # Initialize the first Carol number\n    carol = 1\n    \n    # Generate Carol numbers until we reach the nth one\n    for i in range(2, n + 1):\n        carol = (carol * 2) + 1\n    \n    return carol\n\n# Test cases"
    ],
    "token_counts": [
      332
    ],
    "generation_times": [
      7.552228815853596
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 361,
    "prompt": "Write a function to remove empty lists from a given list of lists.",
    "generated_codes": [
      "def remove_empty(lst):\n    return [item for item in lst if item != []]\n\n# Test cases"
    ],
    "token_counts": [
      145
    ],
    "generation_times": [
      3.304303728044033
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 362,
    "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
    "generated_codes": [
      "def max_occurrences(lst):\n    if not lst:\n        return None\n    \n    # Create a dictionary to count occurrences\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # Find the maximum occurrence count\n    max_count = max(count_dict.values())\n    \n    # Find all items with the maximum occurrence count\n    max_items = [item for item, count in count_dict.items() if count == max_count]\n    \n    # If there's only one item with max occurrences, return it\n    if len(max_items) == 1:\n        return max_items[0]\n    # If there are multiple items with max occurrences, return them as a tuple\n    else:\n        return tuple(max_items)"
    ],
    "token_counts": [
      192
    ],
    "generation_times": [
      4.376989223062992
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 363,
    "prompt": "Write a function to add the k elements to each element in the tuple.",
    "generated_codes": [
      "def add_K_element(tuples, k):\n    return [(x + k for x in t) for t in tuples]\n\n# Test cases"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      5.879823327064514
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 364,
    "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "generated_codes": [
      "def min_flip_to_make_string_alternate(s: str) -> int:\n    # Calculate the number of flips needed for both possible alternating patterns\n    flips_start_with_0 = sum(1 for i in range(len(s)) if (i % 2 == 0 and s[i] != '0') or (i % 2 == 1 and s[i] != '1'))\n    flips_start_with_1 = sum(1 for i in range(len(s)) if (i % 2 == 0 and s[i] != '1') or (i % 2 == 1 and s[i] != '0'))\n    \n    # Return the minimum of the two calculated flips\n    return min(flips_start_with_0, flips_start_with_1)\n\n# Test cases"
    ],
    "token_counts": [
      253
    ],
    "generation_times": [
      5.765968892723322
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 365,
    "prompt": "Write a python function to count the number of digits of a given number.",
    "generated_codes": [
      "def count_Digit(number):\n    return len(str(number))\n\n# Test cases"
    ],
    "token_counts": [
      73
    ],
    "generation_times": [
      1.667916338890791
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 366,
    "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "generated_codes": [
      "def adjacent_num_product(numbers):\n    if len(numbers) < 2:\n        return None  # Not enough elements to form a pair\n    \n    max_product = float('-inf')\n    \n    for i in range(len(numbers) - 1):\n        product = numbers[i] * numbers[i + 1]\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\n# Test cases"
    ],
    "token_counts": [
      162
    ],
    "generation_times": [
      3.686723832041025
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 367,
    "prompt": "Write a function to check if a binary tree is balanced or not.",
    "generated_codes": [
      "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        \n        left_height = check_balance(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_balance(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_balance(root) != -1"
    ],
    "token_counts": [
      361
    ],
    "generation_times": [
      8.204264860600233
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 368,
    "prompt": "Write a function to repeat the given tuple n times.",
    "generated_codes": [
      "def repeat_tuples(tup, n):\n    return tuple([tup] * n)"
    ],
    "token_counts": [
      274
    ],
    "generation_times": [
      6.231273964047432
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 369,
    "prompt": "Write a function to find the lateral surface area of cuboid",
    "generated_codes": [
      "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      2.5735761895775795
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 370,
    "prompt": "Write a function to sort a tuple by its float element.",
    "generated_codes": [
      "def float_sort(tuple_list):\n    return sorted(tuple_list, key=lambda x: float(x[1]), reverse=True)"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.533560033887625
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 371,
    "prompt": "Write a function to find the smallest missing element in a sorted array.",
    "generated_codes": [
      "def smallest_missing(arr, start, end):\n    left, right = start, end\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] - mid == start:\n            # If the difference between the element and its index\n            # equals the start value, the missing element is on the right side\n            left = mid + 1\n        else:\n            # Otherwise, the missing element is on the left side or at this position\n            right = mid - 1\n    \n    return left"
    ],
    "token_counts": [
      401
    ],
    "generation_times": [
      9.104205179959536
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 372,
    "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef heap_assending(arr):\n    # Convert the list into a heap\n    heapq.heapify(arr)\n    # Extract elements from the heap one by one to get them in sorted order\n    sorted_arr = [heapq.heappop(arr) for _ in range(len(arr))]\n    return sorted_arr\n\n# Test cases"
    ],
    "token_counts": [
      303
    ],
    "generation_times": [
      7.020157679915428
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 373,
    "prompt": "Write a function to find the volume of a cuboid.",
    "generated_codes": [
      "def volume_cuboid(length, width, height):\n    return length * width * height\n\n# Test cases"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      2.098711021244526
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 374,
    "prompt": "Write a function to print all permutations of a given string including duplicates.",
    "generated_codes": [
      "def permute_string(s):\n    def backtrack(start):\n        if start == len(s):\n            result.append(''.join(s))\n        for i in range(start, len(s)):\n            s[start], s[i] = s[i], s[start]\n            backtrack(start + 1)\n            s[start], s[i] = s[i], s[start]\n\n    result = []\n    s = list(s)\n    backtrack(0)\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      268
    ],
    "generation_times": [
      6.1565946117043495
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 375,
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
    "generated_codes": [
      "def round_num(number, multiple):\n    return multiple * round(number / multiple)"
    ],
    "token_counts": [
      245
    ],
    "generation_times": [
      5.620093941688538
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 376,
    "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "generated_codes": [
      "def remove_replica(tup):\n    from collections import Counter\n    \n    # Count occurrences of each element in the tuple\n    element_count = Counter(tup)\n    \n    # Create a new tuple replacing elements that occur more than once with 'MSP'\n    result = tuple('MSP' if element_count[element] > 1 else element for element in tup)\n    \n    return result\n\n# Test cases"
    ],
    "token_counts": [
      313
    ],
    "generation_times": [
      7.175943288952112
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 377,
    "prompt": "Write a python function to remove all occurrences of a character in a given string.",
    "generated_codes": [
      "def remove_Char(s, char):\n    return s.replace(char, '')\n\n# Test cases"
    ],
    "token_counts": [
      75
    ],
    "generation_times": [
      1.7276239730417728
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 378,
    "prompt": "Write a python function to shift last element to first position in the given list.",
    "generated_codes": [
      "def move_first(lst):\n    if not lst:  # Check if the list is empty\n        return lst\n    last_element = lst.pop()  # Remove the last element\n    return [last_element] + lst  # Add the last element to the front"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      1.4326346293091774
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 379,
    "prompt": "Write a function to find the surface area of a cuboid.",
    "generated_codes": [
      "def surfacearea_cuboid(length, width, height):\n    # Calculate the surface area of a cuboid\n    surface_area = 2 * (length * width + length * height + width * height)\n    return surface_area\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.8695170022547245
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 380,
    "prompt": "Write a function to generate a two-dimensional array.",
    "generated_codes": [
      "def multi_list(rows, cols):\n    result = []\n    for i in range(rows):\n        row = [0] * cols\n        for j in range(1, cols):\n            row[j] = i * j\n        result.append(row)\n    return result"
    ],
    "token_counts": [
      215
    ],
    "generation_times": [
      4.960836596786976
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 381,
    "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
    "generated_codes": [
      "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])"
    ],
    "token_counts": [
      191
    ],
    "generation_times": [
      4.388646926730871
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 382,
    "prompt": "Write a function to find the number of rotations in a circularly sorted array.",
    "generated_codes": [
      "def find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n    \n    # If the array is not rotated at all\n    if arr[left] <= arr[right]:\n        return 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid+1 is the pivot\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        \n        # Check if mid is the pivot\n        if mid > 0 and arr[mid - 1] > arr[mid]:\n            return mid\n        \n        # Decide which half to search\n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return 0  # This line should never be reached for a valid input"
    ],
    "token_counts": [
      500
    ],
    "generation_times": [
      11.461323015391827
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 383,
    "prompt": "Write a python function to toggle all odd bits of a given number.",
    "generated_codes": [
      "def even_bit_toggle_number(n):\n    # Create a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # Binary: 10101010101010101010101010101010\n    \n    # XOR the number with the mask to toggle odd bits\n    return n ^ mask\n\n# Test cases"
    ],
    "token_counts": [
      438
    ],
    "generation_times": [
      10.035340335220098
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 384,
    "prompt": "Write a python function to find the frequency of the smallest value in a given array.",
    "generated_codes": [
      "def frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"
    ],
    "token_counts": [
      287
    ],
    "generation_times": [
      6.588009625673294
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 385,
    "prompt": "Write a function to find the n'th perrin number using recursion.",
    "generated_codes": [
      "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 3)\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      2.416203547269106
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 386,
    "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "generated_codes": [
      "def swap_count(s):\n    # Initialize counters for unbalanced brackets\n    unbalanced = 0\n    swaps = 0\n    \n    # Traverse the string\n    for char in s:\n        if char == '[':\n            # Increment unbalanced counter for an opening bracket\n            unbalanced += 1\n        elif char == ']':\n            # Decrement unbalanced counter for a closing bracket\n            unbalanced -= 1\n        \n        # If unbalanced is negative, it means we have more closing brackets than opening ones\n        if unbalanced < 0:\n            # We need a swap to balance the brackets\n            swaps += 1\n            # Reset unbalanced to zero after a swap\n            unbalanced = 0\n    \n    return swaps\n\n# Test cases"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      4.859016910195351
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 387,
    "prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
    "generated_codes": [
      "def even_or_odd(hex_string):\n    # Convert the hexadecimal string to an integer\n    decimal_value = int(hex_string, 16)\n    \n    # Check if the decimal value is even or odd\n    if decimal_value % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases"
    ],
    "token_counts": [
      130
    ],
    "generation_times": [
      2.984149981290102
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 388,
    "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "generated_codes": [
      "def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      2.4148311503231525
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 389,
    "prompt": "Write a function to find the n'th lucas number.",
    "generated_codes": [
      "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      2.8441746309399605
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 390,
    "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
    "generated_codes": [
      "def add_string(lst, string):\n    return [string.format(item) for item in lst]"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      4.589712332934141
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 391,
    "prompt": "Write a function to convert more than one list to nested dictionary.",
    "generated_codes": [
      "def convert_list_dictionary(keys, values, scores):\n    return [\n        {key: {value: score}}\n        for key, value, score in zip(keys, values, scores)\n    ]"
    ],
    "token_counts": [
      52
    ],
    "generation_times": [
      1.2148032486438751
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 392,
    "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "generated_codes": [
      "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    \n    if n <= 1:\n        return n\n    \n    max_sum = max(\n        get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + \n        get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo),\n        n\n    )\n    \n    memo[n] = max_sum\n    return max_sum"
    ],
    "token_counts": [
      342
    ],
    "generation_times": [
      7.841088950634003
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 393,
    "prompt": "Write a function to find the list with maximum length using lambda function.",
    "generated_codes": [
      "def max_length_list(lists):\n    return max(map(lambda x: (len(x), x), lists), key=lambda x: x[0])"
    ],
    "token_counts": [
      185
    ],
    "generation_times": [
      4.255079224705696
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 394,
    "prompt": "Write a function to check if given tuple is distinct or not.",
    "generated_codes": [
      "def check_distinct(tup):\n    return len(tup) == len(set(tup))"
    ],
    "token_counts": [
      286
    ],
    "generation_times": [
      6.727301839739084
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 395,
    "prompt": "Write a python function to find the first non-repeated character in a given string.",
    "generated_codes": [
      "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the first character with count 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    ],
    "token_counts": [
      402
    ],
    "generation_times": [
      9.212424751371145
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 396,
    "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "generated_codes": [
      "import re\n\ndef check_char(s):\n    if re.match(r'^(\\w)\\w*\\1$', s):\n        return \"Valid\"\n    else:\n        return \"Invalid\""
    ],
    "token_counts": [
      48
    ],
    "generation_times": [
      1.1103989779949188
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 397,
    "prompt": "Write a function to find the median of three specific numbers.",
    "generated_codes": [
      "def median_numbers(a, b, c):\n    # Sort the numbers\n    numbers = sorted([a, b, c])\n    # Return the middle number\n    return numbers[1]\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.777181725949049
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 398,
    "prompt": "Write a function to compute the sum of digits of each number of a given list.",
    "generated_codes": [
      "def sum_of_digits(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += sum_of_digits(item)\n        elif isinstance(item, int):\n            total += sum(int(digit) for digit in str(abs(item)))\n    return total"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      5.310425546020269
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 399,
    "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "generated_codes": [
      "def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      367
    ],
    "generation_times": [
      8.352508645504713
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 400,
    "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "generated_codes": [
      "def extract_freq(lst):\n    # Convert each tuple to a sorted tuple to ensure order insensitivity\n    sorted_tuples = [tuple(sorted(t)) for t in lst]\n    \n    # Use a set to find unique sorted tuples\n    unique_tuples = set(sorted_tuples)\n    \n    # Return the number of unique sorted tuples\n    return len(unique_tuples)\n\n# Test cases"
    ],
    "token_counts": [
      197
    ],
    "generation_times": [
      4.494404304772615
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 401,
    "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "generated_codes": [
      "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      252
    ],
    "generation_times": [
      5.749525561928749
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 402,
    "prompt": "Write a function to compute the value of ncr%p.",
    "generated_codes": [
      "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    \n    # Create an array to store the modular inverses\n    inv = [0] * (r + 1)\n    inv[0] = 1\n    \n    # Compute modular inverses using Fermat's Little Theorem\n    for i in range(1, r + 1):\n        inv[i] = pow(i, p - 2, p)\n    \n    # Compute nCr % p using the formula:\n    # nCr % p = (n! / (r! * (n-r)!)) % p\n    result = 1\n    for i in range(r):\n        result = (result * (n - i)) % p\n        result = (result * inv[i + 1]) % p\n    \n    return result"
    ],
    "token_counts": [
      447
    ],
    "generation_times": [
      10.161648105829954
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 403,
    "prompt": "Write a function to check if a url is valid or not using regex.",
    "generated_codes": [
      "import re\n\ndef is_valid_URL(url):\n    # Regular expression pattern for validating URL\n    pattern = re.compile(\n        r'^(?:http|https)://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|'  # ...or ipv4\n        r'\\[?[A-F0-9]*:[A-F0-9:]+\\]?)'  # ...or ipv6\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    \n    return bool(pattern.match(url))\n\n# Test cases"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      6.570847928524017
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 404,
    "prompt": "Write a python function to find the minimum of two numbers.",
    "generated_codes": [
      "def minimum(a, b):\n    return a if a < b else b"
    ],
    "token_counts": [
      22
    ],
    "generation_times": [
      0.5110770240426064
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 405,
    "prompt": "Write a function to check whether an element exists within a tuple.",
    "generated_codes": [
      "def check_tuplex(tuplex, element):\n    return element in tuplex"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      4.817991603165865
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 406,
    "prompt": "Write a python function to find the parity of a given number.",
    "generated_codes": [
      "def find_Parity(number):\n    # Count the number of 1s in the binary representation of the number\n    count_of_ones = bin(number).count('1')\n    \n    # Determine parity based on the count of 1s\n    if count_of_ones % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test cases"
    ],
    "token_counts": [
      142
    ],
    "generation_times": [
      3.2450295127928257
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 407,
    "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "generated_codes": [
      "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first pair of adjacent digits where the left is smaller than the right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such pair is found, return False\n        return False\n    \n    # Find the smallest digit on the right side of digits[i] that is greater than digits[i]\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            # Swap the found digit with digits[i]\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    \n    # Reverse the digits after the position i\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n\n# Test cases"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      6.615997176617384
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 408,
    "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "generated_codes": [
      "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    heap = []\n    result = []\n    \n    # Initialize the heap with the first element from nums1 paired with all elements from nums2\n    for i in range(min(k, len(nums2))):\n        heapq.heappush(heap, (nums1[0] + nums2[i], 0, i))\n    \n    while k > 0 and heap:\n        _, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i+1] + nums2[j], i+1, j))\n        \n        k -= 1\n    \n    return result"
    ],
    "token_counts": [
      446
    ],
    "generation_times": [
      10.16029055789113
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 409,
    "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "generated_codes": [
      "def min_product_tuple(tuples_list):\n    # Initialize the minimum product with a large number\n    min_product = float('inf')\n    \n    # Iterate over each tuple in the list\n    for a, b in tuples_list:\n        # Calculate the product of the tuple\n        product = a * b\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n\n# Test cases"
    ],
    "token_counts": [
      218
    ],
    "generation_times": [
      4.964591387659311
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 410,
    "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
    "generated_codes": [
      "def min_val(lst):\n    # Filter out non-integer elements\n    filtered_list = [item for item in lst if isinstance(item, int)]\n    # Return the minimum value from the filtered list\n    return min(filtered_list)\n\n# Test cases"
    ],
    "token_counts": [
      139
    ],
    "generation_times": [
      3.1733116768300533
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 411,
    "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
    "generated_codes": [
      "import re\n\ndef snake_to_camel(snake_str):\n    # Split the string by underscores\n    words = snake_str.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words to form the camel case string\n    return ''.join(camel_words)\n\n# Test cases"
    ],
    "token_counts": [
      150
    ],
    "generation_times": [
      3.4208261482417583
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 412,
    "prompt": "Write a python function to remove odd numbers from a given list.",
    "generated_codes": [
      "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]"
    ],
    "token_counts": [
      207
    ],
    "generation_times": [
      4.7150056175887585
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 413,
    "prompt": "Write a function to extract the nth element from a given list of tuples.",
    "generated_codes": [
      "def extract_nth_element(tuples_list, n):\n    return [tup[n] for tup in tuples_list]"
    ],
    "token_counts": [
      34
    ],
    "generation_times": [
      0.7877252586185932
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 414,
    "prompt": "Write a python function to check whether the value exists in a sequence or not.",
    "generated_codes": [
      "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)"
    ],
    "token_counts": [
      236
    ],
    "generation_times": [
      5.387709282338619
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 415,
    "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
    "generated_codes": [
      "def max_Product(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n\n    # Initialize variables to store the maximum product and the corresponding pair\n    max_product = float('-inf')\n    max_pair = (None, None)\n\n    # Iterate through all pairs in the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n\n# Test cases"
    ],
    "token_counts": [
      240
    ],
    "generation_times": [
      5.463428117334843
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 416,
    "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "generated_codes": [
      "def breakSum(n):\n    if n <= 3:\n        return n\n    \n    # Try breaking the number into three parts\n    max_sum = 0\n    for i in range(1, n-1):\n        for j in range(i, n-i):\n            part1 = i\n            part2 = j\n            part3 = n - i - j\n            current_sum = part1 + part2 + part3 + breakSum(part1) + breakSum(part2) + breakSum(part3)\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Test cases"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      4.027770187705755
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 417,
    "prompt": "Write a function to find common first element in given list of tuple.",
    "generated_codes": [
      "def group_tuples(tuples_list):\n    from collections import defaultdict\n\n    # Dictionary to hold lists of tuples with the same first element\n    grouped = defaultdict(list)\n\n    # Group tuples by their first element\n    for t in tuples_list:\n        grouped[t[0]].append(t[1])\n\n    # Create the result list of tuples\n    result = []\n    for key in grouped:\n        # Create a tuple with the first element and the rest of the elements\n        result.append((key,) + tuple(grouped[key]))\n\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      268
    ],
    "generation_times": [
      6.088121235370636
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 418,
    "prompt": "Write a python function to find the sublist having maximum length.",
    "generated_codes": [
      "def Find_Max(lists):\n    return max(lists, key=len)"
    ],
    "token_counts": [
      261
    ],
    "generation_times": [
      5.943041916936636
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 419,
    "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "generated_codes": [
      "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"
    ],
    "token_counts": [
      49
    ],
    "generation_times": [
      1.1291134655475616
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 420,
    "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
    "generated_codes": [
      "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_cubes += even_number ** 3\n    return sum_cubes\n\n# Test cases"
    ],
    "token_counts": [
      102
    ],
    "generation_times": [
      2.326836161315441
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 421,
    "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
    "generated_codes": [
      "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"
    ],
    "token_counts": [
      141
    ],
    "generation_times": [
      3.217317797243595
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 422,
    "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
    "generated_codes": [
      "def find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.853197120130062
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 423,
    "prompt": "Write a function to solve gold mine problem.",
    "generated_codes": [
      "def get_maxgold(mine, n, m):\n    # Create a 2D array to store the maximum gold collected up to each cell\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    \n    # Initialize the first row of dp with the values from the mine\n    for j in range(m):\n        dp[0][j] = mine[0][j]\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(m):\n            # If we're at the leftmost column, we can only come from above\n            if j == 0:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j], dp[i-1][j+1])\n            # If we're at the rightmost column, we can only come from above\n            elif j == m-1:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j], dp[i-1][j-1])\n            # For all other cells, we can come from above, above-left, or above-right\n            else:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n    \n    # The maximum gold collected will be the maximum value in the last row of dp\n    return max(dp[n-1])"
    ],
    "token_counts": [
      535
    ],
    "generation_times": [
      12.198327008634806
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 424,
    "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
    "generated_codes": [
      "def extract_rear(tuple_of_strings):\n    return [s[-1] for s in tuple_of_strings]"
    ],
    "token_counts": [
      234
    ],
    "generation_times": [
      5.568217907100916
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 425,
    "prompt": "Write a function to count the number of sublists containing a particular element.",
    "generated_codes": [
      "def count_element_in_list(lists, element):\n    count = 0\n    for sublist in lists:\n        if element in sublist:\n            count += 1\n    return count"
    ],
    "token_counts": [
      48
    ],
    "generation_times": [
      1.1181336306035519
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 426,
    "prompt": "Write a function to filter odd numbers using lambda function.",
    "generated_codes": [
      "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))"
    ],
    "token_counts": [
      236
    ],
    "generation_times": [
      5.432534947991371
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 427,
    "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "generated_codes": [
      "import re\n\ndef change_date_format(date_str):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, date_str)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError(\"Invalid date format. Expected yyyy-mm-dd.\")\n\n# Test cases"
    ],
    "token_counts": [
      197
    ],
    "generation_times": [
      4.514018204063177
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 428,
    "prompt": "Write a function to sort the given array by using shell sort.",
    "generated_codes": [
      "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test cases"
    ],
    "token_counts": [
      309
    ],
    "generation_times": [
      7.078618496656418
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 429,
    "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "generated_codes": [
      "def and_tuples(tuple1, tuple2):\n    return tuple(min(a, b) for a, b in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      380
    ],
    "generation_times": [
      8.864433504641056
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 430,
    "prompt": "Write a function to find the directrix of a parabola.",
    "generated_codes": [
      "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given its vertex coordinates (h, k)\n    and the focus distance f from the vertex.\n    \n    :param a: x-coordinate of the vertex\n    :param b: y-coordinate of the vertex\n    :param c: distance from vertex to focus\n    :return: y-coordinate of the directrix\n    \"\"\"\n    # The directrix of a parabola is a horizontal line\n    # Its equation is y = k, where k is the y-coordinate of the vertex\n    # The distance from the vertex to the directrix is equal to the distance from the vertex to the focus\n    # We can verify this by rearranging the formula for the distance between a point and a line:\n    # |Ax + By + C| / sqrt(A^2 + B^2) = d, where (A, B, C) is the line equation and d is the distance\n    \n    # In this case, A = 0, B = 1, C = -k, and d = c\n    # So we have: |0 + 1*k + (-k)| / sqrt(0^2 + 1^2) = c\n    # Simplifying: |k| = c\n    # Therefore, k = ±c\n    \n    # Since the directrix is a horizontal line, we can choose either positive or negative c\n    # We'll choose the positive value for consistency with the given test cases\n    return b - c\n\n# Test cases"
    ],
    "token_counts": [
      408
    ],
    "generation_times": [
      9.564005583524704
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 431,
    "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
    "generated_codes": [
      "def common_element(list1, list2):\n    # Convert both lists to sets and find the intersection\n    common = set(list1).intersection(set(list2))\n    # Return True if there is at least one common element, otherwise None\n    return True if common else None\n\n# Test cases"
    ],
    "token_counts": [
      162
    ],
    "generation_times": [
      3.680886473506689
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 432,
    "prompt": "Write a function to find the median of a trapezium.",
    "generated_codes": [
      "def median_trapezium(a, b, c):\n    # Sort the sides to ensure a <= b <= c\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    # Calculate the median\n    median = (a + b) / 2\n    \n    return median\n\n# Test cases"
    ],
    "token_counts": [
      152
    ],
    "generation_times": [
      3.4757486693561077
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 433,
    "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "generated_codes": [
      "def check_greater(arr, num):\n    if num > max(arr):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'"
    ],
    "token_counts": [
      60
    ],
    "generation_times": [
      1.3829691596329212
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 434,
    "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
    "generated_codes": [
      "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      51
    ],
    "generation_times": [
      1.1648642234504223
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 435,
    "prompt": "Write a python function to find the last digit of a given number.",
    "generated_codes": [
      "def last_Digit(n):\n    return n % 10\n\n# Test cases"
    ],
    "token_counts": [
      61
    ],
    "generation_times": [
      1.3924617804586887
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 436,
    "prompt": "Write a python function to print negative numbers in a list.",
    "generated_codes": [
      "def neg_nos(lst):\n    return ','.join(str(num) for num in lst if num < 0)"
    ],
    "token_counts": [
      32
    ],
    "generation_times": [
      0.7393728531897068
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 437,
    "prompt": "Write a function to remove odd characters in a string.",
    "generated_codes": [
      "def remove_odd(s):\n    return ''.join([char for char in s if ord(char) % 2 == 0])\n\n# Test cases"
    ],
    "token_counts": [
      78
    ],
    "generation_times": [
      1.7800207510590553
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 438,
    "prompt": "Write a function to count bidirectional tuple pairs.",
    "generated_codes": [
      "def count_bidirectional(pairs):\n    count = 0\n    seen = set()\n    \n    for pair in pairs:\n        # Sort the pair to ensure (a, b) and (b, a) are treated the same\n        sorted_pair = tuple(sorted(pair))\n        \n        # If we haven't seen this pair before, increment the count\n        if sorted_pair not in seen:\n            count += 1\n            seen.add(sorted_pair)\n    \n    return str(count)"
    ],
    "token_counts": [
      497
    ],
    "generation_times": [
      11.235305193811655
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 439,
    "prompt": "Write a function to convert a list of multiple integers into a single integer.",
    "generated_codes": [
      "def multiple_to_single(numbers):\n    # Convert each integer to a string\n    str_numbers = map(str, numbers)\n    # Join the string representations of the integers\n    combined_str = ''.join(str_numbers)\n    # Convert the combined string back to an integer\n    return int(combined_str)\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      3.7682570852339268
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 440,
    "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
    "generated_codes": [
      "import re\n\ndef find_adverb_position(sentence):\n    # Regular expression to match adverbs\n    # Adverbs typically end with 'ly' and may have punctuation\n    pattern = r'\\b(\\w+ly)\\b[.!?]?'\n    \n    # Search for the pattern in the sentence\n    match = re.search(pattern, sentence)\n    \n    if match:\n        # If found, return the start position, end position, and the adverb\n        start = match.start()\n        end = match.end()\n        adverb = match.group(1)\n        return (start, end, adverb)\n    else:\n        # If no adverb is found, return None\n        return None\n\n# Test cases"
    ],
    "token_counts": [
      245
    ],
    "generation_times": [
      5.554277330636978
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 441,
    "prompt": "Write a function to find the surface area of a cube.",
    "generated_codes": [
      "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2"
    ],
    "token_counts": [
      26
    ],
    "generation_times": [
      0.598492193967104
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 442,
    "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
    "generated_codes": [
      "def positive_count(arr):\n    if not arr:\n        return 0\n    positive_numbers = sum(1 for x in arr if x > 0)\n    return round(positive_numbers / len(arr), 2)\n\n# Test cases"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.519996412098408
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 443,
    "prompt": "Write a python function to find the largest negative number from the given list.",
    "generated_codes": [
      "def largest_neg(numbers):\n    negative_numbers = [num for num in numbers if num < 0]\n    if not negative_numbers:\n        return None\n    return max(negative_numbers)\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.750379852950573
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 444,
    "prompt": "Write a function to trim each tuple by k in the given tuple list.",
    "generated_codes": [
      "def trim_tuple(tuple_list, k):\n    return str([tuple(t[k:] for t in tuple_list)])\n\n# Test cases"
    ],
    "token_counts": [
      315
    ],
    "generation_times": [
      7.126957256346941
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 445,
    "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "generated_codes": [
      "def index_multiplication(tuple1, tuple2):\n    return tuple(tuple(a * b for a, b in zip(t1, t2)) for t1, t2 in zip(tuple1, tuple2))"
    ],
    "token_counts": [
      185
    ],
    "generation_times": [
      4.198289345949888
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 446,
    "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
    "generated_codes": [
      "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      3.526288241147995
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 447,
    "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
    "generated_codes": [
      "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      4.49504866078496
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 448,
    "prompt": "Write a function to calculate the sum of perrin numbers.",
    "generated_codes": [
      "def cal_sum(n):\n    if n < 3:\n        return n\n    \n    perrin = [0, 1, 1]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    \n    return sum(perrin[:n+1])"
    ],
    "token_counts": [
      283
    ],
    "generation_times": [
      6.4024208933115005
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 449,
    "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "generated_codes": [
      "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of the sides of the triangle\n    side1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    side2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    side3 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n    \n    # Check the triangle inequality theorem\n    if side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases"
    ],
    "token_counts": [
      279
    ],
    "generation_times": [
      6.317418802529573
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 450,
    "prompt": "Write a function to extract specified size of strings from a give list of string values.",
    "generated_codes": [
      "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]"
    ],
    "token_counts": [
      184
    ],
    "generation_times": [
      4.190074175596237
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 451,
    "prompt": "Write a function to remove all whitespaces from the given string using regex.",
    "generated_codes": [
      "import re\n\ndef remove_whitespaces(s):\n    return re.sub(r'\\s+', '', s)"
    ],
    "token_counts": [
      188
    ],
    "generation_times": [
      4.278510592877865
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 452,
    "prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
    "generated_codes": [
      "def loss_amount(initial_amount, final_amount):\n    if final_amount < initial_amount:\n        return initial_amount - final_amount\n    else:\n        return None"
    ],
    "token_counts": [
      41
    ],
    "generation_times": [
      0.9386405758559704
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 453,
    "prompt": "Write a python function to find the sum of even factors of a number.",
    "generated_codes": [
      "def sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Test cases"
    ],
    "token_counts": [
      112
    ],
    "generation_times": [
      2.5448436699807644
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 454,
    "prompt": "Write a function that matches a word containing 'z'.",
    "generated_codes": [
      "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\bz\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
    ],
    "token_counts": [
      279
    ],
    "generation_times": [
      6.331186223775148
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 455,
    "prompt": "Write a function to check whether the given month number contains 31 days or not.",
    "generated_codes": [
      "def check_monthnumb_number(month_number):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the month number is in the list of months with 31 days\n    return month_number in months_with_31_days\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      3.0039245933294296
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 456,
    "prompt": "Write a function to reverse strings in a given list of string values.",
    "generated_codes": [
      "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]"
    ],
    "token_counts": [
      226
    ],
    "generation_times": [
      5.128808367997408
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 457,
    "prompt": "Write a python function to find the sublist having minimum length.",
    "generated_codes": [
      "def Find_Min(lists):\n    if not lists:\n        return []\n    return min(lists, key=len)"
    ],
    "token_counts": [
      308
    ],
    "generation_times": [
      6.985087126493454
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 458,
    "prompt": "Write a function to find the area of a rectangle.",
    "generated_codes": [
      "def rectangle_area(length, width):\n    return length * width"
    ],
    "token_counts": [
      19
    ],
    "generation_times": [
      0.4410678446292877
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 459,
    "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
    "generated_codes": [
      "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)"
    ],
    "token_counts": [
      213
    ],
    "generation_times": [
      4.830853383988142
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 460,
    "prompt": "Write a python function to get the first element of each sublist.",
    "generated_codes": [
      "def Extract(lst):\n    return [sublist[0] for sublist in lst if sublist]\n\n# Test cases"
    ],
    "token_counts": [
      118
    ],
    "generation_times": [
      2.6848124638199806
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 461,
    "prompt": "Write a python function to count the upper case characters in a given string.",
    "generated_codes": [
      "def upper_ctr(s):\n    return sum(1 for char in s if char.isupper())"
    ],
    "token_counts": [
      27
    ],
    "generation_times": [
      0.6231209300458431
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 462,
    "prompt": "Write a function to find all possible combinations of the elements of a given list.",
    "generated_codes": [
      "from itertools import combinations\n\ndef combinations_list(lst):\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(combinations(lst, r))\n    return [list(comb) for comb in result]"
    ],
    "token_counts": [
      279
    ],
    "generation_times": [
      6.390349421650171
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 463,
    "prompt": "Write a function to find the maximum product subarray of the given array.",
    "generated_codes": [
      "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        temp_max = max(num, max_product * num, min_product * num)\n        min_product = min(num, max_product * num, min_product * num)\n        max_product = temp_max\n\n        result = max(result, max_product)\n\n    return result"
    ],
    "token_counts": [
      340
    ],
    "generation_times": [
      7.714696243405342
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 464,
    "prompt": "Write a function to check if all values are same in a dictionary.",
    "generated_codes": [
      "def check_value(dictionary, value):\n    return all(v == value for v in dictionary.values())"
    ],
    "token_counts": [
      312
    ],
    "generation_times": [
      7.087390545755625
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 465,
    "prompt": "Write a function to drop empty items from a given dictionary.",
    "generated_codes": [
      "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      0.7608930468559265
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 466,
    "prompt": "Write a function to find the peak element in the given array.",
    "generated_codes": [
      "def find_peak(arr, n):\n    # Handle edge cases\n    if n == 1:\n        return 0\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    \n    # Binary search for peak element\n    low = 1\n    high = n - 2\n    while low <= high:\n        mid = (low + high) // 2\n        \n        # Check if mid is peak\n        if arr[mid-1] <= arr[mid] and arr[mid] >= arr[mid+1]:\n            return mid\n        \n        # If left neighbor is greater, peak is in left half\n        elif arr[mid-1] > arr[mid]:\n            high = mid - 1\n        \n        # If right neighbor is greater, peak is in right half\n        else:\n            low = mid + 1\n    \n    # This line should never be reached if input is valid\n    return -1"
    ],
    "token_counts": [
      409
    ],
    "generation_times": [
      9.306097965687513
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 467,
    "prompt": "Write a python function to convert decimal number to octal number.",
    "generated_codes": [
      "def decimal_to_Octal(decimal):\n    if decimal == 0:\n        return 0\n    \n    octal = 0\n    base = 1\n    \n    while decimal > 0:\n        octal += (decimal % 8) * base\n        decimal //= 8\n        base *= 10\n    \n    return octal\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      2.829070519655943
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 468,
    "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "generated_codes": [
      "def max_product(arr, n):\n    # Initialize a list to store the maximum product for each element\n    max_prod = [0] * n\n    \n    # Initialize the first element's max product as itself\n    max_prod[0] = arr[0]\n    \n    # Iterate over the array to fill the max_prod array\n    for i in range(1, n):\n        # Initialize max product for arr[i]\n        max_prod[i] = arr[i]\n        \n        # Check all previous elements to find the maximum product\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], arr[i] * max_prod[j])\n    \n    # Return the maximum value from max_prod array\n    return max(max_prod)\n\n# Test cases"
    ],
    "token_counts": [
      307
    ],
    "generation_times": [
      6.965262781828642
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 469,
    "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "generated_codes": [
      "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n\n    n = len(prices)\n    \n    # If k is large enough, we can make as many transactions as we want\n    if k >= n // 2:\n        return sum(max(prices[i] - prices[i-1], 0) for i in range(1, n))\n\n    # Initialize the dp table\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    for i in range(1, k+1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n\n    return dp[k][n-1]"
    ],
    "token_counts": [
      545
    ],
    "generation_times": [
      12.307180266827345
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 470,
    "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "generated_codes": [
      "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup) - 1))"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.5874241776764393
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 471,
    "prompt": "Write a python function to find remainder of array multiplication divided by n.",
    "generated_codes": [
      "def find_remainder(arr, a, n):\n    # Initialize the result as 1\n    result = 1\n    \n    # Iterate over each element in the array\n    for num in arr:\n        # Multiply the result with the current number and take modulo n\n        result = (result * num) % n\n    \n    # Calculate the final remainder when result is divided by a\n    final_remainder = result % a\n    \n    return final_remainder\n\n# Test cases"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      4.4902948178350925
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 472,
    "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "generated_codes": [
      "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    \n    sorted_lst = sorted(lst)\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1] + 1:\n            return False\n    return True"
    ],
    "token_counts": [
      323
    ],
    "generation_times": [
      7.305813681334257
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 473,
    "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "generated_codes": [
      "def tuple_intersection(list1, list2):\n    # Convert each tuple in the lists to a frozenset to handle unordered tuples\n    set1 = {frozenset(t) for t in list1}\n    set2 = {frozenset(t) for t in list2}\n    \n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n    \n    # Convert frozensets back to tuples\n    return {tuple(t) for t in intersection}\n\n# Test cases"
    ],
    "token_counts": [
      340
    ],
    "generation_times": [
      7.671931844204664
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 474,
    "prompt": "Write a function to replace characters in a string.",
    "generated_codes": [
      "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)"
    ],
    "token_counts": [
      28
    ],
    "generation_times": [
      0.642070434987545
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 475,
    "prompt": "Write a function to sort counter by value.",
    "generated_codes": [
      "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    ],
    "token_counts": [
      178
    ],
    "generation_times": [
      4.028148043900728
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 476,
    "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "generated_codes": [
      "def big_sum(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)"
    ],
    "token_counts": [
      32
    ],
    "generation_times": [
      0.7336877174675465
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 477,
    "prompt": "Write a python function to convert the given string to lower case.",
    "generated_codes": [
      "def is_lower(s):\n    return s.lower()"
    ],
    "token_counts": [
      18
    ],
    "generation_times": [
      0.41737210005521774
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 478,
    "prompt": "Write a function to remove lowercase substrings from a given string.",
    "generated_codes": [
      "def remove_lowercase(s):\n    return ''.join(char for char in s if not char.islower())"
    ],
    "token_counts": [
      30
    ],
    "generation_times": [
      0.6893430948257446
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 479,
    "prompt": "Write a python function to find the first digit of a given number.",
    "generated_codes": [
      "def first_Digit(number):\n    # Convert the number to a string to easily access the first character\n    number_str = str(number)\n    # Return the first character converted back to an integer\n    return int(number_str[0])\n\n# Test cases"
    ],
    "token_counts": [
      98
    ],
    "generation_times": [
      2.225217390805483
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 480,
    "prompt": "Write a python function to find the maximum occurring character in a given string.",
    "generated_codes": [
      "def get_max_occuring_char(s):\n    # Create a dictionary to store the frequency of each character\n    char_count = {}\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Increment the count of the character in the dictionary\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the maximum frequency\n    max_char = max(char_count, key=char_count.get)\n    \n    return max_char\n\n# Test cases"
    ],
    "token_counts": [
      178
    ],
    "generation_times": [
      4.031693924218416
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 481,
    "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "generated_codes": [
      "def is_subset_sum(nums, n, target):\n    # Create a 2D table to store results of subproblems\n    dp = [[False for _ in range(target + 1)] for _ in range(n + 1)]\n    \n    # Initialize the first column as True (sum of 0 is always possible)\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if nums[i-1] <= j:\n                dp[i][j] = dp[i-1][j - nums[i-1]] or dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # Return the last cell of the table\n    return dp[n][target]"
    ],
    "token_counts": [
      576
    ],
    "generation_times": [
      13.02214701473713
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 482,
    "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef match(s):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, s):\n        return 'Yes'\n    else:\n        return 'No'"
    ],
    "token_counts": [
      53
    ],
    "generation_times": [
      1.2105308845639229
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 483,
    "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "generated_codes": [
      "def first_Factorial_Divisible_Number(x):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1"
    ],
    "token_counts": [
      106
    ],
    "generation_times": [
      2.4075441658496857
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 484,
    "prompt": "Write a function to remove the matching tuples from the given two tuples.",
    "generated_codes": [
      "def remove_matching_tuple(tuple1, tuple2):\n    # Convert the second tuple to a set for faster lookup\n    tuple2_set = set(tuple2)\n    \n    # Use list comprehension to filter out matching tuples\n    result = [t for t in tuple1 if t not in tuple2_set]\n    \n    return result"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      4.016722612082958
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 485,
    "prompt": "Write a function to find the largest palindromic number in the given array.",
    "generated_codes": [
      "def largest_palindrome(arr, n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_palindrome = -1\n    for num in arr:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    \n    return max_palindrome if max_palindrome != -1 else None\n\n# Test cases"
    ],
    "token_counts": [
      208
    ],
    "generation_times": [
      4.717434458434582
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 486,
    "prompt": "Write a function to compute binomial probability for the given number.",
    "generated_codes": [
      "from math import comb\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability.\n\n    Parameters:\n    n (int): Total number of trials.\n    k (int): Number of successful trials.\n    p (float): Probability of success on each trial.\n\n    Returns:\n    float: The binomial probability.\n    \"\"\"\n    return comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\n# Test cases"
    ],
    "token_counts": [
      230
    ],
    "generation_times": [
      5.2312422171235085
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 487,
    "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "generated_codes": [
      "def sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[-1])"
    ],
    "token_counts": [
      266
    ],
    "generation_times": [
      6.042890474200249
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 488,
    "prompt": "Write a function to find the area of a pentagon.",
    "generated_codes": [
      "import math\n\ndef area_pentagon(s):\n    \"\"\"\n    Calculate the area of a regular pentagon given the side length.\n    \n    :param s: Side length of the pentagon\n    :return: Area of the pentagon\n    \"\"\"\n    # Formula for the area of a regular pentagon\n    area = (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * s**2\n    return area\n\n# Test cases"
    ],
    "token_counts": [
      235
    ],
    "generation_times": [
      5.330754738301039
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 489,
    "prompt": "Write a python function to find the frequency of the largest value in a given array.",
    "generated_codes": [
      "def frequency_Of_Largest(n, arr):\n    if n != len(arr):\n        return [[Invalid]]\n    \n    max_value = max(arr)\n    return arr.count(max_value)\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.8425914496183395
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 490,
    "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "generated_codes": [
      "def extract_symmetric(pairs):\n    symmetric_pairs = set()\n    for pair in pairs:\n        if (pair[1], pair[0]) in pairs:\n            symmetric_pairs.add(pair)\n    return symmetric_pairs"
    ],
    "token_counts": [
      58
    ],
    "generation_times": [
      1.3280153833329678
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 491,
    "prompt": "Write a function to find the sum of geometric progression series.",
    "generated_codes": [
      "def sum_gp(a, n, r):\n    \"\"\"\n    Calculate the sum of the first n terms of a geometric progression.\n\n    Parameters:\n    a (int): The first term of the geometric progression.\n    n (int): The number of terms to sum.\n    r (int): The common ratio of the geometric progression.\n\n    Returns:\n    int: The sum of the first n terms of the geometric progression.\n    \"\"\"\n    if r == 1:\n        # If the common ratio is 1, the sum is simply n times the first term\n        return a * n\n    else:\n        # Use the formula for the sum of a geometric series\n        return a * (1 - r**n) // (1 - r)\n\n# Test cases"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      5.237430531531572
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 492,
    "prompt": "Write a function to search an element in the given array by using binary search.",
    "generated_codes": [
      "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False"
    ],
    "token_counts": [
      439
    ],
    "generation_times": [
      9.940186355262995
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 493,
    "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "generated_codes": [
      "import math\n\ndef calculate_polygons(x, y, width, height, num_polygons):\n    polygons = []\n    hex_height = height * math.sqrt(3) / 2\n    hex_width = width\n\n    for i in range(num_polygons):\n        polygon = []\n        for j in range(6):\n            angle = math.pi / 3 * j\n            dx = hex_width * math.cos(angle)\n            dy = hex_height * math.sin(angle)\n            polygon.append((x + dx, y + dy))\n        polygons.append(polygon)\n        x += width * 1.5\n        y += height * 1.5\n\n    return polygons\n\n# Test cases"
    ],
    "token_counts": [
      1024
    ],
    "generation_times": [
      23.4285821467638
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 494,
    "prompt": "Write a function to convert the given binary tuple to integer.",
    "generated_codes": [
      "def binary_to_integer(binary_tuple):\n    # Convert the binary tuple to a string\n    binary_string = ''.join(map(str, binary_tuple))\n    # Convert the binary string to an integer\n    integer_value = int(binary_string, 2)\n    # Return the integer as a string\n    return str(integer_value)\n\n# Test cases"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      4.007385578006506
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 495,
    "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
    "generated_codes": [
      "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)"
    ],
    "token_counts": [
      144
    ],
    "generation_times": [
      3.2760792933404446
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 496,
    "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef heap_queue_smallest(numbers, n):\n    # Use heapq.nsmallest to find the n smallest numbers\n    return heapq.nsmallest(n, numbers)\n\n# Test cases"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      5.231764871627092
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 497,
    "prompt": "Write a function to find the surface area of a cone.",
    "generated_codes": [
      "import math\n\ndef surfacearea_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    surface_area = base_area + lateral_area\n    return surface_area"
    ],
    "token_counts": [
      75
    ],
    "generation_times": [
      1.7058850675821304
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 498,
    "prompt": "Write a python function to find gcd of two positive integers.",
    "generated_codes": [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases"
    ],
    "token_counts": [
      78
    ],
    "generation_times": [
      1.7728224582970142
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 499,
    "prompt": "Write a function to find the diameter of a circle.",
    "generated_codes": [
      "def diameter_circle(radius):\n    return 2 * radius"
    ],
    "token_counts": [
      20
    ],
    "generation_times": [
      0.4615545682609081
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 500,
    "prompt": "Write a function to concatenate all elements of the given list into a string.",
    "generated_codes": [
      "def concatenate_elements(elements):\n    return ' ' + ' '.join(elements)"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.895223755389452
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 501,
    "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
    "generated_codes": [
      "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b)"
    ],
    "token_counts": [
      52
    ],
    "generation_times": [
      1.1802980527281761
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 502,
    "prompt": "Write a python function to find remainder of two numbers.",
    "generated_codes": [
      "def find(a, b):\n    return a % b"
    ],
    "token_counts": [
      18
    ],
    "generation_times": [
      0.41777392849326134
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 503,
    "prompt": "Write a function to add consecutive numbers of a given list.",
    "generated_codes": [
      "def add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i+1])\n    return result"
    ],
    "token_counts": [
      390
    ],
    "generation_times": [
      8.795297008007765
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 504,
    "prompt": "Write a python function to find the cube sum of first n natural numbers.",
    "generated_codes": [
      "def sum_Of_Series(n):\n    return (n * (n + 1) // 2) ** 2"
    ],
    "token_counts": [
      130
    ],
    "generation_times": [
      2.9437378458678722
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 505,
    "prompt": "Write a function to move all zeroes to the end of the given array.",
    "generated_codes": [
      "def re_order(arr):\n    # Initialize a pointer for the position of the next non-zero element\n    non_zero_index = 0\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is not zero, swap it with the element at non_zero_index\n        if arr[i] != 0:\n            arr[non_zero_index], arr[i] = arr[i], arr[non_zero_index]\n            # Move the non_zero_index forward\n            non_zero_index += 1\n    \n    return arr\n\n# Test cases"
    ],
    "token_counts": [
      313
    ],
    "generation_times": [
      7.067047648131847
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 506,
    "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "generated_codes": [
      "def permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      2.561172518879175
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 507,
    "prompt": "Write a function to remove specific words from a given list.",
    "generated_codes": [
      "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]"
    ],
    "token_counts": [
      206
    ],
    "generation_times": [
      4.676257975399494
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 508,
    "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "generated_codes": [
      "def same_order(list1, list2):\n    # Find common elements in both lists\n    common_elements = [elem for elem in list1 if elem in list2]\n    \n    # Check if the order of common elements in list1 is the same as in list2\n    index = 0\n    for elem in list2:\n        if elem in common_elements:\n            if elem != common_elements[index]:\n                return False\n            index += 1\n            if index == len(common_elements):\n                break\n    \n    return True\n\n# Test cases"
    ],
    "token_counts": [
      202
    ],
    "generation_times": [
      4.692160125821829
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 509,
    "prompt": "Write a python function to find the average of odd numbers till a given odd number.",
    "generated_codes": [
      "def average_Odd(n):\n    if n % 2 == 0:\n        n -= 1  # Ensure n is odd\n    \n    odd_sum = sum(range(1, n + 1, 2))\n    odd_count = (n + 1) // 2\n    \n    return odd_sum // odd_count\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      2.5762254372239113
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 510,
    "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "generated_codes": [
      "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    \n    for num in arr:\n        for i in range(k, num - 1, -1):\n            dp[i] += dp[i - num]\n    \n    return sum(dp) - 1  # Subtract 1 to exclude the empty subsequence\n\n# Test cases"
    ],
    "token_counts": [
      356
    ],
    "generation_times": [
      8.101618681102991
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  }
]