[
  {
    "task_id": 11,
    "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
    "generated_codes": [
      "def remove_Occ(s, c):\n    first_index = s.find(c)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n    last_index = s.rfind(c)\n    if last_index != -1 and last_index != first_index:\n        s = s[:last_index] + s[last_index+1:]\n    return s\n\n# Test cases"
    ],
    "token_counts": [
      164
    ],
    "generation_times": [
      4.013765744864941
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 12,
    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "generated_codes": [
      "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases"
    ],
    "token_counts": [
      211
    ],
    "generation_times": [
      4.5734040178358555
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 13,
    "prompt": "Write a function to count the most common words in a dictionary.",
    "generated_codes": [
      "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return word_counts.most_common()\n\n# Test cases"
    ],
    "token_counts": [
      275
    ],
    "generation_times": [
      5.948839098215103
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 14,
    "prompt": "Write a python function to find the volume of a triangular prism.",
    "generated_codes": [
      "def find_Volume(base, height, length):\n    # calculate the area of the base\n    base_area = (base * height) / 2\n    # calculate the volume of the prism\n    volume = base_area * length\n    return volume"
    ],
    "token_counts": [
      201
    ],
    "generation_times": [
      4.326277669519186
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 15,
    "prompt": "Write a function to split a string at lowercase letters.",
    "generated_codes": [
      "def split_lowerstring(s):\n    return [s[i+1:] for i in range(len(s)) if s[i].islower()]\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      2.8434539511799812
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 16,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "generated_codes": [
      "import re\n\ndef text_lowercase_underscore(text):\n    match = re.search('^[a-z]+_[a-z]+$', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      3.2255697287619114
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 17,
    "prompt": "Write a function to find the perimeter of a square.",
    "generated_codes": [
      "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test cases"
    ],
    "token_counts": [
      68
    ],
    "generation_times": [
      1.4317221455276012
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 18,
    "prompt": "Write a function to remove characters from the first string which are present in the second string.",
    "generated_codes": [
      "def remove_dirty_chars(s1, s2):\n    for char in s2:\n        s1 = s1.replace(char, '')\n    return s1\n\n# Test cases"
    ],
    "token_counts": [
      130
    ],
    "generation_times": [
      2.7613353729248047
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 19,
    "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
    "generated_codes": [
      "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"
    ],
    "token_counts": [
      98
    ],
    "generation_times": [
      2.1907686069607735
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 20,
    "prompt": "Write a function to check if the given number is woodball or not.",
    "generated_codes": [
      "def is_woodall(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    product = 1\n    for d in digits:\n        if d != 0:\n            product *= d\n    return product == n\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.695560522377491
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 21,
    "prompt": "Write a function to find m number of multiples of n.",
    "generated_codes": [
      "def multiples_of_num(m, n):\n    return [i * n for i in range(1, m+1)]\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      2.7927587516605854
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 22,
    "prompt": "Write a function to find the first duplicate element in a given array of integers.",
    "generated_codes": [
      "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Test cases"
    ],
    "token_counts": [
      141
    ],
    "generation_times": [
      3.0795954279601574
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 23,
    "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "generated_codes": [
      "def maximum_Sum(lst):\n    return max(sum(sub_lst) for sub_lst in lst)\n\n# Test cases"
    ],
    "token_counts": [
      157
    ],
    "generation_times": [
      3.4153368547558784
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 24,
    "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
    "generated_codes": [
      "def binary_to_decimal(binary):\n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal"
    ],
    "token_counts": [
      152
    ],
    "generation_times": [
      3.295019768178463
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 25,
    "prompt": "Write a python function to find the product of non-repeated elements in a given array.",
    "generated_codes": [
      "from collections import Counter\n\ndef find_Product(arr, n):\n    # Count the frequency of each element in the array\n    freq = Counter(arr)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the array\n    for i in range(n):\n        # If the frequency of the current element is 1, multiply the product by it\n        if freq[arr[i]] == 1:\n            product *= arr[i]\n    \n    # Return the product\n    return product"
    ],
    "token_counts": [
      216
    ],
    "generation_times": [
      4.684654273092747
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 26,
    "prompt": "Write a function to check if the given tuple list has all k elements.",
    "generated_codes": [
      "def check_k_elements(tuples_list, k):\n    for tup in tuples_list:\n        if tup.count(k) == 0:\n            return False\n    return True"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      2.9186837188899517
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 27,
    "prompt": "Write a python function to remove all digits from a list of strings.",
    "generated_codes": [
      "def remove(lst):\n    return [''.join(filter(lambda x: not x.isdigit(), word)) for word in lst]\n\n# Test cases"
    ],
    "token_counts": [
      126
    ],
    "generation_times": [
      2.7652692645788193
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 28,
    "prompt": "Write a python function to find binomial co-efficient.",
    "generated_codes": [
      "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k > n//2:\n        k = n-k\n    res = 1\n    for i in range(k):\n        res = res * (n-i) // (i+1)\n    return res\n\n# Test cases"
    ],
    "token_counts": [
      137
    ],
    "generation_times": [
      2.925318345427513
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 29,
    "prompt": "Write a python function to find the element occurring odd number of times.",
    "generated_codes": [
      "def get_Odd_Occurrence(arr, n):\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res"
    ],
    "token_counts": [
      326
    ],
    "generation_times": [
      7.119161136448383
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 30,
    "prompt": "Write a python function to count all the substrings starting and ending with same characters.",
    "generated_codes": [
      "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      142
    ],
    "generation_times": [
      3.1087338030338287
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 31,
    "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "generated_codes": [
      "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Flatten the lists and count the occurrences of each integer\n    counts = Counter(num for sublist in lists for num in sublist)\n    \n    # Use a heap to get the top k most frequent integers\n    heap = [(-count, num) for num, count in counts.items()]\n    heapq.heapify(heap)\n    \n    return [heapq.heappop(heap)[1] for _ in range(k)]"
    ],
    "token_counts": [
      336
    ],
    "generation_times": [
      7.303321078419685
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 32,
    "prompt": "Write a python function to find the largest prime factor of a given number.",
    "generated_codes": [
      "def max_Prime_Factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n    if n > 2:\n        max_prime = n\n    return int(max_prime)\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      3.636021874845028
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 33,
    "prompt": "Write a python function to convert a decimal number to binary number.",
    "generated_codes": [
      "def decimal_To_Binary(n):\n    return bin(n).replace(\"0b\", \"\")\n\n# Test cases"
    ],
    "token_counts": [
      86
    ],
    "generation_times": [
      1.942779529839754
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 34,
    "prompt": "Write a python function to find the missing number in a sorted array.",
    "generated_codes": [
      "def find_missing(arr, n):\n    for i in range(n-1):\n        if arr[i+1] - arr[i] > 1:\n            return arr[i] + 1\n    return -1\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.722018975764513
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 35,
    "prompt": "Write a function to find the n-th rectangular number.",
    "generated_codes": [
      "def find_rect_num(n):\n    return n*(n+1)*(n+2)//2\n\n# Test cases"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      1.662297710776329
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 36,
    "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "generated_codes": [
      "def find_Nth_Digit(n, a, b):\n    # Calculate the proper fraction of a and b\n    fraction = a / b\n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n    # Remove the '0.' at the beginning of the string\n    fraction_str = fraction_str[2:]\n    # Check if n is out of range\n    if n > len(fraction_str):\n        return \"n is out of range\"\n    # Return the nth digit\n    return int(fraction_str[n-1])\n\n# Test cases"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      4.363403990864754
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 37,
    "prompt": "Write a function to sort a given mixed list of integers and strings.",
    "generated_codes": [
      "def sort_mixed_list(lst):\n    return sorted(lst)\n\n# Test cases"
    ],
    "token_counts": [
      217
    ],
    "generation_times": [
      4.749405320733786
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 38,
    "prompt": "Write a function to find the division of first even and odd number of a given list.",
    "generated_codes": [
      "def div_even_odd(lst):\n    even_sum = sum(i for i in lst if i % 2 == 0)\n    odd_sum = sum(i for i in lst if i % 2 != 0)\n    return even_sum // odd_sum if odd_sum != 0 else 'Undefined'\n\n# Test cases"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      3.690291978418827
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 39,
    "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "generated_codes": [
      "from collections import Counter\nimport heapq\n\ndef rearange_string(s: str) -> str:\n    char_counts = Counter(s)\n    max_heap = []\n    for char, count in char_counts.items():\n        heapq.heappush(max_heap, (-count, char))\n    prev_count, prev_char = 0, ''\n    result = ''\n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result += char\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        count += 1\n        prev_count, prev_char = count, char\n    if len(result) == len(s):\n        return result\n    else:\n        return \"Impossible\"\n\n# Test cases"
    ],
    "token_counts": [
      263
    ],
    "generation_times": [
      5.645346969366074
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 40,
    "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "generated_codes": [
      "from collections import Counter\n\ndef flatten(lst):\n    return [item for sublist in lst for item in sublist]\n\ndef freq_element(lst):\n    flat_list = flatten(lst)\n    return dict(Counter(flat_list))"
    ],
    "token_counts": [
      141
    ],
    "generation_times": [
      3.1051001995801926
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 41,
    "prompt": "Write a function to filter even numbers using lambda function.",
    "generated_codes": [
      "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n# Test cases"
    ],
    "token_counts": [
      167
    ],
    "generation_times": [
      3.6598241068422794
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 42,
    "prompt": "Write a python function to find the sum of repeated elements in a given array.",
    "generated_codes": [
      "def find_Sum(arr):\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    sum_repeated = 0\n    for key, value in count_dict.items():\n        if value > 1:\n            sum_repeated += key * value\n    return sum_repeated\n\n# Test cases"
    ],
    "token_counts": [
      170
    ],
    "generation_times": [
      3.717448566108942
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 43,
    "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "generated_codes": [
      "import re\n\ndef text_match(text):\n    pattern = '^[a-z]+_[a-z]+$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      129
    ],
    "generation_times": [
      2.8208682388067245
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 44,
    "prompt": "Write a function that matches a word at the beginning of a string.",
    "generated_codes": [
      "def text_match_string(text):\n    if text.lstrip().startswith('python'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      105
    ],
    "generation_times": [
      2.294465344399214
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 45,
    "prompt": "Write a function to find the gcd of the given array elements.",
    "generated_codes": [
      "from math import gcd\nfrom functools import reduce\n\ndef get_gcd(lst):\n    return reduce(lambda a,b: gcd(a,b), lst)"
    ],
    "token_counts": [
      236
    ],
    "generation_times": [
      5.155281830579042
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 46,
    "prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
    "generated_codes": [
      "def test_distinct(lst):\n    return len(lst) == len(set(lst))"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.9035856053233147
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 47,
    "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "generated_codes": [
      "def compute_Last_Digit(a, b):\n    if a < b:\n        return 0\n    else:\n        return a % 10"
    ],
    "token_counts": [
      408
    ],
    "generation_times": [
      8.894345324486494
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 48,
    "prompt": "Write a python function to set all odd bits of a given number.",
    "generated_codes": [
      "def odd_bit_set_number(n):\n    return n | 0b10101010101010101010101010101010\n\n# Test cases"
    ],
    "token_counts": [
      229
    ],
    "generation_times": [
      5.006803307682276
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 49,
    "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "generated_codes": [
      "def specified_element(lst, index):\n    return [sublist[index] for sublist in lst]"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      1.7539559118449688
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 50,
    "prompt": "Write a function to find the list with minimum length using lambda function.",
    "generated_codes": [
      "def min_length_list(lst):\n    min_len = min(map(len, lst))\n    min_list = [x for x in lst if len(x) == min_len]\n    return min_len, min_list"
    ],
    "token_counts": [
      136
    ],
    "generation_times": [
      2.908296260982752
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 51,
    "prompt": "Write a function to print check if the triangle is equilateral or not.",
    "generated_codes": [
      "def check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      97
    ],
    "generation_times": [
      2.0724864713847637
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 52,
    "prompt": "Write a function to caluclate area of a parallelogram.",
    "generated_codes": [
      "def parallelogram_area(base, height):\n    return base * height\n\n# Test cases"
    ],
    "token_counts": [
      84
    ],
    "generation_times": [
      1.7933315448462963
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 53,
    "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "generated_codes": [
      "def check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test cases"
    ],
    "token_counts": [
      94
    ],
    "generation_times": [
      2.0092110969126225
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 54,
    "prompt": "Write a function to sort the given array by using counting sort.",
    "generated_codes": [
      "def counting_sort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\n    for num in arr:\n        count[num] += 1\n\n    sorted_arr = []\n    for i, frequency in enumerate(count):\n        sorted_arr.extend([i] * frequency)\n\n    return sorted_arr"
    ],
    "token_counts": [
      176
    ],
    "generation_times": [
      3.755651541054249
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 55,
    "prompt": "Write a function to find t-nth term of geometric series.",
    "generated_codes": [
      "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))"
    ],
    "token_counts": [
      247
    ],
    "generation_times": [
      5.270018916577101
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 56,
    "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
    "generated_codes": [
      "def check(n):\n    # Convert the number to a string to reverse it\n    str_n = str(n)\n    # Reverse the string\n    reversed_str_n = str_n[::-1]\n    # Convert the reversed string back to an integer\n    reversed_n = int(reversed_str_n)\n    # Check if the number is one less than twice its reverse\n    return n == (2 * reversed_n) - 1\n\n# Test cases"
    ],
    "token_counts": [
      150
    ],
    "generation_times": [
      3.197409972548485
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 57,
    "prompt": "Write a python function to find the largest number that can be formed with the given digits.",
    "generated_codes": [
      "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    res = 0\n    for i in arr:\n        res = res * 10 + i\n    return res\n\n# Test cases"
    ],
    "token_counts": [
      127
    ],
    "generation_times": [
      2.7008008398115635
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 58,
    "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
    "generated_codes": [
      "def opposite_Signs(x, y):\n    return (x ^ y) < 0"
    ],
    "token_counts": [
      202
    ],
    "generation_times": [
      4.3035892359912395
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 59,
    "prompt": "Write a function to find the nth octagonal number.",
    "generated_codes": [
      "def is_octagonal(n):\n    return n*(7*n-5)//2\n\n# Test cases"
    ],
    "token_counts": [
      73
    ],
    "generation_times": [
      1.55669517070055
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 60,
    "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "generated_codes": [
      "def max_len_sub(arr, n):\n    if n == 1:\n        return 1\n\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)"
    ],
    "token_counts": [
      359
    ],
    "generation_times": [
      7.6246516443789005
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 61,
    "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "generated_codes": [
      "def count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == j - i + 1:\n                count += 1\n    return count"
    ],
    "token_counts": [
      280
    ],
    "generation_times": [
      5.936925552785397
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 62,
    "prompt": "Write a python function to find smallest number in a list.",
    "generated_codes": [
      "def smallest_num(lst):\n    return min(lst)\n\n# Test cases"
    ],
    "token_counts": [
      94
    ],
    "generation_times": [
      2.001823503524065
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 63,
    "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "generated_codes": [
      "def max_difference(lst):\n    return max(max(pair) - min(pair) for pair in lst)\n\n# Test cases"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.3661807142198086
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 64,
    "prompt": "Write a function to sort a list of tuples using lambda.",
    "generated_codes": [
      "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases"
    ],
    "token_counts": [
      218
    ],
    "generation_times": [
      4.642703797668219
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 65,
    "prompt": "Write a function of recursion list sum.",
    "generated_codes": [
      "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n\n# Test cases"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      3.5467732064425945
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 66,
    "prompt": "Write a python function to count positive numbers in a list.",
    "generated_codes": [
      "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    ],
    "token_counts": [
      44
    ],
    "generation_times": [
      0.9160572551190853
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 67,
    "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
    "generated_codes": [
      "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    ],
    "token_counts": [
      416
    ],
    "generation_times": [
      8.710633110255003
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 68,
    "prompt": "Write a python function to check whether the given array is monotonic or not.",
    "generated_codes": [
      "def is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        increasing = decreasing = True\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                decreasing = False\n            elif arr[i] > arr[i + 1]:\n                increasing = False\n            if not increasing and not decreasing:\n                return False\n        return True"
    ],
    "token_counts": [
      182
    ],
    "generation_times": [
      3.87546893581748
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 69,
    "prompt": "Write a function to check whether a list contains the given sublist or not.",
    "generated_codes": [
      "def is_sublist(main_list, sublist):\n    return sublist in main_list"
    ],
    "token_counts": [
      29
    ],
    "generation_times": [
      0.6219485364854336
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 70,
    "prompt": "Write a function to find whether all the given tuples have equal length or not.",
    "generated_codes": [
      "def get_equal(tuples, length):\n    for t in tuples:\n        if len(t) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n\n# Test cases"
    ],
    "token_counts": [
      188
    ],
    "generation_times": [
      4.006391320377588
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 71,
    "prompt": "Write a function to sort a list of elements using comb sort.",
    "generated_codes": [
      "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n            i += 1\n    return lst\n\n# Test cases"
    ],
    "token_counts": [
      273
    ],
    "generation_times": [
      5.804211255162954
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 72,
    "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "generated_codes": [
      "def dif_Square(n):\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i - j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      114
    ],
    "generation_times": [
      2.421942111104727
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 73,
    "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
    "generated_codes": [
      "import re\n\ndef multiple_split(s):\n    return re.split('\\n|\\*', s)\n\n# Test cases"
    ],
    "token_counts": [
      179
    ],
    "generation_times": [
      3.7423525117337704
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 74,
    "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
    "generated_codes": [
      "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    color_pattern_map = {}\n    pattern_color_map = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_pattern_map:\n            color_pattern_map[color] = pattern\n        if pattern not in pattern_color_map:\n            pattern_color_map[pattern] = color\n        if color_pattern_map[color] != pattern or pattern_color_map[pattern] != color:\n            return False\n    return True"
    ],
    "token_counts": [
      228
    ],
    "generation_times": [
      4.798341613262892
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 75,
    "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "generated_codes": [
      "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return str(result)\n\n# Test cases"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      4.904559817165136
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 76,
    "prompt": "Write a python function to count the number of squares in a rectangle.",
    "generated_codes": [
      "def count_Squares(length, width):\n    return length * width"
    ],
    "token_counts": [
      24
    ],
    "generation_times": [
      0.5147477872669697
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 77,
    "prompt": "Write a python function to find the difference between sum of even and odd digits.",
    "generated_codes": [
      "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum != odd_sum\n\n# Test cases"
    ],
    "token_counts": [
      136
    ],
    "generation_times": [
      2.874818906188011
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 78,
    "prompt": "Write a python function to find number of integers with odd number of set bits.",
    "generated_codes": [
      "def count_With_Odd_SetBits(n):\n    def count_set_bits(num):\n        count = 0\n        while num:\n            num = num & (num - 1)\n            count += 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_set_bits(i) % 2 != 0:\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      167
    ],
    "generation_times": [
      3.523855932056904
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 79,
    "prompt": "Write a python function to check whether the length of the word is odd or not.",
    "generated_codes": [
      "def word_len(word):\n    return len(word) % 2 == 1\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      1.3126176334917545
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 80,
    "prompt": "Write a function to find the nth tetrahedral number.",
    "generated_codes": [
      "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n\n# Test cases"
    ],
    "token_counts": [
      85
    ],
    "generation_times": [
      1.8052355572581291
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 81,
    "prompt": "Write a function to zip the two given tuples.",
    "generated_codes": [
      "def zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n\n# Test cases"
    ],
    "token_counts": [
      266
    ],
    "generation_times": [
      6.70965551584959
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 82,
    "prompt": "Write a function to find the volume of a sphere.",
    "generated_codes": [
      "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      3.17802631855011
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 83,
    "prompt": "Write a python function to find the character made by adding all the characters of the given string.",
    "generated_codes": [
      "def get_Char(s):\n    return chr((sum(map(ord, s)) % 26) + 97)\n\n# Test cases"
    ],
    "token_counts": [
      221
    ],
    "generation_times": [
      5.741259507834911
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 84,
    "prompt": "Write a function to find the n-th number in newman conway sequence.",
    "generated_codes": [
      "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[sequence[i-1]-1] + sequence[i-sequence[i-1]])\n    return sequence[-1]\n\n# Test cases"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      7.134460221976042
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 85,
    "prompt": "Write a function to find the surface area of a sphere.",
    "generated_codes": [
      "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n# Test cases"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      3.29886008054018
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 86,
    "prompt": "Write a function to find nth centered hexagonal number.",
    "generated_codes": [
      "def centered_hexagonal_number(n):\n    return n * (5 * n - 3) // 2"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      4.638757117092609
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 87,
    "prompt": "Write a function to merge three dictionaries into a single expression.",
    "generated_codes": [
      "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            if key in merged_dict and merged_dict[key] != value:\n                merged_dict[key] = [merged_dict[key], value]\n            else:\n                merged_dict[key] = value\n    return merged_dict\n\n# Test cases"
    ],
    "token_counts": [
      408
    ],
    "generation_times": [
      10.657540876418352
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 88,
    "prompt": "Write a function to get the frequency of the elements in a list.",
    "generated_codes": [
      "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    ],
    "token_counts": [
      369
    ],
    "generation_times": [
      9.659582447260618
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 89,
    "prompt": "Write a function to find the closest smaller number than n.",
    "generated_codes": [
      "def closest_num(n):\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Find the length of the number\n    num_len = len(num_str)\n    \n    # If the number is less than 10, return 0\n    if num_len == 1:\n        return 0\n    \n    # If the number is greater than or equal to 10, find the closest smaller number\n    else:\n        # If the first digit is greater than 1, subtract 1 from the first digit and append 9s to the rest of the digits\n        if int(num_str[0]) > 1:\n            return int(num_str[0]) - 1 + 10**(num_len - 1) - 1\n        \n        # If the first digit is 1, find the closest smaller number by subtracting 1 from the second digit and appending 9s to the rest of the digits\n        else:\n            return int(num_str[1]) - 1 + 10**(num_len - 2) - 1\n\n# Test cases"
    ],
    "token_counts": [
      303
    ],
    "generation_times": [
      7.9558530412614346
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 90,
    "prompt": "Write a python function to find the length of the longest word.",
    "generated_codes": [
      "def len_log(words):\n    return max(len(word) for word in words)\n\n# Test cases"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      2.1708125360310078
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 91,
    "prompt": "Write a function to check if a substring is present in a given list of string values.",
    "generated_codes": [
      "def find_substring(lst, sub):\n    for string in lst:\n        if sub in string:\n            return True\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      127
    ],
    "generation_times": [
      3.3256764076650143
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 92,
    "prompt": "Write a function to check whether the given number is undulating or not.",
    "generated_codes": [
      "def is_undulating(n):\n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff1 = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        diff = int(n[i]) - int(n[i-1])\n        if diff != diff1:\n            return False\n        diff1 = diff\n    return True\n\n# Test cases"
    ],
    "token_counts": [
      160
    ],
    "generation_times": [
      4.183601412922144
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 93,
    "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
    "generated_codes": [
      "def power(a, b):\n    return a ** b\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      1.5801391638815403
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 94,
    "prompt": "Write a function to extract the index minimum value record from the given tuples.",
    "generated_codes": [
      "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n\n# Test cases"
    ],
    "token_counts": [
      159
    ],
    "generation_times": [
      3.8463845141232014
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 95,
    "prompt": "Write a python function to find the minimum length of sublist.",
    "generated_codes": [
      "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)\n\n# Test cases"
    ],
    "token_counts": [
      117
    ],
    "generation_times": [
      2.566547691822052
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 96,
    "prompt": "Write a python function to find the number of divisors of a given integer.",
    "generated_codes": [
      "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      1.8357138447463512
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 97,
    "prompt": "Write a function to find frequency count of list of lists.",
    "generated_codes": [
      "from collections import Counter\n\ndef frequency_lists(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return dict(Counter(flat_list))\n\n# Test cases"
    ],
    "token_counts": [
      363
    ],
    "generation_times": [
      7.759517580270767
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 98,
    "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "generated_codes": [
      "def multiply_num(num_list):\n    product = 1\n    for num in num_list:\n        product *= num\n    return product / len(num_list)\n\n# Test cases"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.7337384186685085
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 99,
    "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
    "generated_codes": [
      "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n\n# Test cases"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.853263258934021
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 100,
    "prompt": "Write a function to find the next smallest palindrome of a specified number.",
    "generated_codes": [
      "def next_smallest_palindrome(num):\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num"
    ],
    "token_counts": [
      156
    ],
    "generation_times": [
      3.3486586809158325
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 101,
    "prompt": "Write a function to find the kth element in the given array.",
    "generated_codes": [
      "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.7008855752646923
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 102,
    "prompt": "Write a function to convert snake case string to camel case string.",
    "generated_codes": [
      "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\n# Test cases"
    ],
    "token_counts": [
      114
    ],
    "generation_times": [
      2.6538933366537094
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 103,
    "prompt": "Write a function to find eulerian number a(n, m).",
    "generated_codes": [
      "def eulerian_num(n, m):\n    if m == 0 or m == n:\n        return 1\n    if n == 0:\n        return 0\n    return (m * eulerian_num(n - 1, m) + eulerian_num(n, m - 1))\n\n# Test cases"
    ],
    "token_counts": [
      131
    ],
    "generation_times": [
      2.8133970499038696
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 104,
    "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "generated_codes": [
      "def sort_sublists(lst):\n    return [sorted(sublist, key=lambda s: s.strip()) for sublist in lst]"
    ],
    "token_counts": [
      297
    ],
    "generation_times": [
      6.419198632240295
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 105,
    "prompt": "Write a python function to count true booleans in the given list.",
    "generated_codes": [
      "def count(lst):\n    return sum(lst)"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      1.8014148585498333
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 106,
    "prompt": "Write a function to add the given list to the given tuples.",
    "generated_codes": [
      "def add_lists(lst, tup):\n    return tup + tuple(lst)\n\n# Test cases"
    ],
    "token_counts": [
      152
    ],
    "generation_times": [
      3.2603098154067993
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 107,
    "prompt": "Write a python function to count hexadecimal numbers for a given range.",
    "generated_codes": [
      "def count_Hexadecimal(start, end):\n    hex_count = 0\n    for i in range(start, end+1):\n        hex_num = hex(i)\n        if len(hex_num) - 2 <= 2:\n            hex_count += 1\n    return hex_count\n\n# Test cases"
    ],
    "token_counts": [
      135
    ],
    "generation_times": [
      2.887872099876404
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 108,
    "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef merge_sorted_list(lsts):\n    heap = []\n    for lst in lsts:\n        for item in lst:\n            heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    ],
    "token_counts": [
      302
    ],
    "generation_times": [
      6.475853785872459
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 109,
    "prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
    "generated_codes": [
      "def odd_Equivalent(binary_string, length):\n    # Initialize count of rotations\n    count = 0\n\n    # Traverse through the binary string\n    for i in range(length):\n        # Check if the binary string is odd\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n        # Rotate the binary string\n        binary_string = binary_string[1:] + binary_string[0]\n\n    return count"
    ],
    "token_counts": [
      217
    ],
    "generation_times": [
      4.631572678685188
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 110,
    "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "generated_codes": [
      "def extract_missing(ranges, start, end):\n    ranges = sorted(ranges)\n    missing_ranges = []\n\n    if ranges[0][0] > start:\n        missing_ranges.append((start, ranges[0][0]-1))\n\n    for i in range(len(ranges)-1):\n        if ranges[i][1]+1 < ranges[i+1][0]:\n            missing_ranges.append((ranges[i][1]+1, ranges[i+1][0]-1))\n\n    if ranges[-1][1] < end:\n        missing_ranges.append((ranges[-1][1]+1, end))\n\n    return missing_ranges"
    ],
    "token_counts": [
      306
    ],
    "generation_times": [
      6.555017605423927
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 111,
    "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "generated_codes": [
      "def common_in_nested_lists(nested_list):\n    # Find the intersection of all lists in the nested list\n    common_elements = set(nested_list[0])\n    for lst in nested_list[1:]:\n        common_elements = common_elements.intersection(lst)\n    return list(common_elements)"
    ],
    "token_counts": [
      163
    ],
    "generation_times": [
      3.493139274418354
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 112,
    "prompt": "Write a python function to find the perimeter of a cylinder.",
    "generated_codes": [
      "import math\n\ndef perimeter(r, h):\n    return 2*math.pi*r*(r+h)\n\n# Test cases"
    ],
    "token_counts": [
      74
    ],
    "generation_times": [
      1.5868188850581646
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 113,
    "prompt": "Write a function to check if a string represents an integer or not.",
    "generated_codes": [
      "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      77
    ],
    "generation_times": [
      1.6517005898058414
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 114,
    "prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
    "generated_codes": [
      "from collections import Counter\n\ndef assign_freq(lst):\n    # Convert each tuple to a string\n    str_lst = [str(t) for t in lst]\n    \n    # Count the frequency of each string\n    freq_counter = Counter(str_lst)\n    \n    # Convert each string back to a tuple and append the frequency\n    freq_lst = [tuple(eval(s) + (freq,)) for s, freq in freq_counter.items()]\n    \n    # Sort the list of tuples by the first element of each tuple\n    freq_lst.sort(key=lambda x: x[0])\n    \n    return str(freq_lst)"
    ],
    "token_counts": [
      254
    ],
    "generation_times": [
      5.448273103684187
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 115,
    "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
    "generated_codes": [
      "def empty_dict(lst):\n    for d in lst:\n        if d:\n            return False\n    return True"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.8587472587823868
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 116,
    "prompt": "Write a function to convert a given tuple of positive integers into an integer.",
    "generated_codes": [
      "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Test cases"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      1.9457894563674927
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 117,
    "prompt": "Write a function to convert all possible convertible elements in the list to float.",
    "generated_codes": [
      "def list_to_float(lst):\n    return [(float(i), float(j)) for i, j in lst]\n\n# Test cases"
    ],
    "token_counts": [
      317
    ],
    "generation_times": [
      6.790901020169258
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 118,
    "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "generated_codes": [
      "def string_to_list(s):\n    return s.split()\n\n# Test cases"
    ],
    "token_counts": [
      90
    ],
    "generation_times": [
      1.9284915812313557
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 119,
    "prompt": "Write a python function to find the element that appears only once in a sorted array.",
    "generated_codes": [
      "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] == nums[mid ^ 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return nums[left]\n\n# Test cases"
    ],
    "token_counts": [
      163
    ],
    "generation_times": [
      3.4920972622931004
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 120,
    "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "generated_codes": [
      "def max_product_tuple(lst):\n    max_product = 0\n    for tup in lst:\n        product = tup[0]*tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      4.070516500622034
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 121,
    "prompt": "Write a function to find the triplet with sum of the given array",
    "generated_codes": [
      "def check_triplet(arr, x, y, z):\n    arr.sort()\n    for i in range(len(arr)-2):\n        start = i + 1\n        end = len(arr) - 1\n        while start < end:\n            if arr[i] + arr[start] + arr[end] == x + y + z:\n                return True\n            elif arr[i] + arr[start] + arr[end] < x + y + z:\n                start += 1\n            else:\n                end -= 1\n    return False"
    ],
    "token_counts": [
      376
    ],
    "generation_times": [
      7.9388800747692585
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 122,
    "prompt": "Write a function to find n’th smart number.",
    "generated_codes": [
      "def smartNumber(n):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_smart(n):\n        if n < 1:\n            return False\n        for i in range(2, n):\n            if is_prime(i) and n % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_smart(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      4.548029258847237
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 123,
    "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "generated_codes": [
      "def sum_of_divisors(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                sum = sum + i + n//i\n            else:\n                sum = sum + i\n            i += 1\n    return sum\n\ndef amicable_numbers_sum(limit):\n    sum = 0\n    for i in range(1, limit+1):\n        j = sum_of_divisors(i)\n        if (j > i and sum_of_divisors(j) == i):\n            sum += i\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      235
    ],
    "generation_times": [
      5.0539813712239265
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 124,
    "prompt": "Write a function to get the angle of a complex number.",
    "generated_codes": [
      "import cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)\n\n# Test cases"
    ],
    "token_counts": [
      92
    ],
    "generation_times": [
      2.0044699646532536
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 125,
    "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "generated_codes": [
      "def find_length(binary_string, length):\n    max_diff = 0\n    for i in range(length):\n        zero_count = 0\n        one_count = 0\n        for j in range(i, length):\n            if binary_string[j] == '0':\n                zero_count += 1\n            else:\n                one_count += 1\n            if zero_count == one_count:\n                max_diff = max(max_diff, zero_count + one_count)\n    return max_diff\n\n# Test cases"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      4.300408326089382
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 126,
    "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
    "generated_codes": [
      "def sum_common_divisors(a, b):\n    def divisors(n):\n        i = 1\n        divs = []\n        while i <= n:\n            if n % i == 0:\n                divs.append(i)\n            i += 1\n        return divs\n\n    return sum(set(divisors(a)) & set(divisors(b)))\n\n# Test cases"
    ],
    "token_counts": [
      161
    ],
    "generation_times": [
      3.447471048682928
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 127,
    "prompt": "Write a function to multiply two integers without using the * operator in python.",
    "generated_codes": [
      "def multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    # If y is negative, we negate the result\n    if y < 0:\n        result = -result\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      120
    ],
    "generation_times": [
      2.5716761462390423
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 128,
    "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
    "generated_codes": [
      "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]\n\n# Test cases"
    ],
    "token_counts": [
      99
    ],
    "generation_times": [
      2.1251309104263783
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 129,
    "prompt": "Write a function to calculate magic square.",
    "generated_codes": [
      "def magic_square_test(square):\n    # Get the size of the square\n    size = len(square)\n\n    # Calculate the sum of the first row\n    magic_constant = sum(square[0])\n\n    # Check the sum of each row\n    for row in square:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check the sum of each column\n    for col in range(size):\n        if sum(square[i][col] for i in range(size)) != magic_constant:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(square[i][i] for i in range(size)) != magic_constant:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(square[i][size - i - 1] for i in range(size)) != magic_constant:\n        return False\n\n    return True\n\n# Test cases"
    ],
    "token_counts": [
      373
    ],
    "generation_times": [
      7.990777973085642
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 130,
    "prompt": "Write a function to find the item with maximum frequency in a given list.",
    "generated_codes": [
      "def max_occurrences(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    max_freq = max(count_dict.values())\n    max_freq_num = [num for num, freq in count_dict.items() if freq == max_freq]\n    return (max_freq_num[0], max_freq)"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      5.536248616874218
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 131,
    "prompt": "Write a python function to reverse only the vowels of a given string.",
    "generated_codes": [
      "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_s = [c for c in s if c in vowels]\n    return \"\".join(vowels_in_s[::-1] + [c for c in s if c not in vowels])\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      2.826263915747404
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 132,
    "prompt": "Write a function to convert tuple to a string.",
    "generated_codes": [
      "def tup_string(tup):\n    return ''.join(tup)\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.595323611050844
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 133,
    "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "generated_codes": [
      "def sum_negativenum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n# Test cases"
    ],
    "token_counts": [
      173
    ],
    "generation_times": [
      3.694436486810446
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 134,
    "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "generated_codes": [
      "def check_last(arr, p, q):\n    # Perform operation p times\n    for _ in range(p):\n        arr[-1] += q\n\n    # Check if last element is even or odd\n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n\n# Test cases"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      3.2421916499733925
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 135,
    "prompt": "Write a function to find the nth hexagonal number.",
    "generated_codes": [
      "def hexagonal_num(n):\n    return n*(2*n-1)\n\n# Test cases"
    ],
    "token_counts": [
      69
    ],
    "generation_times": [
      1.4440096877515316
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 136,
    "prompt": "Write a function to calculate electricity bill.",
    "generated_codes": [
      "def cal_electbill(units):\n    if units <= 100:\n        return units * 0.60\n    elif units <= 200:\n        return (100 * 0.60) + ((units - 100) * 0.80)\n    elif units > 200:\n        return (100 * 0.60) + (100 * 0.80) + ((units - 200) * 1.00)\n\n# Test cases"
    ],
    "token_counts": [
      189
    ],
    "generation_times": [
      3.94839583709836
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 137,
    "prompt": "Write a function to find the ration of zeroes in an array of integers.",
    "generated_codes": [
      "def zero_count(arr):\n    zero_count = arr.count(0)\n    total_count = len(arr)\n    return zero_count / total_count"
    ],
    "token_counts": [
      282
    ],
    "generation_times": [
      5.905695218592882
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 138,
    "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "generated_codes": [
      "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n\n# Test cases"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      2.5936924032866955
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 139,
    "prompt": "Write a function to find the circumference of a circle.",
    "generated_codes": [
      "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test cases"
    ],
    "token_counts": [
      238
    ],
    "generation_times": [
      4.974897310137749
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 140,
    "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
    "generated_codes": [
      "def extract_singly(tuples):\n    # Create an empty list to store the elements\n    elements = []\n\n    # Iterate over each tuple\n    for t in tuples:\n        # Iterate over each element in the tuple\n        for e in t:\n            # If the element is not already in the list, add it\n            if e not in elements:\n                elements.append(e)\n\n    return elements\n\n# Test cases"
    ],
    "token_counts": [
      268
    ],
    "generation_times": [
      5.688452363014221
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 141,
    "prompt": "Write a function to sort a list of elements using pancake sort.",
    "generated_codes": [
      "def pancake_sort(lst):\n    for i in range(len(lst), 0, -1):\n        max_idx = lst.index(max(lst[:i]))\n        if max_idx != i - 1:\n            if max_idx != 0:\n                lst[:max_idx+1] = lst[::-1][:max_idx+1]\n            lst[:i] = lst[::-1][:i]\n    return lst\n\n# Test cases"
    ],
    "token_counts": [
      274
    ],
    "generation_times": [
      5.869101729243994
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 142,
    "prompt": "Write a function to count the same pair in three given lists.",
    "generated_codes": [
      "def count_samepair(list1, list2, list3):\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)"
    ],
    "token_counts": [
      328
    ],
    "generation_times": [
      7.02793538197875
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 143,
    "prompt": "Write a function to find number of lists present in the given tuple.",
    "generated_codes": [
      "def find_lists(t):\n    count = 0\n    for i in t:\n        if isinstance(i, list):\n            count += 1\n    return count"
    ],
    "token_counts": [
      151
    ],
    "generation_times": [
      3.229921340942383
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 144,
    "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "generated_codes": [
      "def sum_Pairs(arr, n):\n    arr.sort()\n    sum = 0\n    for i in range(0, n-1, 2):\n        sum += abs(arr[i] - arr[i+1])\n    return sum"
    ],
    "token_counts": [
      247
    ],
    "generation_times": [
      5.290137108415365
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 145,
    "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
    "generated_codes": [
      "def max_Abs_Diff(arr, n):\n    if n == 1:\n        return 0\n    else:\n        arr.sort()\n        return max(abs(arr[i] - arr[i-1]) for i in range(1, n))\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      2.8257875330746174
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 146,
    "prompt": "Write a function to find the ascii value of total characters in a string.",
    "generated_codes": [
      "def ascii_value_string(s):\n    return sum(ord(c) for c in s)\n\n# Test cases"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      1.7816909551620483
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 147,
    "prompt": "Write a function to find the maximum total path sum in the given triangle.",
    "generated_codes": [
      "def max_path_sum(triangle, n, m):\n    for i in range(n-1, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]"
    ],
    "token_counts": [
      145
    ],
    "generation_times": [
      3.1103709787130356
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 148,
    "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "generated_codes": [
      "def sum_digits_twoparts(n):\n    digits = [int(d) for d in str(n)]\n    digits.sort()\n    part1 = int(''.join(map(str, digits[::-2])))\n    part2 = int(''.join(map(str, digits[::-2][::-1])))\n    return part1 + part2\n\n# Test cases"
    ],
    "token_counts": [
      368
    ],
    "generation_times": [
      7.83201077580452
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 149,
    "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "generated_codes": [
      "def longest_subseq_with_diff_one(arr, n):\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)"
    ],
    "token_counts": [
      311
    ],
    "generation_times": [
      6.503138463944197
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 150,
    "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "generated_codes": [
      "def does_Contain_B(a, b, c):\n    # The function will return True if b is present in the sequence, else False\n    # The sequence is defined as: a, a+b, a+2b, a+3b, ...\n    # We can solve this by checking if c is a multiple of b\n    return c % b == 0\n\n# Test cases"
    ],
    "token_counts": [
      145
    ],
    "generation_times": [
      3.0433980748057365
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 151,
    "prompt": "Write a python function to check whether the given number is co-prime or not.",
    "generated_codes": [
      "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\n# Test cases"
    ],
    "token_counts": [
      116
    ],
    "generation_times": [
      2.4875927977263927
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 152,
    "prompt": "Write a function to sort the given array by using merge sort.",
    "generated_codes": [
      "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    return merge(merge_sort(left_half), merge_sort(right_half))\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    while left_index < len(left):\n        merged.append(left[left_index])\n        left_index += 1\n\n    while right_index < len(right):\n        merged.append(right[right_index])\n        right_index += 1\n\n    return merged\n\n# Test cases"
    ],
    "token_counts": [
      411
    ],
    "generation_times": [
      8.821386333554983
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 153,
    "prompt": "Write a function to find the vertex of a parabola.",
    "generated_codes": [
      "def parabola_vertex(a, b, c):\n    h = -b / (2 * a)\n    k = (4*a*c - b**2) / (4*a)\n    return (h, k)\n\n# Test cases"
    ],
    "token_counts": [
      172
    ],
    "generation_times": [
      3.6823655366897583
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 154,
    "prompt": "Write a function to extract every specified element from a given two dimensional list.",
    "generated_codes": [
      "def specified_element(lst, n):\n    return [sub[n] for sub in lst]\n\n# Test cases"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.274572167545557
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 155,
    "prompt": "Write a python function to toggle all even bits of a given number.",
    "generated_codes": [
      "def even_bit_toggle_number(n):\n    binary = bin(n)[2:]\n    toggled_binary = ''.join(['1' if b == '0' else '0' for b in binary])\n    return int(toggled_binary, 2)\n\n# Test cases"
    ],
    "token_counts": [
      122
    ],
    "generation_times": [
      2.6217412874102592
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 156,
    "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "generated_codes": [
      "def tuple_int_str(tup):\n    return tuple(tuple(int(i) for i in inner) for inner in tup)\n\n# Test cases"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      4.142487555742264
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 157,
    "prompt": "Write a function to reflect the run-length encoding from a list.",
    "generated_codes": [
      "def encode_list(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            i += 1\n            count += 1\n        result.append([count, lst[i]])\n        i += 1\n    return result"
    ],
    "token_counts": [
      375
    ],
    "generation_times": [
      8.111418794840574
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 158,
    "prompt": "Write a python function to find k number of operations required to make all elements equal.",
    "generated_codes": [
      "def min_Ops(arr, n, k):\n    if k == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    arr.sort()\n    res = float('inf')\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            continue\n        res = min(res, arr[i] + k)\n    return res if res < float('inf') else -1"
    ],
    "token_counts": [
      320
    ],
    "generation_times": [
      6.856531567871571
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 159,
    "prompt": "Write a function to print the season for the given month and day.",
    "generated_codes": [
      "def month_season(month, day):\n    if month in ('January', 'February'):\n        return 'winter'\n    elif month == 'March' and day > 19:\n        return 'spring'\n    elif month in ('April', 'May'):\n        return 'spring'\n    elif month == 'June' and day > 20:\n        return 'summer'\n    elif month in ('July', 'August'):\n        return 'summer'\n    elif month == 'September' and day > 21:\n        return 'autumn'\n    elif month in ('October', 'November'):\n        return 'autumn'\n    else:\n        return 'winter'\n\n# Test cases"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      4.948392949998379
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 160,
    "prompt": "Write a function to find x and y that satisfies ax + by = n.",
    "generated_codes": [
      "def solution(a, b, n):\n    for x in range(n//a + 1):\n        y = (n - a*x) / b\n        if y == int(y):\n            return ('x = ', x, ', y = ', int(y))\n    return 'No solution'\n\n# Test cases"
    ],
    "token_counts": [
      153
    ],
    "generation_times": [
      3.2861529663205147
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 161,
    "prompt": "Write a function to remove all elements from a given list present in another list.",
    "generated_codes": [
      "def remove_elements(lst, to_remove):\n    return [x for x in lst if x not in to_remove]"
    ],
    "token_counts": [
      93
    ],
    "generation_times": [
      2.0083963721990585
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 162,
    "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "generated_codes": [
      "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      3.730671990662813
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 163,
    "prompt": "Write a function to calculate the area of a regular polygon.",
    "generated_codes": [
      "import math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Function to calculate the area of a regular polygon.\n    n: number of sides\n    s: length of a side\n    \"\"\"\n    return (0.25 * n * s**2) / math.tan(math.pi / n)\n\n# Test cases"
    ],
    "token_counts": [
      178
    ],
    "generation_times": [
      3.817912135273218
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 164,
    "prompt": "Write a python function to check whether the sum of divisors are same or not.",
    "generated_codes": [
      "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef areEquivalent(num1, num2):\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n# Test cases"
    ],
    "token_counts": [
      138
    ],
    "generation_times": [
      2.967704225331545
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 165,
    "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "generated_codes": [
      "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i].lower() == chr(97 + i):\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      117
    ],
    "generation_times": [
      2.513170003890991
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 166,
    "prompt": "Write a python function to count the pairs with xor as an even number.",
    "generated_codes": [
      "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] ^ arr[j] % 2 == 0:\n                count += 1\n    return count"
    ],
    "token_counts": [
      164
    ],
    "generation_times": [
      3.5167497768998146
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 167,
    "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "generated_codes": [
      "def next_Power_Of_2(n):\n    if n < 0:\n        return \"Input must be a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n# Test cases"
    ],
    "token_counts": [
      119
    ],
    "generation_times": [
      2.5541004426777363
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 168,
    "prompt": "Write a python function to find the frequency of a number in a given array.",
    "generated_codes": [
      "def frequency(arr, num):\n    return arr.count(num)\n\n# Test cases"
    ],
    "token_counts": [
      84
    ],
    "generation_times": [
      1.806415043771267
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 169,
    "prompt": "Write a function to calculate the nth pell number.",
    "generated_codes": [
      "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]\n\n# Test cases"
    ],
    "token_counts": [
      144
    ],
    "generation_times": [
      3.0453874841332436
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 170,
    "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "generated_codes": [
      "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Test cases"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      3.719589602202177
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 171,
    "prompt": "Write a function to find the perimeter of a pentagon.",
    "generated_codes": [
      "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Test cases"
    ],
    "token_counts": [
      73
    ],
    "generation_times": [
      1.5661789439618587
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 172,
    "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "generated_codes": [
      "def count_occurance(s):\n    return s.count('std')\n\n# Test cases"
    ],
    "token_counts": [
      85
    ],
    "generation_times": [
      1.8251750394701958
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 173,
    "prompt": "Write a function to remove everything except alphanumeric characters from a string.",
    "generated_codes": [
      "def remove_splchar(s):\n    return ''.join(e for e in s if e.isalnum())\n\n# Test cases"
    ],
    "token_counts": [
      139
    ],
    "generation_times": [
      2.977736674249172
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 174,
    "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "generated_codes": [
      "def group_keyvalue(lst):\n    result = {}\n    for key, value in lst:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result"
    ],
    "token_counts": [
      130
    ],
    "generation_times": [
      2.7950895838439465
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 175,
    "prompt": "Write a function to verify validity of a string of parentheses.",
    "generated_codes": [
      "def is_valid_parenthese(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n\n# Test cases"
    ],
    "token_counts": [
      160
    ],
    "generation_times": [
      3.4279693849384785
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 176,
    "prompt": "Write a function to find the perimeter of a triangle.",
    "generated_codes": [
      "def perimeter_triangle(a, b, c):\n    return a + b + c\n\n# Test cases"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.8684740588068962
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 177,
    "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "generated_codes": [
      "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef answer(start, end):\n    for i in range(start, end):\n        for j in range(i+1, end+1):\n            if all(lcm(i, j) <= e for e in range(start, end+1)):\n                return (i, j)\n\n# Test cases"
    ],
    "token_counts": [
      175
    ],
    "generation_times": [
      3.74829987809062
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 178,
    "prompt": "Write a function to search some literals strings in a string.",
    "generated_codes": [
      "def string_literals(literals, input_string):\n    for literal in literals:\n        if literal in input_string:\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Test cases"
    ],
    "token_counts": [
      116
    ],
    "generation_times": [
      2.4853039756417274
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 179,
    "prompt": "Write a function to find if the given number is a keith number or not.",
    "generated_codes": [
      "def is_num_keith(n):\n    def to_digits(n):\n        return [int(d) for d in str(n)]\n\n    def is_keith(n):\n        digits = to_digits(n)\n        while len(digits) < n:\n            next_num = sum(digits[-3:])\n            if next_num > n:\n                return False\n            digits.append(next_num)\n        return digits[-1] == n\n\n    return is_keith(n)\n\n# Test cases"
    ],
    "token_counts": [
      183
    ],
    "generation_times": [
      3.9183299988508224
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 180,
    "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
    "generated_codes": [
      "import math\n\ndef distance_lat_long(lat1, long1, lat2, long2):\n    # Convert latitude and longitude from degrees to radians\n    lat1, long1, lat2, long2 = math.radians(lat1), math.radians(long1), math.radians(lat2), math.radians(long2)\n\n    # Earth's radius in kilometers\n    R = 6371\n\n    # Haversine formula\n    lat_diff = lat2 - lat1\n    long_diff = long2 - long1\n    a = math.sin(lat_diff / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(long_diff / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    # Calculate distance\n    distance = R * c\n    return distance\n\n# Test cases"
    ],
    "token_counts": [
      367
    ],
    "generation_times": [
      7.860499430447817
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 181,
    "prompt": "Write a function to find the longest common prefix in the given set of strings.",
    "generated_codes": [
      "def common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n\n    prefix = strings[0]\n    for i in range(1, n):\n        while strings[i].find(prefix) != 0:\n            prefix = prefix[:-1]\n            if prefix == \"\":\n                return \"\"\n    return prefix"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      4.278983324766159
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 182,
    "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "generated_codes": [
      "import re\n\ndef find_character(s):\n    upper = list(re.findall(r'[A-Z]', s))\n    lower = list(re.findall(r'[a-z]', s))\n    special = list(re.findall(r'[^A-Za-z0-9]', s))\n    digit = list(re.findall(r'\\d', s))\n    return upper, lower, special, digit"
    ],
    "token_counts": [
      287
    ],
    "generation_times": [
      6.1405154168605804
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 183,
    "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "generated_codes": [
      "def count_pairs(arr, n, k):\n    arr = sorted(arr)\n    pairs = set()\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.add((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return len(pairs)"
    ],
    "token_counts": [
      270
    ],
    "generation_times": [
      5.776301849633455
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 184,
    "prompt": "Write a function to find all the values in a list that are greater than a specified number.",
    "generated_codes": [
      "def greater_specificnum(lst, num):\n    for i in lst:\n        if i <= num:\n            return False\n    return True\n\n# Test cases"
    ],
    "token_counts": [
      116
    ],
    "generation_times": [
      2.4828207939863205
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 185,
    "prompt": "Write a function to find the focus of a parabola.",
    "generated_codes": [
      "def parabola_focus(a, b, c):\n    # The equation of a parabola is y = ax^2 + bx + c\n    # The focus of the parabola is the point (-b/2a, -b^2/4a + c)\n    x_focus = -b / (2 * a)\n    y_focus = -(b**2) / (4 * a) + c\n    return (x_focus, y_focus)\n\n# Test cases"
    ],
    "token_counts": [
      214
    ],
    "generation_times": [
      4.616960860788822
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 186,
    "prompt": "Write a function to search some literals strings in a string by using regex.",
    "generated_codes": [
      "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text):\n            return 'Matched!'\n    return 'Not Matched!'\n\n# Test cases"
    ],
    "token_counts": [
      149
    ],
    "generation_times": [
      3.2972526140511036
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 187,
    "prompt": "Write a function to find the longest common subsequence for the given two sequences.",
    "generated_codes": [
      "def longest_common_subsequence(X, Y, m, n):\n    LCS_table = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                LCS_table[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                LCS_table[i][j] = LCS_table[i-1][j-1] + 1\n            else:\n                LCS_table[i][j] = max(LCS_table[i-1][j], LCS_table[i][j-1])\n\n    return LCS_table[m][n]\n\n# Test cases"
    ],
    "token_counts": [
      282
    ],
    "generation_times": [
      6.107525564730167
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 188,
    "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "generated_codes": [
      "def prod_Square(n):\n    if n < 0:\n        return False\n    for i in range(0, int(n**0.5)+1):\n        for j in range(0, int(n**0.5)+1):\n            if i*i*j*j == n:\n                return True\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.7337265014648438
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 189,
    "prompt": "Write a python function to find the first missing positive number.",
    "generated_codes": [
      "def first_Missing_Positive(nums, size):\n    if 1 not in nums:\n        return 1\n\n    for i in range(size):\n        if nums[i] <= 0 or nums[i] > size:\n            nums[i] = 1\n\n    for i in range(size):\n        a = abs(nums[i])\n        if a == size:\n            nums[0] = -abs(nums[0])\n        else:\n            nums[a] = -abs(nums[a])\n\n    for i in range(1, size):\n        if nums[i] > 0:\n            return i\n\n    if nums[0] > 0:\n        return size\n\n    return size + 1\n\n# Test cases"
    ],
    "token_counts": [
      263
    ],
    "generation_times": [
      5.787358336150646
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 190,
    "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "generated_codes": [
      "def count_Integral_Points(x1, y1, x2, y2):\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate over the range from x1 to x2\n    for i in range(x1, x2+1):\n        # Iterate over the range from y1 to y2\n        for j in range(y1, y2+1):\n            # If the co-ordinates are integral, increment the count\n            if i == int(i) and j == int(j):\n                count += 1\n\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      203
    ],
    "generation_times": [
      5.156694568693638
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 191,
    "prompt": "Write a function to check whether the given month name contains 30 days or not.",
    "generated_codes": [
      "def check_monthnumber(month):\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    if month in thirty_days_months:\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      98
    ],
    "generation_times": [
      2.569054264575243
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 192,
    "prompt": "Write a python function to check whether a string has atleast one letter and one number.",
    "generated_codes": [
      "def check_String(s):\n    return any(char.isalpha() for char in s) and any(char.isdigit() for char in s)\n\n# Test cases"
    ],
    "token_counts": [
      83
    ],
    "generation_times": [
      2.389637228101492
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 193,
    "prompt": "Write a function to remove the duplicates from the given tuple.",
    "generated_codes": [
      "def remove_tuple(tup):\n    return tuple(set(tup))\n\n# Test cases"
    ],
    "token_counts": [
      230
    ],
    "generation_times": [
      6.195718195289373
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 194,
    "prompt": "Write a python function to convert octal number to decimal number.",
    "generated_codes": [
      "def octal_To_Decimal(octal):\n    decimal, i = 0, 0\n    while(octal != 0): \n        dec = octal % 10\n        decimal = decimal + dec * pow(8, i) \n        octal = octal//10\n        i += 1\n    return decimal\n\n# Test cases"
    ],
    "token_counts": [
      137
    ],
    "generation_times": [
      3.5691106654703617
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 195,
    "prompt": "Write a python function to find the first position of an element in a sorted array.",
    "generated_codes": [
      "def first(arr, target, n):\n    try:\n        return arr.index(target)\n    except ValueError:\n        return -1"
    ],
    "token_counts": [
      281
    ],
    "generation_times": [
      7.507358364760876
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 196,
    "prompt": "Write a function to remove all the tuples with length k.",
    "generated_codes": [
      "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]"
    ],
    "token_counts": [
      259
    ],
    "generation_times": [
      6.959232922643423
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 197,
    "prompt": "Write a function to perform the exponentiation of the given two tuples.",
    "generated_codes": [
      "def find_exponentio(t1, t2):\n    return tuple(a**b for a, b in zip(t1, t2))"
    ],
    "token_counts": [
      335
    ],
    "generation_times": [
      9.004173774272203
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 198,
    "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "generated_codes": [
      "def largest_triangle(a, b):\n    return 0.5 * a * b"
    ],
    "token_counts": [
      308
    ],
    "generation_times": [
      8.494496870785952
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 199,
    "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
    "generated_codes": [
      "def highest_Power_of_2(n):\n    i = 0\n    while n > 2 ** i:\n        i += 1\n    return 2 ** (i - 1)\n\n# Test cases"
    ],
    "token_counts": [
      101
    ],
    "generation_times": [
      3.3176626972854137
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 200,
    "prompt": "Write a function to find all index positions of the maximum values in a given list.",
    "generated_codes": [
      "def position_max(lst):\n    max_val = max(lst)\n    return [i for i, val in enumerate(lst) if val == max_val]\n\n# Test cases"
    ],
    "token_counts": [
      181
    ],
    "generation_times": [
      5.6453280709683895
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 201,
    "prompt": "Write a python function to check whether the elements in a list are same or not.",
    "generated_codes": [
      "def chkList(lst):\n    return len(set(lst)) <= 1\n\n# Test cases"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      2.3710640631616116
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 202,
    "prompt": "Write a function to remove even characters in a string.",
    "generated_codes": [
      "def remove_even(s):\n    return s[1::2]\n\n# Test cases"
    ],
    "token_counts": [
      66
    ],
    "generation_times": [
      2.010276962071657
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 203,
    "prompt": "Write a python function to find the hamming distance between given two integers.",
    "generated_codes": [
      "def hamming_Distance(x, y):\n    xor = x ^ y\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      100
    ],
    "generation_times": [
      3.1564141400158405
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 204,
    "prompt": "Write a python function to count the occurrence of a given character in a string.",
    "generated_codes": [
      "def count(string, char):\n    return string.count(char)\n\n# Test cases"
    ],
    "token_counts": [
      64
    ],
    "generation_times": [
      2.099782105535269
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 205,
    "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "generated_codes": [
      "def inversion_elements(tup):\n    inversions = []\n    for i in range(len(tup) - 1):\n        inversions.append(-(tup[i+1] - tup[i]))\n    return tuple(inversions)\n\n# Test cases"
    ],
    "token_counts": [
      213
    ],
    "generation_times": [
      6.428741216659546
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 206,
    "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "generated_codes": [
      "def concatenate_elements(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n\n# Test cases"
    ],
    "token_counts": [
      212
    ],
    "generation_times": [
      5.659753147512674
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 207,
    "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.",
    "generated_codes": [
      "def find_longest_repeating_subseq(str):\n    n = len(str)\n\n    # Create a table to store results of sub-problems\n    dp = [[0 for k in range(n+1)] for x in range(n+1)]\n\n    # Build table in bottom up manner and return last entry\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            # (j-i) > LCSRe[i-1][j-1] to remove overlapping\n            if (str[i-1] == str[j-1] and i != j):\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\n    return dp[n][n]\n\n# Test cases"
    ],
    "token_counts": [
      386
    ],
    "generation_times": [
      9.04370480030775
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 208,
    "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "generated_codes": [
      "import re\n\ndef is_decimal(s):\n    match = re.fullmatch(r'^\\d+\\.\\d{2}$', s)\n    return match is not None"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      3.32455775141716
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 209,
    "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "generated_codes": [
      "import heapq\n\ndef heap_replace(heap, item):\n    heapq.heapify(heap)\n    heapq.heappop(heap)\n    heapq.heappush(heap, item)\n    return heap\n\n# Test cases"
    ],
    "token_counts": [
      269
    ],
    "generation_times": [
      5.772756367921829
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 210,
    "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "generated_codes": [
      "import re\n\ndef is_allowed_specific_char(string):\n    allowed_characters = \"^[a-zA-Z0-9]*$\"\n    if(re.search(allowed_characters, string)):\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      146
    ],
    "generation_times": [
      3.1360090784728527
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 211,
    "prompt": "Write a python function to count numbers whose oth and nth bits are set.",
    "generated_codes": [
      "def count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if i & 1 and i & (1 << (n - 1)):\n            count += 1\n    return count"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      4.984887003898621
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 212,
    "prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
    "generated_codes": [
      "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))"
    ],
    "token_counts": [
      183
    ],
    "generation_times": [
      3.933710854500532
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 213,
    "prompt": "Write a function to perform the concatenation of two string tuples.",
    "generated_codes": [
      "def concatenate_strings(t1, t2):\n    return tuple(x + y for x, y in zip(t1, t2))\n\n# Test cases"
    ],
    "token_counts": [
      217
    ],
    "generation_times": [
      4.68615360558033
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 214,
    "prompt": "Write a function to convert radians to degrees.",
    "generated_codes": [
      "import math\n\ndef degree_radian(radians):\n    degrees = radians * (180 / math.pi)\n    return round(degrees, 2)\n\n# Test cases"
    ],
    "token_counts": [
      137
    ],
    "generation_times": [
      2.9632891081273556
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 215,
    "prompt": "Write a function to decode a run-length encoded given list.",
    "generated_codes": [
      "def decode_list(lst):\n    decoded = []\n    for item in lst:\n        if isinstance(item, list):\n            decoded.extend(item[1]*item[0])\n        else:\n            decoded.append(item)\n    return decoded\n\n# Test cases"
    ],
    "token_counts": [
      255
    ],
    "generation_times": [
      5.496608506888151
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 216,
    "prompt": "Write a function to check if a nested list is a subset of another nested list.",
    "generated_codes": [
      "def check_subset_list(sub_list, main_list):\n    for sub in sub_list:\n        if not set(sub).issubset(set(main_list)):\n            return False\n    return True\n\n# Test cases"
    ],
    "token_counts": [
      256
    ],
    "generation_times": [
      5.508506152778864
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 217,
    "prompt": "Write a python function to find the first repeated character in a given string.",
    "generated_codes": [
      "def first_Repeated_Char(string):\n    char_map = {}\n    for char in string:\n        if char in char_map:\n            return char\n        else:\n            char_map[char] = 1\n    return '\\0'\n\n# Test cases"
    ],
    "token_counts": [
      118
    ],
    "generation_times": [
      2.5298586189746857
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 218,
    "prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
    "generated_codes": [
      "def min_Operations(a, b):\n    if a == b:\n        return 0\n    elif a > b:\n        if b % 2 == 0:\n            return 1 + min_Operations(a, b // 2)\n        else:\n            return 1 + min_Operations(a, b + 1)\n    else:\n        if a % 2 == 0:\n            return 1 + min_Operations(a // 2, b)\n        else:\n            return 1 + min_Operations(a + 1, b)\n\n# Test cases"
    ],
    "token_counts": [
      183
    ],
    "generation_times": [
      3.9265999272465706
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 219,
    "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "generated_codes": [
      "def extract_min_max(tup, k):\n    # Convert the tuple to a list\n    lst = list(tup)\n    \n    # Sort the list\n    lst.sort()\n    \n    # Extract the minimum and maximum k elements\n    result = lst[:k] + lst[-k:]\n    \n    # Return the result as a tuple\n    return tuple(result)"
    ],
    "token_counts": [
      161
    ],
    "generation_times": [
      3.474877532571554
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 220,
    "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "generated_codes": [
      "def replace_max_specialchar(s, n):\n    special_chars = [',', '.', ' ']\n    count_chars = [s.count(char) for char in special_chars]\n    max_char = special_chars[count_chars.index(max(count_chars))]\n    max_count = max(count_chars)\n\n    if max_count > n:\n        return s.replace(max_char, ':', max_count-n)\n    else:\n        return s\n\n# Test cases"
    ],
    "token_counts": [
      229
    ],
    "generation_times": [
      4.953505881130695
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 221,
    "prompt": "Write a python function to find the first even number in a given list of numbers.",
    "generated_codes": [
      "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test cases"
    ],
    "token_counts": [
      108
    ],
    "generation_times": [
      2.326329782605171
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 222,
    "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
    "generated_codes": [
      "def check_type(tup):\n    return all(isinstance(i, type(tup[0])) for i in tup)\n\n# Test cases"
    ],
    "token_counts": [
      106
    ],
    "generation_times": [
      2.284971933811903
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 223,
    "prompt": "Write a function to check for majority element in the given sorted array.",
    "generated_codes": [
      "def is_majority(arr, n, x):\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            break\n        i += 1\n\n    if i == n:\n        return False\n\n    return arr[i+n//2] == x\n\n# Test cases"
    ],
    "token_counts": [
      183
    ],
    "generation_times": [
      3.9362109005451202
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 224,
    "prompt": "Write a python function to count set bits of a given number.",
    "generated_codes": [
      "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      89
    ],
    "generation_times": [
      1.9201666451990604
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 225,
    "prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
    "generated_codes": [
      "def find_Min(arr, low, high):\n    # This condition is needed to handle the case when array is not\n    # rotated at all\n    if high < low:\n        return arr[0]\n\n    # If there is only one element left\n    if high == low:\n        return arr[low]\n\n    # Find mid\n    mid = low + (high - low) // 2\n\n    # Check if mid itself is the minimum element\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    # Decide whether we need to go to left half or right half\n    if arr[low] <= arr[mid]:\n        return find_Min(arr, mid+1, high)\n    return find_Min(arr, low, mid-1)\n\n# Test cases"
    ],
    "token_counts": [
      264
    ],
    "generation_times": [
      5.682722445577383
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 226,
    "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
    "generated_codes": [
      "def odd_values_string(s):\n    return s[::2]\n\n# Test cases"
    ],
    "token_counts": [
      72
    ],
    "generation_times": [
      1.5572422221302986
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 227,
    "prompt": "Write a function to find minimum of three numbers.",
    "generated_codes": [
      "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test cases"
    ],
    "token_counts": [
      95
    ],
    "generation_times": [
      2.048333302140236
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 228,
    "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
    "generated_codes": [
      "def all_Bits_Set_In_The_Given_Range(n, start, end):\n    # Convert the number to binary and slice the range\n    binary = bin(n)[2:][start:end+1]\n    # Check if all bits are set (1)\n    return binary.count('1') == len(binary)\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      3.574382085353136
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 229,
    "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "generated_codes": [
      "def re_arrange_array(arr, n):\n    return sorted(arr, key=lambda x: 0 if x < 0 else 1)\n\n# Test cases"
    ],
    "token_counts": [
      233
    ],
    "generation_times": [
      5.026501975953579
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 230,
    "prompt": "Write a function to replace blank spaces with any character in a string.",
    "generated_codes": [
      "def replace_blank(s, char):\n    return s.replace(' ', char)\n\n# Test cases"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.875360306352377
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 231,
    "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "generated_codes": [
      "def max_sum(triangle, n):\n    for i in range(n-1, -1, -1):\n        for j in range(i+1):\n            if i+1 < n:\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]"
    ],
    "token_counts": [
      344
    ],
    "generation_times": [
      7.39776024222374
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 232,
    "prompt": "Write a function to get the n largest items from a dataset.",
    "generated_codes": [
      "def larg_nnum(data, n):\n    return sorted(data, reverse=True)[:n]"
    ],
    "token_counts": [
      78
    ],
    "generation_times": [
      1.6922315135598183
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 233,
    "prompt": "Write a function to find the lateral surface area of a cylinder.",
    "generated_codes": [
      "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Test cases"
    ],
    "token_counts": [
      147
    ],
    "generation_times": [
      3.168453324586153
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 234,
    "prompt": "Write a function to find the volume of a cube.",
    "generated_codes": [
      "def volume_cube(side_length):\n    return side_length ** 3\n\n# Test cases"
    ],
    "token_counts": [
      67
    ],
    "generation_times": [
      1.437679260969162
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 235,
    "prompt": "Write a python function to set all even bits of a given number.",
    "generated_codes": [
      "def even_bit_set_number(n):\n    binary = bin(n)[2:]\n    even_bits = [binary[i] for i in range(len(binary)) if i % 2 == 0]\n    even_bits_set = ''.join(even_bits)\n    return int(even_bits_set, 2)\n\n# Test cases"
    ],
    "token_counts": [
      139
    ],
    "generation_times": [
      2.9739479534327984
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 236,
    "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "generated_codes": [
      "def No_of_Triangle(n, m):\n    if m > n:\n        return -1\n    else:\n        return n - m + 1"
    ],
    "token_counts": [
      176
    ],
    "generation_times": [
      3.764207761734724
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 237,
    "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "generated_codes": [
      "def check_occurences(records):\n    # Create an empty dictionary to store the occurrences\n    occurrences = {}\n\n    # Iterate over the records\n    for record in records:\n        # Sort the record to ensure that (1, 3) and (3, 1) are treated the same\n        sorted_record = tuple(sorted(record))\n\n        # If the sorted record is already in the dictionary, increment its count\n        if sorted_record in occurrences:\n            occurrences[sorted_record] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            occurrences[sorted_record] = 1\n\n    # Return the dictionary of occurrences\n    return occurrences"
    ],
    "token_counts": [
      431
    ],
    "generation_times": [
      9.232023913413286
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 238,
    "prompt": "Write a python function to count number of non-empty substrings of a given string.",
    "generated_codes": [
      "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"
    ],
    "token_counts": [
      109
    ],
    "generation_times": [
      2.3345862552523613
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 239,
    "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "generated_codes": [
      "def get_total_number_of_sequences(n, m):\n    # Initialize the list with 1s\n    dp = [1] + [0]*n\n    for i in range(1, m+1):\n        for j in range(i, n+1):\n            dp[j] += dp[j-i]\n    return dp[n]\n\n# Test cases"
    ],
    "token_counts": [
      165
    ],
    "generation_times": [
      3.5329148024320602
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 240,
    "prompt": "Write a function to replace the last element of the list with another list.",
    "generated_codes": [
      "def replace_list(original_list, new_list):\n    return original_list[:-1] + new_list\n\n# Test cases"
    ],
    "token_counts": [
      171
    ],
    "generation_times": [
      3.7738022804260254
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 241,
    "prompt": "Write a function to generate a 3d array having each element as '*'.",
    "generated_codes": [
      "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]"
    ],
    "token_counts": [
      124
    ],
    "generation_times": [
      2.6741651222109795
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 242,
    "prompt": "Write a function to count total characters in a string.",
    "generated_codes": [
      "def count_charac(string):\n    return len(string)\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      1.327783539891243
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 243,
    "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "generated_codes": [
      "from collections import Counter\n\ndef sort_on_occurence(lst):\n    count = Counter(x[0] for x in lst)\n    return sorted(lst, key=lambda x: (-count[x[0]], x))\n\n# Test cases"
    ],
    "token_counts": [
      246
    ],
    "generation_times": [
      5.2750595435500145
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 244,
    "prompt": "Write a python function to find the next perfect square greater than a given number.",
    "generated_codes": [
      "import math\n\ndef next_Perfect_Square(n):\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n:\n        return (int(root + 1) ** 2)\n    else:\n        return (int(root + 1) ** 2)\n\n# Test cases"
    ],
    "token_counts": [
      131
    ],
    "generation_times": [
      2.8095326088368893
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 245,
    "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "generated_codes": [
      "def max_sum(arr, n):\n    # Initialize the variables\n    increasing = [0]*n\n    decreasing = [0]*n\n\n    # Initialize the arrays\n    increasing[0] = arr[0]\n    decreasing[n-1] = arr[n-1]\n\n    # Calculate the maximum sum of increasing sub-sequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and increasing[i] < increasing[j] + arr[i]:\n                increasing[i] = increasing[j] + arr[i]\n\n    # Calculate the maximum sum of decreasing sub-sequence\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and decreasing[i] < decreasing[j] + arr[i]:\n                decreasing[i] = decreasing[j] + arr[i]\n\n    # Calculate the maximum sum of bi-tonic sub-sequence\n    max_sum = max(increasing[i] + decreasing[i] - arr[i] for i in range(n))\n\n    return max_sum\n\n# Test cases"
    ],
    "token_counts": [
      425
    ],
    "generation_times": [
      9.15364558622241
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 246,
    "prompt": "Write a function for computing square roots using the babylonian method.",
    "generated_codes": [
      "def babylonian_squareroot(n):\n    x = n\n    y = 1\n    e = 0.000001  # This defines the accuracy level\n    while x - y > e:\n        x = (x + y)/2\n        y = n/x\n    return x\n\n# Test cases"
    ],
    "token_counts": [
      197
    ],
    "generation_times": [
      4.225913297384977
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 247,
    "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
    "generated_codes": [
      "def lps(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n\n# Test cases"
    ],
    "token_counts": [
      389
    ],
    "generation_times": [
      8.3393140360713
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 248,
    "prompt": "Write a function to calculate the harmonic sum of n-1.",
    "generated_codes": [
      "def harmonic_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return harmonic_sum(n-1) + 1/n"
    ],
    "token_counts": [
      250
    ],
    "generation_times": [
      5.36509545892477
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 249,
    "prompt": "Write a function to find the intersection of two arrays using lambda function.",
    "generated_codes": [
      "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      6.310865107923746
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 250,
    "prompt": "Write a python function to count the occcurences of an element in a tuple.",
    "generated_codes": [
      "def count_X(tup, X):\n    return tup.count(X)"
    ],
    "token_counts": [
      275
    ],
    "generation_times": [
      5.919746480882168
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 251,
    "prompt": "Write a function to insert an element before each element of a list.",
    "generated_codes": [
      "def insert_element(lst, element):\n    result = []\n    for i in lst:\n        result.extend([element, i])\n    return result"
    ],
    "token_counts": [
      234
    ],
    "generation_times": [
      5.01909077167511
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 252,
    "prompt": "Write a python function to convert complex numbers to polar coordinates.",
    "generated_codes": [
      "import cmath\n\ndef convert(n):\n    n = complex(n)\n    return (abs(n), cmath.phase(n))\n\n# Test cases"
    ],
    "token_counts": [
      94
    ],
    "generation_times": [
      2.021506991237402
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 253,
    "prompt": "Write a python function to count integers from a given list.",
    "generated_codes": [
      "def count_integer(lst):\n    return sum(isinstance(i, int) for i in lst)"
    ],
    "token_counts": [
      93
    ],
    "generation_times": [
      1.9953350648283958
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 254,
    "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "generated_codes": [
      "def words_ae(s):\n    words = s.split()\n    return [word for word in words if word.lower().startswith('a') or word.lower().startswith('e')]\n\n# Test cases"
    ],
    "token_counts": [
      271
    ],
    "generation_times": [
      5.792119022458792
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 255,
    "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "generated_codes": [
      "from itertools import product\n\ndef combinations_colors(colors, num):\n    return list(product(colors, repeat=num))"
    ],
    "token_counts": [
      312
    ],
    "generation_times": [
      6.692249473184347
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 256,
    "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "generated_codes": [
      "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes) - 2  # subtract 2 to exclude 0 and 1\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      3.5509914122521877
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 257,
    "prompt": "Write a function to swap two numbers.",
    "generated_codes": [
      "def swap_numbers(a, b):\n    return b, a\n\n# Test cases"
    ],
    "token_counts": [
      95
    ],
    "generation_times": [
      2.048663206398487
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 258,
    "prompt": "Write a function to find number of odd elements in the given list using lambda function.",
    "generated_codes": [
      "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.6378152444958687
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 259,
    "prompt": "Write a function to maximize the given two tuples.",
    "generated_codes": [
      "def maximize_elements(tuples1, tuples2):\n    result = []\n    for tuple1, tuple2 in zip(tuples1, tuples2):\n        new_tuple = (max(tuple1[0], tuple2[0]), max(tuple1[1], tuple2[1]))\n        result.append(new_tuple)\n    return tuple(result)"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      3.7363816648721695
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 260,
    "prompt": "Write a function to find the nth newman–shanks–williams prime number.",
    "generated_codes": [
      "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Test cases"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.3776380345225334
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 261,
    "prompt": "Write a function to perform mathematical division operation across the given tuples.",
    "generated_codes": [
      "def division_elements(t1, t2):\n    return tuple(a // b for a, b in zip(t1, t2))"
    ],
    "token_counts": [
      265
    ],
    "generation_times": [
      5.672627918422222
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 262,
    "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "generated_codes": [
      "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]"
    ],
    "token_counts": [
      81
    ],
    "generation_times": [
      1.745914701372385
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 263,
    "prompt": "Write a function to merge two dictionaries.",
    "generated_codes": [
      "def merge_dict(dict1, dict2):\n    merged = {**dict1, **dict2}\n    return merged"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      1.6414978988468647
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 264,
    "prompt": "Write a function to calculate a dog's age in dog's years.",
    "generated_codes": [
      "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Test cases"
    ],
    "token_counts": [
      101
    ],
    "generation_times": [
      2.1650915630161762
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 265,
    "prompt": "Write a function to split a list for every nth element.",
    "generated_codes": [
      "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test cases"
    ],
    "token_counts": [
      269
    ],
    "generation_times": [
      5.756413001567125
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 266,
    "prompt": "Write a function to find the lateral surface area of a cube.",
    "generated_codes": [
      "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n\n# Test cases"
    ],
    "token_counts": [
      86
    ],
    "generation_times": [
      1.843018513172865
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 267,
    "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "generated_codes": [
      "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i*i\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      85
    ],
    "generation_times": [
      1.8204879313707352
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 268,
    "prompt": "Write a function to find the n'th star number.",
    "generated_codes": [
      "def find_star_num(n):\n    return n*(7*n-5)//2\n\n# Test cases"
    ],
    "token_counts": [
      74
    ],
    "generation_times": [
      1.5858806818723679
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 269,
    "prompt": "Write a function to find the ascii value of a character.",
    "generated_codes": [
      "def ascii_value(character):\n    return ord(character)\n\n# Test cases"
    ],
    "token_counts": [
      67
    ],
    "generation_times": [
      1.4366885870695114
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 270,
    "prompt": "Write a python function to find the sum of even numbers at even positions.",
    "generated_codes": [
      "def sum_even_and_even_index(lst, n):\n    return sum(lst[i] for i in range(0, n, 2) if lst[i] % 2 == 0)"
    ],
    "token_counts": [
      146
    ],
    "generation_times": [
      3.1294369027018547
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 271,
    "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "generated_codes": [
      "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"
    ],
    "token_counts": [
      200
    ],
    "generation_times": [
      4.2693474888801575
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 272,
    "prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
    "generated_codes": [
      "def rear_extract(records):\n    return [record[-1] for record in records]"
    ],
    "token_counts": [
      68
    ],
    "generation_times": [
      1.4620457887649536
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 273,
    "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "generated_codes": [
      "def substract_elements(t1, t2):\n    return tuple(x1 - x2 for x1, x2 in zip(t1, t2))"
    ],
    "token_counts": [
      250
    ],
    "generation_times": [
      5.500372894108295
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 274,
    "prompt": "Write a python function to find sum of even index binomial coefficients.",
    "generated_codes": [
      "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the range of n\n    for i in range(n+1):\n        # If the index is even, add the binomial coefficient to the sum\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    return sum\n\ndef binomial_coefficient(n, k):\n    # Calculate the binomial coefficient using the formula nCk = n! / (k!(n-k)!)\n    res = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(0 , k):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\n\n# Test cases"
    ],
    "token_counts": [
      263
    ],
    "generation_times": [
      5.6237359419465065
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 275,
    "prompt": "Write a python function to find the position of the last removed element from the given array.",
    "generated_codes": [
      "def get_Position(arr, n, m):\n    # Calculate the position of the last removed element\n    position = (n - m) % len(arr)\n    return position\n\n# Test cases"
    ],
    "token_counts": [
      107
    ],
    "generation_times": [
      2.2997015826404095
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 276,
    "prompt": "Write a function to find the volume of a cylinder.",
    "generated_codes": [
      "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      2.9077116660773754
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 277,
    "prompt": "Write a function to filter a dictionary based on values.",
    "generated_codes": [
      "def dict_filter(d, min_value):\n    return {k: v for k, v in d.items() if v >= min_value}"
    ],
    "token_counts": [
      74
    ],
    "generation_times": [
      1.604011844843626
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 278,
    "prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
    "generated_codes": [
      "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      142
    ],
    "generation_times": [
      3.0524856746196747
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 279,
    "prompt": "Write a function to find the nth decagonal number.",
    "generated_codes": [
      "def is_num_decagonal(n):\n    return n*(7*n-5)//2\n\n# Test cases"
    ],
    "token_counts": [
      80
    ],
    "generation_times": [
      1.7209524996578693
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 280,
    "prompt": "Write a function to search an element in the given array by using sequential search.",
    "generated_codes": [
      "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)\n\n# Test cases"
    ],
    "token_counts": [
      203
    ],
    "generation_times": [
      4.343693617731333
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 281,
    "prompt": "Write a python function to check if the elements of a given list are unique or not.",
    "generated_codes": [
      "def all_unique(lst):\n    return len(lst) == len(set(lst))"
    ],
    "token_counts": [
      108
    ],
    "generation_times": [
      2.3106921911239624
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 282,
    "prompt": "Write a function to substaract two lists using map and lambda function.",
    "generated_codes": [
      "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.6313426047563553
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 283,
    "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "generated_codes": [
      "def validate(n):\n    # Convert the number to a string to easily iterate over each digit\n    str_n = str(n)\n\n    # Iterate over each digit in the number\n    for digit in str_n:\n        # Count the number of times the digit appears in the number\n        count = str_n.count(digit)\n\n        # If the count is greater than the digit itself, return False\n        if count > int(digit):\n            return False\n\n    # If we've made it through all the digits without returning False, return True\n    return True\n\n# Test cases"
    ],
    "token_counts": [
      303
    ],
    "generation_times": [
      6.4648116156458855
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 284,
    "prompt": "Write a function to check whether all items of a list are equal to a given string.",
    "generated_codes": [
      "def check_element(lst, element):\n    return all(i == element for i in lst)"
    ],
    "token_counts": [
      220
    ],
    "generation_times": [
      4.72784174233675
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 285,
    "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "generated_codes": [
      "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      125
    ],
    "generation_times": [
      2.710205666720867
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 286,
    "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "generated_codes": [
      "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate the sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the sum of the array repeated k times\n    total_sum_repeated = total_sum * k\n\n    # Calculate the maximum subarray sum using Kadane's algorithm\n    max_sum_current = max_sum_global = arr[0]\n    for i in range(1, n):\n        max_sum_current = max(arr[i], max_sum_current + arr[i])\n        if max_sum_current > max_sum_global:\n            max_sum_global = max_sum_current\n\n    # Return the maximum of the sum of the array repeated k times and the maximum subarray sum\n    return max(max_sum_global, total_sum_repeated)\n\n# Test cases"
    ],
    "token_counts": [
      323
    ],
    "generation_times": [
      7.063517935574055
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 287,
    "prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
    "generated_codes": [
      "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum*2\n\n# Test cases"
    ],
    "token_counts": [
      84
    ],
    "generation_times": [
      1.8035842292010784
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 288,
    "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "generated_codes": [
      "def modular_inverse(arr, n, p):\n    count = 0\n    for i in arr:\n        if pow(i, n, p) == i:\n            count += 1\n    return count"
    ],
    "token_counts": [
      306
    ],
    "generation_times": [
      6.552851006388664
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 289,
    "prompt": "Write a python function to calculate the number of odd days in a given year.",
    "generated_codes": [
      "def odd_Days(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 5\n            else:\n                return 6\n        else:\n            return 6\n    else:\n        return 5\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.643705803900957
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 290,
    "prompt": "Write a function to find the list of lists with maximum length.",
    "generated_codes": [
      "def max_length(lst):\n    max_len = max(len(sub_lst) for sub_lst in lst)\n    max_lst = [sub_lst for sub_lst in lst if len(sub_lst) == max_len]\n    return max_len, max_lst[0]\n\n# Test cases"
    ],
    "token_counts": [
      232
    ],
    "generation_times": [
      4.970230340957642
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 291,
    "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "generated_codes": [
      "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    dp = [0]*n\n    dp[0] = k\n    dp[1] = k*k\n    for i in range(2, n):\n        dp[i] = (k-1)*(dp[i-1] + dp[i-2])\n    return dp[n-1]\n\n# Test cases"
    ],
    "token_counts": [
      182
    ],
    "generation_times": [
      3.8928166329860687
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 292,
    "prompt": "Write a python function to find quotient of two numbers.",
    "generated_codes": [
      "def find(a, b):\n    return a // b"
    ],
    "token_counts": [
      20
    ],
    "generation_times": [
      0.434254415333271
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 293,
    "prompt": "Write a function to find the third side of a right angled triangle.",
    "generated_codes": [
      "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\n# Test cases"
    ],
    "token_counts": [
      117
    ],
    "generation_times": [
      2.5046156719326973
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 294,
    "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
    "generated_codes": [
      "def max_val(lst):\n    return max(lst, key=lambda x: x if isinstance(x, int) else float('-inf'))\n\n# Test cases"
    ],
    "token_counts": [
      126
    ],
    "generation_times": [
      2.703839160501957
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 295,
    "prompt": "Write a function to return the sum of all divisors of a number.",
    "generated_codes": [
      "def sum_div(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      87
    ],
    "generation_times": [
      1.8652135655283928
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 296,
    "prompt": "Write a python function to count inversions in an array.",
    "generated_codes": [
      "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    ],
    "token_counts": [
      146
    ],
    "generation_times": [
      3.1301468908786774
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 297,
    "prompt": "Write a function to flatten a given nested list structure.",
    "generated_codes": [
      "def flatten_list(nested_list):\n    flat_list = []\n    for i in nested_list:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    ],
    "token_counts": [
      191
    ],
    "generation_times": [
      4.115844007581472
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 298,
    "prompt": "Write a function to find the nested list elements which are present in another list.",
    "generated_codes": [
      "def intersection_nested_lists(main_list, nested_lists):\n    if isinstance(main_list[0], list):\n        main_list = [item for sublist in main_list for item in sublist]\n    return [[value for value in sublist if value in main_list] for sublist in nested_lists]\n\n# Test cases"
    ],
    "token_counts": [
      336
    ],
    "generation_times": [
      7.196057483553886
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 299,
    "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "generated_codes": [
      "def max_aggregate(lst):\n    # Create an empty dictionary\n    scores = {}\n\n    # Iterate over the list of tuples\n    for name, score in lst:\n        # If the name is already in the dictionary, add the score to the existing total\n        if name in scores:\n            scores[name] += score\n        # If the name is not in the dictionary, add it with the score as the total\n        else:\n            scores[name] = score\n\n    # Find the name with the maximum score\n    max_name = max(scores, key=scores.get)\n\n    # Return the name and its maximum score\n    return (max_name, scores[max_name])\n\n# Test cases"
    ],
    "token_counts": [
      385
    ],
    "generation_times": [
      8.253672391176224
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 300,
    "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "generated_codes": [
      "def count_binary_seq(n):\n    # Initialize the count of binary sequences\n    count = [0] * (2*n + 1)\n\n    # Initialize the first two counts as 1\n    count[0] = count[1] = 1\n\n    # Fill the count array in bottom up manner\n    for i in range(2, 2*n + 1):\n        for j in range(i):\n            count[i] += count[j] * count[i-j-1]\n\n    return count[2*n]\n\n# Test cases"
    ],
    "token_counts": [
      183
    ],
    "generation_times": [
      3.9186772368848324
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 301,
    "prompt": "Write a function to find the depth of a dictionary.",
    "generated_codes": [
      "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max(dict_depth(v) for v in d.values())\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      2.869180228561163
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 302,
    "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
    "generated_codes": [
      "def set_Bit_Number(n):\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i-1)"
    ],
    "token_counts": [
      227
    ],
    "generation_times": [
      4.8555856086313725
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 303,
    "prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
    "generated_codes": [
      "def solve(arr, n):\n    # Initialize counts of inversions and non-inversions\n    inversions, non_inversions = 0, 0\n\n    # Traverse through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # If current element is greater than elements after it, it is an inversion\n            if arr[i] > arr[j]:\n                inversions += 1\n            # If current element is smaller than elements after it, it is a non-inversion\n            elif arr[i] < arr[j]:\n                non_inversions += 1\n\n    # Return True if counts of inversions and non-inversions are same, False otherwise\n    return inversions == non_inversions"
    ],
    "token_counts": [
      276
    ],
    "generation_times": [
      5.896804250776768
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 304,
    "prompt": "Write a python function to find element at a given index after number of rotations.",
    "generated_codes": [
      "def find_Element(arr, rotations, index, query):\n    for rotation in rotations:\n        arr = arr[rotation[0]:] + arr[:rotation[0]]\n    return arr[index]"
    ],
    "token_counts": [
      261
    ],
    "generation_times": [
      5.569647133350372
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 305,
    "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
    "generated_codes": [
      "def start_withp(words_list):\n    for words in words_list:\n        for word in words.split():\n            if word.lower().startswith('p'):\n                return word,\n\n# Test cases"
    ],
    "token_counts": [
      137
    ],
    "generation_times": [
      2.9242297150194645
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 306,
    "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "generated_codes": [
      "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the dp array with the given array values\n    dp = arr[:]\n    # Initialize the max_sum variable with the value at the kth index\n    max_sum = arr[k]\n\n    # Iterate over the array from the (i+1)th index to the end\n    for j in range(i+1, n):\n        # Iterate over the array from the 0th index to the (j-1)th index\n        for l in range(j):\n            # If the value at the jth index is greater than the value at the ith index\n            # and the sum of the value at the ith index and the dp value at the lth index is greater than the dp value at the jth index\n            if arr[j] > arr[i] and dp[i] + dp[l] > dp[j]:\n                # Update the dp value at the jth index with the sum of the value at the ith index and the dp value at the lth index\n                dp[j] = dp[i] + dp[l]\n            # If the dp value at the jth index is greater than the max_sum\n            # Update the max_sum with the dp value at the jth index\n            if dp[j] > max_sum:\n                max_sum = dp[j]\n\n    # Return the max_sum\n    return max_sum"
    ],
    "token_counts": [
      577
    ],
    "generation_times": [
      12.325975801795721
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 307,
    "prompt": "Write a function to get a colon of a tuple.",
    "generated_codes": [
      "def colon_tuplex(tuplex, index, value):\n    lst = list(tuplex)\n    lst[index] = [value]\n    return tuple(lst)"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      5.955330163240433
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 308,
    "prompt": "Write a function to find the specified number of largest products from two given lists.",
    "generated_codes": [
      "from itertools import combinations\n\ndef large_product(list1, list2, n):\n    products = []\n    for comb1, comb2 in combinations(combinations(list1, 2), combinations(list2, 2)):\n        products.append(comb1[0]*comb1[1]*comb2[0]*comb2[1])\n    products.sort(reverse=True)\n    return products[:n]"
    ],
    "token_counts": [
      213
    ],
    "generation_times": [
      4.557772800326347
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 309,
    "prompt": "Write a python function to find the maximum of two numbers.",
    "generated_codes": [
      "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      0.7091859020292759
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 310,
    "prompt": "Write a function to convert a given string to a tuple.",
    "generated_codes": [
      "def string_to_tuple(s):\n    return tuple(s)\n\n# Test cases"
    ],
    "token_counts": [
      129
    ],
    "generation_times": [
      2.76141893863678
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 311,
    "prompt": "Write a python function to set the left most unset bit.",
    "generated_codes": [
      "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n + 2\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.582654494792223
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 312,
    "prompt": "Write a function to find the volume of a cone.",
    "generated_codes": [
      "import math\n\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * radius**2 * height\n\n# Test cases"
    ],
    "token_counts": [
      140
    ],
    "generation_times": [
      2.986922100186348
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 313,
    "prompt": "Write a python function to print positive numbers in a list.",
    "generated_codes": [
      "def pos_nos(lst):\n    return [num for num in lst if num > 0]\n\n# Test cases"
    ],
    "token_counts": [
      120
    ],
    "generation_times": [
      2.563875947147608
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 314,
    "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "generated_codes": [
      "def max_sum_rectangular_grid(grid, n):\n    # Initialize the dp array\n    dp = [[0]*n for _ in range(2)]\n\n    # Initialize the dp array with the first row of the grid\n    dp[0] = grid[0]\n    dp[1] = grid[1]\n\n    # Iterate over the grid\n    for i in range(2):\n        for j in range(n):\n            # Find the maximum sum excluding the current element\n            dp[i][j] += max(dp[(i+1)%2][:j] + dp[(i+1)%2][j+1:])\n\n    # Return the maximum sum\n    return max(dp[0] + dp[1])\n\n# Test cases"
    ],
    "token_counts": [
      337
    ],
    "generation_times": [
      7.19755369797349
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 315,
    "prompt": "Write a python function to find the first maximum length of even word.",
    "generated_codes": [
      "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if not even_words:\n        return \"-1\"\n    else:\n        return max(even_words, key=len)\n\n# Test cases"
    ],
    "token_counts": [
      137
    ],
    "generation_times": [
      2.9212149791419506
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 316,
    "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "generated_codes": [
      "def find_last_occurrence(arr, target):\n    try:\n        return len(arr) - 1 - arr[::-1].index(target)\n    except ValueError:\n        return -1"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.252641189843416
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 317,
    "prompt": "Write a function to reflect the modified run-length encoding from a list.",
    "generated_codes": [
      "def modified_encode(lst):\n    if not lst:\n        return []\n    result = []\n    current = lst[0]\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == current:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, current])\n            else:\n                result.append(current)\n            current = lst[i]\n            count = 1\n    if count > 1:\n        result.append([count, current])\n    else:\n        result.append(current)\n    return result"
    ],
    "token_counts": [
      270
    ],
    "generation_times": [
      5.76404981687665
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 318,
    "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "generated_codes": [
      "def max_volume(s):\n    if s < 3:\n        return 0\n    else:\n        return (s**3) - (3*s*(s-1)**2)//8\n\n# Test cases"
    ],
    "token_counts": [
      89
    ],
    "generation_times": [
      1.9012904614210129
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 319,
    "prompt": "Write a function to find all five characters long word in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)\n\n# Test cases"
    ],
    "token_counts": [
      104
    ],
    "generation_times": [
      2.2190144322812557
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 320,
    "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "generated_codes": [
      "def sum_difference(n):\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    square_of_sum = (n * (n + 1) // 2) ** 2\n    return square_of_sum - sum_of_squares"
    ],
    "token_counts": [
      256
    ],
    "generation_times": [
      5.453790824860334
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 321,
    "prompt": "Write a function to find the demlo number for the given number.",
    "generated_codes": [
      "def find_demlo(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Initialize a counter to keep track of the number of occurrences of each digit\n    counter = [0] * 10\n\n    # Iterate over each character in the input string\n    for c in s:\n        # Increment the count for the current digit\n        counter[int(c)] += 1\n\n    # Iterate over each digit from 1 to 9\n    for i in range(1, 10):\n        # Append the current digit to the result the number of times it appears in the input string\n        result += str(i) * counter[i]\n\n    # Append the reversed string of digits to the result\n    result += result[::-1]\n\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      299
    ],
    "generation_times": [
      6.415512304753065
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 322,
    "prompt": "Write a function to find all index positions of the minimum values in a given list.",
    "generated_codes": [
      "def position_min(lst):\n    min_val = min(lst)\n    min_pos = [i for i, val in enumerate(lst) if val == min_val]\n    return min_pos\n\n# Test cases"
    ],
    "token_counts": [
      185
    ],
    "generation_times": [
      3.974729336798191
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 323,
    "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "generated_codes": [
      "def re_arrange(arr, n):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    result = []\n    i = 0\n    j = 0\n    while i < len(positive) and j < len(negative):\n        result.append(negative[j])\n        result.append(positive[i])\n        i += 1\n        j += 1\n    while i < len(positive):\n        result.append(positive[i])\n        i += 1\n    while j < len(negative):\n        result.append(negative[j])\n        j += 1\n    return result\n\n# Test cases"
    ],
    "token_counts": [
      343
    ],
    "generation_times": [
      7.3272847682237625
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 324,
    "prompt": "Write a function to extract the sum of alternate chains of tuples.",
    "generated_codes": [
      "def sum_of_alternates(tup):\n    sum_even_index = sum(tup[::2])\n    sum_odd_index = sum(tup[1::2])\n    return (sum_even_index, sum_odd_index)\n\n# Test cases"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      3.7064551301300526
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 325,
    "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "generated_codes": [
      "def get_Min_Squares(n):\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3] + [0] * (n - 3)\n\n    for i in range(4, n + 1):\n        # For each number i, calculate the minimum number of squares by trying all possible j such that j*j <= i\n        min_squares[i] = min([min_squares[i - j * j] + 1 for j in range(1, int(i ** 0.5) + 1)])\n\n    return min_squares[n]\n\n# Test cases"
    ],
    "token_counts": [
      210
    ],
    "generation_times": [
      4.465328127145767
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 326,
    "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
    "generated_codes": [
      "from collections import Counter\n\ndef most_occurrences(lst):\n    words = ' '.join(lst).split()\n    counter = Counter(words)\n    return counter.most_common(1)[0][0]\n\n# Test cases"
    ],
    "token_counts": [
      174
    ],
    "generation_times": [
      3.7192618921399117
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 327,
    "prompt": "Write a function to print check if the triangle is isosceles or not.",
    "generated_codes": [
      "def check_isosceles(a, b, c):\n    # Check if the triangle is valid\n    if a + b > c and a + c > b and b + c > a:\n        # Check if the triangle is isosceles\n        if a == b or a == c or b == c:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      159
    ],
    "generation_times": [
      3.3830239064991474
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 328,
    "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
    "generated_codes": [
      "def rotate_left(lst, n, k):\n    # Rotate the list to the left by n places, and then append the first k elements to the end\n    return lst[n:] + lst[:n] + lst[:k]\n\n# Test cases"
    ],
    "token_counts": [
      278
    ],
    "generation_times": [
      5.92369132861495
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 329,
    "prompt": "Write a python function to count negative numbers in a list.",
    "generated_codes": [
      "def neg_count(lst):\n    return sum(1 for i in lst if i < 0)\n\n# Test cases"
    ],
    "token_counts": [
      89
    ],
    "generation_times": [
      1.8973932825028896
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 330,
    "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      2.8130149096250534
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 331,
    "prompt": "Write a python function to count unset bits of a given number.",
    "generated_codes": [
      "def count_unset_bits(n):\n    return bin(n).count('1')\n\n# Test cases"
    ],
    "token_counts": [
      72
    ],
    "generation_times": [
      1.5389674454927444
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 332,
    "prompt": "Write a function to count character frequency of a given string.",
    "generated_codes": [
      "def char_frequency(string):\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict"
    ],
    "token_counts": [
      226
    ],
    "generation_times": [
      4.8148968033492565
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 333,
    "prompt": "Write a python function to sort a list according to the second element in sublist.",
    "generated_codes": [
      "def sort_list(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases"
    ],
    "token_counts": [
      252
    ],
    "generation_times": [
      5.376307234168053
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 334,
    "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "generated_codes": [
      "def check_Validity(a, b, c):\n    # The sum of the lengths of any two sides of a triangle is greater than the length of the third side.\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      133
    ],
    "generation_times": [
      2.8340729884803295
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 335,
    "prompt": "Write a function to find the sum of arithmetic progression.",
    "generated_codes": [
      "def ap_sum(a, d, n):\n    return n / 2 * (2 * a + (n - 1) * d)\n\n# Test cases"
    ],
    "token_counts": [
      96
    ],
    "generation_times": [
      2.0549640841782093
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 336,
    "prompt": "Write a function to check whether the given month name contains 28 days or not.",
    "generated_codes": [
      "def check_monthnum(month):\n    thirty_one_days_months = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    thirty_days_months = [\"April\", \"June\", \"September\", \"November\"]\n    \n    if month in thirty_one_days_months:\n        return False\n    elif month in thirty_days_months:\n        return False\n    elif month == \"February\":\n        return True\n    else:\n        return \"Invalid month name\"\n\n# Test cases"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      4.7571981102228165
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 337,
    "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "generated_codes": [
      "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython[.,]*\\s*$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      119
    ],
    "generation_times": [
      3.1281312741339207
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 338,
    "prompt": "Write a python function to count the number of substrings with same first and last characters.",
    "generated_codes": [
      "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      142
    ],
    "generation_times": [
      3.935363758355379
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 339,
    "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
    "generated_codes": [
      "def find_Divisor(start, end):\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    max_divisor = start\n    max_count = count_divisors(start)\n\n    for i in range(start+1, end+1):\n        count = count_divisors(i)\n        if count > max_count:\n            max_divisor = i\n            max_count = count\n\n    return max_divisor"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      5.451188165694475
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 340,
    "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "generated_codes": [
      "def sum_three_smallest_nums(nums):\n    # Filter out non-positive numbers\n    nums = [n for n in nums if n > 0]\n    # Sort the list\n    nums.sort()\n    # Return the sum of the three smallest numbers\n    return sum(nums[:3])"
    ],
    "token_counts": [
      177
    ],
    "generation_times": [
      4.7468243427574635
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 341,
    "prompt": "Write a function to convert the given set into ordered tuples.",
    "generated_codes": [
      "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))\n\n# Test cases"
    ],
    "token_counts": [
      173
    ],
    "generation_times": [
      4.547004379332066
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 342,
    "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "generated_codes": [
      "from typing import List, Tuple\nimport heapq\n\ndef find_minimum_range(nums: List[List[int]]) -> Tuple[int, int]:\n    min_heap = []\n    max_val = float('-inf')\n\n    # Push all elements into the min_heap.\n    for arr in nums:\n        for num in arr:\n            heapq.heappush(min_heap, num)\n            max_val = max(max_val, num)\n\n    range_start = heapq.heappop(min_heap)\n    range_end = max_val\n\n    # While the heap is not empty, pop elements from the heap and update the range.\n    while min_heap:\n        if min_heap[0] < range_end:\n            range_start = heapq.heappop(min_heap)\n        else:\n            heapq.heappop(min_heap)\n            while min_heap and min_heap[0] <= range_start:\n                heapq.heappop(min_heap)\n            if min_heap:\n                range_end = min_heap[0]\n\n    return (range_start, range_end)"
    ],
    "token_counts": [
      458
    ],
    "generation_times": [
      12.143333278596401
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 343,
    "prompt": "Write a function to calculate the number of digits and letters in a string.",
    "generated_codes": [
      "def dig_let(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (letters, digits)\n\n# Test cases"
    ],
    "token_counts": [
      120
    ],
    "generation_times": [
      3.2035048231482506
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 344,
    "prompt": "Write a python function to find number of elements with odd factors in a given range.",
    "generated_codes": [
      "def count_Odd_Squares(start, end):\n    def count_factors(n):\n        count = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    count += 1\n                else:\n                    count += 2\n        return count\n\n    count = 0\n    for i in range(start, end + 1):\n        if count_factors(i) % 2 != 0:\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      196
    ],
    "generation_times": [
      5.350826036185026
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 345,
    "prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
    "generated_codes": [
      "def diff_consecutivenums(lst):\n    return [lst[i+1]-lst[i] for i in range(len(lst)-1)]\n\n# Test cases"
    ],
    "token_counts": [
      214
    ],
    "generation_times": [
      5.74387913569808
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 346,
    "prompt": "Write a function to find entringer number e(n, k).",
    "generated_codes": [
      "def zigzag(n, k):\n    if n <= k:\n        return n\n    sequence = [0] * (n + k)\n    sequence[0:k] = [1] * k\n    for i in range(k, n + k):\n        sequence[i] = sum(sequence[i - k:i])\n    return sequence[n - 1]"
    ],
    "token_counts": [
      302
    ],
    "generation_times": [
      8.456399790942669
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 347,
    "prompt": "Write a python function to count the number of squares in a rectangle.",
    "generated_codes": [
      "def count_Squares(length, width):\n    return length * width"
    ],
    "token_counts": [
      64
    ],
    "generation_times": [
      1.6857317760586739
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 348,
    "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "generated_codes": [
      "def find_ways(n):\n    # Initialize a list to store the number of ways for each length\n    ways = [0] * (n + 1)\n\n    # There is one way to generate a sequence of length 0 with non-negative prefix sums\n    ways[0] = 1\n\n    # For each length from 1 to n\n    for i in range(1, n + 1):\n        # For each value from 0 to 9\n        for j in range(10):\n            # If the value is less than or equal to the length\n            if j <= i:\n                # Add the number of ways to generate a sequence of length (i - j) with non-negative prefix sums\n                ways[i] += ways[i - j]\n\n    # Return the number of ways for the given length\n    return ways[n]\n\n# Test cases"
    ],
    "token_counts": [
      368
    ],
    "generation_times": [
      10.220635961741209
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 349,
    "prompt": "Write a python function to check whether the given string is a binary string or not.",
    "generated_codes": [
      "def check(s):\n    for char in s:\n        if char not in ['0', '1']:\n            return \"No\"\n    return \"Yes\"\n\n# Test cases"
    ],
    "token_counts": [
      92
    ],
    "generation_times": [
      2.593539472669363
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 350,
    "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "generated_codes": [
      "def minimum_Length(s):\n    for i in range(len(s)):\n        temp = s[:i] + s[i+1:]\n        if temp == temp[::-1]:\n            return len(temp)\n    return len(s) - 1\n\n# Test cases"
    ],
    "token_counts": [
      107
    ],
    "generation_times": [
      2.8764121532440186
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 351,
    "prompt": "Write a python function to find the first element occurring k times in a given array.",
    "generated_codes": [
      "def first_Element(arr, n, k):\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n    return -1\n\n# Test cases"
    ],
    "token_counts": [
      178
    ],
    "generation_times": [
      4.865785911679268
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 352,
    "prompt": "Write a python function to check whether all the characters in a given string are unique.",
    "generated_codes": [
      "def unique_Characters(string):\n    return len(string) == len(set(string))"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      2.4702932462096214
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 353,
    "prompt": "Write a function to remove a specified column from a given nested list.",
    "generated_codes": [
      "def remove_column(nested_list, column_index):\n    return [[row[i] for i in range(len(row)) if i != column_index] for row in nested_list]"
    ],
    "token_counts": [
      111
    ],
    "generation_times": [
      3.0023877397179604
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 354,
    "prompt": "Write a function to find t-nth term of arithemetic progression.",
    "generated_codes": [
      "def tn_ap(a, d, n):\n    return a + (n - 1) * d\n\n# Test cases"
    ],
    "token_counts": [
      90
    ],
    "generation_times": [
      2.6609375290572643
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 355,
    "prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
    "generated_codes": [
      "import math\n\ndef count_Rectangles(r):\n    if r <= 0:\n        return 0\n    else:\n        return 2 * (math.pi * r**2)\n\n# Test cases"
    ],
    "token_counts": [
      96
    ],
    "generation_times": [
      2.653252013027668
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 356,
    "prompt": "Write a function to find the third angle of a triangle using two angles.",
    "generated_codes": [
      "def find_angle(a, b):\n    return 180 - a - b\n\n# Test cases"
    ],
    "token_counts": [
      80
    ],
    "generation_times": [
      1.9690699689090252
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 357,
    "prompt": "Write a function to find the maximum element of all the given tuple records.",
    "generated_codes": [
      "def find_max(records):\n    return max(max(record) for record in records)\n\n# Test cases"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.5915071070194244
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 358,
    "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
    "generated_codes": [
      "def moddiv_list(lst1, lst2):\n    return list(map(lambda x, y: x % y, lst1, lst2))"
    ],
    "token_counts": [
      141
    ],
    "generation_times": [
      3.1912470012903214
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 359,
    "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "generated_codes": [
      "import math\n\ndef Check_Solution(a, b, c):\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # if discriminant is negative, roots are complex numbers\n    if discriminant < 0:\n        return \"No\"\n\n    # calculate the roots\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # check if one root is twice of the other\n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"Yes\"\n    else:\n        return \"No\""
    ],
    "token_counts": [
      246
    ],
    "generation_times": [
      5.346596673130989
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 360,
    "prompt": "Write a function to find the n’th carol number.",
    "generated_codes": [
      "def get_carol(n):\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 7\n    else:\n        return 2 * get_carol(n - 1) + get_carol(n - 2)\n\n# Test cases"
    ],
    "token_counts": [
      112
    ],
    "generation_times": [
      2.4427519366145134
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 361,
    "prompt": "Write a function to remove empty lists from a given list of lists.",
    "generated_codes": [
      "def remove_empty(lst):\n    return [i for i in lst if i]"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      2.0944657176733017
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 362,
    "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
    "generated_codes": [
      "from collections import Counter\n\ndef max_occurrences(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [item for item, freq in count.items() if freq == max_count]\n\n# Test cases"
    ],
    "token_counts": [
      167
    ],
    "generation_times": [
      3.6581617668271065
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 363,
    "prompt": "Write a function to add the k elements to each element in the tuple.",
    "generated_codes": [
      "def add_K_element(tuples, k):\n    result = []\n    for t in tuples:\n        result.append(tuple(x + k for x in t))\n    return result"
    ],
    "token_counts": [
      103
    ],
    "generation_times": [
      2.2380956262350082
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 364,
    "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "generated_codes": [
      "def min_flip_to_make_string_alternate(s: str) -> int:\n    # Count the number of 0s and 1s in the string\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n\n    # If the number of 0s and 1s are equal, we need to flip one of them to make the string alternate\n    if count_0 == count_1:\n        return 1\n\n    # If the number of 0s is less than the number of 1s, we need to flip the 0s to 1s\n    # Otherwise, we need to flip the 1s to 0s\n    return min(count_0, count_1)\n\n# Test cases"
    ],
    "token_counts": [
      264
    ],
    "generation_times": [
      5.742290150374174
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 365,
    "prompt": "Write a python function to count the number of digits of a given number.",
    "generated_codes": [
      "def count_Digit(n):\n    return len(str(n))\n\n# Test cases"
    ],
    "token_counts": [
      79
    ],
    "generation_times": [
      1.7438778765499592
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 366,
    "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "generated_codes": [
      "def adjacent_num_product(lst):\n    return max(a*b for a, b in zip(lst, lst[1:]))\n\n# Test cases"
    ],
    "token_counts": [
      104
    ],
    "generation_times": [
      2.280813843011856
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 367,
    "prompt": "Write a function to check if a binary tree is balanced or not.",
    "generated_codes": [
      "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def get_height(root):\n        if root is None:\n            return 0\n        return max(get_height(root.left), get_height(root.right)) + 1\n\n    if root is None:\n        return True\n\n    height_diff = abs(get_height(root.left) - get_height(root.right))\n    if height_diff > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n# Test cases\n# Test case: assert is_tree_balanced(root) == False\n# Test case: assert is_tree_balanced(root1) == True\n# Test case: assert is_tree_balanced(root2) == False"
    ],
    "token_counts": [
      385
    ],
    "generation_times": [
      8.34504808858037
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 368,
    "prompt": "Write a function to repeat the given tuple n times.",
    "generated_codes": [
      "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      0.7291479744017124
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 369,
    "prompt": "Write a function to find the lateral surface area of cuboid",
    "generated_codes": [
      "def lateralsurface_cuboid(length, breadth, height):\n    # Lateral surface area of a cuboid is 2*(length*breadth +  breadth*height + height*length)\n    return 2*(length*breadth + breadth*height + height*length)\n\n# Test cases"
    ],
    "token_counts": [
      146
    ],
    "generation_times": [
      3.1505759768188
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 370,
    "prompt": "Write a function to sort a tuple by its float element.",
    "generated_codes": [
      "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)\n\n# Test cases"
    ],
    "token_counts": [
      234
    ],
    "generation_times": [
      5.071405280381441
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 371,
    "prompt": "Write a function to find the smallest missing element in a sorted array.",
    "generated_codes": [
      "def smallest_missing(arr, low, high):\n    if low > high:\n        return high + 1\n\n    if low != arr[low]:\n        return low\n\n    mid = (low + high) // 2\n\n    if arr[mid] == mid:\n        return smallest_missing(arr, mid + 1, high)\n    else:\n        return smallest_missing(arr, low, mid - 1)\n\n# Test cases"
    ],
    "token_counts": [
      225
    ],
    "generation_times": [
      4.86600798368454
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 372,
    "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n\n# Test cases"
    ],
    "token_counts": [
      289
    ],
    "generation_times": [
      6.241733364760876
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 373,
    "prompt": "Write a function to find the volume of a cuboid.",
    "generated_codes": [
      "def volume_cuboid(length, width, height):\n    return length * width * height\n\n# Test cases"
    ],
    "token_counts": [
      89
    ],
    "generation_times": [
      1.9245772957801819
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 374,
    "prompt": "Write a function to print all permutations of a given string including duplicates.",
    "generated_codes": [
      "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    else:\n        perms = []\n        for char in s:\n            for perm in permute_string(s.replace(char, '', 1)):\n                perms.append(char + perm)\n        return perms"
    ],
    "token_counts": [
      381
    ],
    "generation_times": [
      8.248176075518131
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 375,
    "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
    "generated_codes": [
      "def round_num(num, multiple):\n    return round(num / multiple) * multiple"
    ],
    "token_counts": [
      175
    ],
    "generation_times": [
      3.7805651798844337
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 376,
    "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "generated_codes": [
      "def remove_replica(tup):\n    result = []\n    count_dict = {}\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n        if count_dict[item] > 1:\n            result.append('MSP')\n        else:\n            result.append(item)\n    return tuple(result)\n\n# Test cases"
    ],
    "token_counts": [
      334
    ],
    "generation_times": [
      7.217106483876705
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 377,
    "prompt": "Write a python function to remove all occurrences of a character in a given string.",
    "generated_codes": [
      "def remove_Char(s, c):\n    return s.replace(c, '')\n\n# Test cases"
    ],
    "token_counts": [
      81
    ],
    "generation_times": [
      1.752183984965086
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 378,
    "prompt": "Write a python function to shift last element to first position in the given list.",
    "generated_codes": [
      "def move_first(lst):\n    if len(lst) > 0:\n        lst.insert(0, lst.pop())\n    return lst"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.7706625536084175
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 379,
    "prompt": "Write a function to find the surface area of a cuboid.",
    "generated_codes": [
      "def surfacearea_cuboid(length, width, height):\n    return 2*(length*width + width*height + height*length)\n\n# Test cases"
    ],
    "token_counts": [
      104
    ],
    "generation_times": [
      2.248162552714348
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 380,
    "prompt": "Write a function to generate a two-dimensional array.",
    "generated_codes": [
      "def multi_list(rows, cols):\n    return [[i*j for j in range(cols)] for i in range(rows)]"
    ],
    "token_counts": [
      95
    ],
    "generation_times": [
      2.116759143769741
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 381,
    "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
    "generated_codes": [
      "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n# Test cases"
    ],
    "token_counts": [
      463
    ],
    "generation_times": [
      10.024635624140501
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 382,
    "prompt": "Write a function to find the number of rotations in a circularly sorted array.",
    "generated_codes": [
      "def find_rotation_count(arr):\n    n = len(arr)\n    low = 0\n    high = n - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # If the mid element is greater than its next element, then the array is rotated\n        if mid < high and arr[mid] > arr[mid + 1]:\n            return mid + 1\n\n        # If the mid element is smaller than its previous element, then the array is rotated\n        if mid > low and arr[mid] < arr[mid - 1]:\n            return mid\n\n        # If the mid element is greater than the 0th element, then the rotation is in the right half\n        if arr[mid] > arr[0]:\n            low = mid + 1\n\n        # If the mid element is smaller than the 0th element, then the rotation is in the left half\n        else:\n            high = mid - 1\n\n    return 0\n\n# Test cases"
    ],
    "token_counts": [
      337
    ],
    "generation_times": [
      7.313857600092888
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 383,
    "prompt": "Write a python function to toggle all odd bits of a given number.",
    "generated_codes": [
      "def even_bit_toggle_number(n):\n    # The binary representation of 2 is '10' which is odd.\n    # So, we can use bitwise OR operation to toggle all odd bits.\n    return n ^ 2\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      2.4452042877674103
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 384,
    "prompt": "Write a python function to find the frequency of the smallest value in a given array.",
    "generated_codes": [
      "def frequency_Of_Smallest(n, arr):\n    min_val = min(arr)\n    return arr.count(min_val)"
    ],
    "token_counts": [
      131
    ],
    "generation_times": [
      2.8300031200051308
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 385,
    "prompt": "Write a function to find the n'th perrin number using recursion.",
    "generated_codes": [
      "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 3) + get_perrin(n - 2)"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      5.5639203153550625
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 386,
    "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "generated_codes": [
      "def swap_count(s):\n    open_braces = []\n    close_braces = []\n    for brace in s:\n        if brace == '[':\n            open_braces.append(brace)\n        else:\n            close_braces.append(brace)\n\n    swap_count = 0\n    while len(open_braces) > len(close_braces):\n        open_braces.pop()\n        swap_count += 1\n\n    return swap_count"
    ],
    "token_counts": [
      307
    ],
    "generation_times": [
      6.629197064787149
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 387,
    "prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
    "generated_codes": [
      "def even_or_odd(hex_num):\n    hex_to_int = int(hex_num, 16)\n    if hex_to_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases"
    ],
    "token_counts": [
      123
    ],
    "generation_times": [
      2.659098781645298
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 388,
    "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "generated_codes": [
      "def highest_Power_of_2(n):\n    i = 0\n    while n > 2 ** i:\n        i += 1\n    return 2 ** (i - 1)\n\n# Test cases"
    ],
    "token_counts": [
      101
    ],
    "generation_times": [
      2.186062153428793
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 389,
    "prompt": "Write a function to find the n'th lucas number.",
    "generated_codes": [
      "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = [2, 1]\n    for i in range(2, n + 1):\n        lucas.append(lucas[i - 1] + lucas[i - 2])\n    return lucas[n]"
    ],
    "token_counts": [
      231
    ],
    "generation_times": [
      4.982191812247038
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 390,
    "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
    "generated_codes": [
      "def add_string(lst, s):\n    return [s.format(i) for i in lst]"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.4226015880703926
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 391,
    "prompt": "Write a function to convert more than one list to nested dictionary.",
    "generated_codes": [
      "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        temp_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(temp_dict)\n    return result"
    ],
    "token_counts": [
      199
    ],
    "generation_times": [
      4.3172886818647385
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 392,
    "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "generated_codes": [
      "def get_max_sum(n, dp={}):\n    if n in dp:\n        return dp[n]\n    dp[n] = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return dp[n]\n\n# Test cases"
    ],
    "token_counts": [
      299
    ],
    "generation_times": [
      6.447213776409626
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 393,
    "prompt": "Write a function to find the list with maximum length using lambda function.",
    "generated_codes": [
      "def max_length_list(lst):\n    max_len_list = max(lst, key=lambda x: len(x))\n    return len(max_len_list), max_len_list"
    ],
    "token_counts": [
      127
    ],
    "generation_times": [
      2.7694555521011353
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 394,
    "prompt": "Write a function to check if given tuple is distinct or not.",
    "generated_codes": [
      "def check_distinct(tup):\n    if len(tup) == len(set(tup)):\n        return True\n    else:\n        return False"
    ],
    "token_counts": [
      108
    ],
    "generation_times": [
      2.3486292846500874
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 395,
    "prompt": "Write a python function to find the first non-repeated character in a given string.",
    "generated_codes": [
      "def first_non_repeating_character(s):\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None\n\n# Test cases"
    ],
    "token_counts": [
      143
    ],
    "generation_times": [
      3.1040359549224377
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 396,
    "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "generated_codes": [
      "import re\n\ndef check_char(s):\n    if re.match(r'^(.).*\\1$', s):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test cases"
    ],
    "token_counts": [
      95
    ],
    "generation_times": [
      2.067243367433548
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 397,
    "prompt": "Write a function to find the median of three specific numbers.",
    "generated_codes": [
      "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n\n# Test cases"
    ],
    "token_counts": [
      101
    ],
    "generation_times": [
      2.1879504323005676
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 398,
    "prompt": "Write a function to compute the sum of digits of each number of a given list.",
    "generated_codes": [
      "def sum_of_digits(lst):\n    total = 0\n    for i in lst:\n        if isinstance(i, int):\n            total += sum(int(digit) for digit in str(abs(i)))\n    return total\n\n# Test cases"
    ],
    "token_counts": [
      146
    ],
    "generation_times": [
      3.1485198996961117
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 399,
    "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "generated_codes": [
      "def bitwise_xor(t1, t2):\n    return tuple(a ^ b for a, b in zip(t1, t2))\n\n# Test cases"
    ],
    "token_counts": [
      190
    ],
    "generation_times": [
      4.106292087584734
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 400,
    "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "generated_codes": [
      "def extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)"
    ],
    "token_counts": [
      234
    ],
    "generation_times": [
      5.066855065524578
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 401,
    "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "generated_codes": [
      "def add_nested_tuples(t1, t2):\n    return tuple(tuple(a+b for a, b in zip(x, y)) for x, y in zip(t1, t2))"
    ],
    "token_counts": [
      420
    ],
    "generation_times": [
      9.099661402404308
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 402,
    "prompt": "Write a function to compute the value of ncr%p.",
    "generated_codes": [
      "def ncr_modp(n, r, p):\n    # ncr = n! / [(n-r)! * r!]\n    # ncr % p = (n! % p * ((n-r)!^(p-2) % p * (r!)^(p-2) % p) % p\n    fact = [0]*(n+1)\n    fact[0] = 1\n    for i in range(1, n+1):\n        fact[i] = (fact[i-1]*i)%p\n    f = fact[n]*pow(fact[n-r]*fact[r]%p, p-2, p)\n    return f%p"
    ],
    "token_counts": [
      493
    ],
    "generation_times": [
      10.624790720641613
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 403,
    "prompt": "Write a function to check if a url is valid or not using regex.",
    "generated_codes": [
      "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n# Test cases"
    ],
    "token_counts": [
      281
    ],
    "generation_times": [
      6.0675987377762794
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 404,
    "prompt": "Write a python function to find the minimum of two numbers.",
    "generated_codes": [
      "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b"
    ],
    "token_counts": [
      33
    ],
    "generation_times": [
      0.7215113267302513
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 405,
    "prompt": "Write a function to check whether an element exists within a tuple.",
    "generated_codes": [
      "def check_tuplex(tuplex, element):\n    return element in tuplex\n\n# Test cases"
    ],
    "token_counts": [
      160
    ],
    "generation_times": [
      3.465533547103405
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 406,
    "prompt": "Write a python function to find the parity of a given number.",
    "generated_codes": [
      "def find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
    ],
    "token_counts": [
      46
    ],
    "generation_times": [
      0.9994923360645771
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 407,
    "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "generated_codes": [
      "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            pivot = i-1\n            successor = i\n            for j in range(i+1, len(digits)):\n                if digits[j] > digits[pivot] and digits[j] < digits[successor]:\n                    successor = j\n            digits[pivot], digits[successor] = digits[successor], digits[pivot]\n            digits[pivot+1:] = sorted(digits[pivot+1:])\n            return int(''.join(map(str, digits)))\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      252
    ],
    "generation_times": [
      5.441554892808199
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 408,
    "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "generated_codes": [
      "def k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heappush(heap, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while heap and len(pairs) < k:\n        _, i, j = heappop(heap)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs"
    ],
    "token_counts": [
      285
    ],
    "generation_times": [
      6.183827582746744
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 409,
    "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "generated_codes": [
      "def min_product_tuple(lst):\n    return min(x*y for x, y in lst)\n\n# Test cases"
    ],
    "token_counts": [
      148
    ],
    "generation_times": [
      3.2148319706320763
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 410,
    "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
    "generated_codes": [
      "def min_val(lst):\n    # Filter out non-integer values and find the minimum\n    min_val = min(filter(lambda x: isinstance(x, int), lst))\n    return min_val\n\n# Test cases"
    ],
    "token_counts": [
      140
    ],
    "generation_times": [
      3.0339271910488605
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 411,
    "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
    "generated_codes": [
      "import re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n\n# Test cases"
    ],
    "token_counts": [
      119
    ],
    "generation_times": [
      2.5794935300946236
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 412,
    "prompt": "Write a python function to remove odd numbers from a given list.",
    "generated_codes": [
      "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n\n# Test cases"
    ],
    "token_counts": [
      96
    ],
    "generation_times": [
      2.079107988625765
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 413,
    "prompt": "Write a function to extract the nth element from a given list of tuples.",
    "generated_codes": [
      "def extract_nth_element(lst, n):\n    return [i[n] for i in lst]"
    ],
    "token_counts": [
      79
    ],
    "generation_times": [
      1.7300232239067554
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 414,
    "prompt": "Write a python function to check whether the value exists in a sequence or not.",
    "generated_codes": [
      "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"
    ],
    "token_counts": [
      44
    ],
    "generation_times": [
      0.9588952362537384
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 415,
    "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
    "generated_codes": [
      "def max_Product(arr):\n    arr.sort()\n    n = len(arr)\n    if arr[0] < 0 and arr[1] < 0:\n        return (arr[0], arr[1]) if arr[0]*arr[1] > arr[n-2]*arr[n-1] else (arr[n-2], arr[n-1])\n    else:\n        return (arr[n-2], arr[n-1])\n\n# Test cases"
    ],
    "token_counts": [
      192
    ],
    "generation_times": [
      4.159448143094778
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 416,
    "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "generated_codes": [
      "def breakSum(n):\n    dp = [0]*(n+1)\n    for i in range(1, n+1):\n        dp[i] = max(dp[i], i)\n        for j in range(1, i//2+1):\n            dp[i] = max(dp[i], dp[j] + dp[i-j])\n    return dp[n]\n\n# Test cases"
    ],
    "token_counts": [
      255
    ],
    "generation_times": [
      5.516826074570417
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 417,
    "prompt": "Write a function to find common first element in given list of tuple.",
    "generated_codes": [
      "from collections import defaultdict\n\ndef group_tuples(lst):\n    first_elements = defaultdict(list)\n    for tup in lst:\n        first_elements[tup[0]].append(tup[1])\n    return [tuple([key] + values) for key, values in first_elements.items()]\n\n# Test cases"
    ],
    "token_counts": [
      227
    ],
    "generation_times": [
      4.923254903405905
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 418,
    "prompt": "Write a python function to find the sublist having maximum length.",
    "generated_codes": [
      "def Find_Max(lst):\n    max_len = -1\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return max_sublist"
    ],
    "token_counts": [
      189
    ],
    "generation_times": [
      4.096306320279837
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 419,
    "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "generated_codes": [
      "def round_and_sum(nums):\n    rounded_nums = [round(num) for num in nums]\n    total_sum = sum(rounded_nums)\n    return total_sum * len(rounded_nums)"
    ],
    "token_counts": [
      292
    ],
    "generation_times": [
      6.337915446609259
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 420,
    "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
    "generated_codes": [
      "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*2*i*2\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      1.9729122072458267
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 421,
    "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
    "generated_codes": [
      "def concatenate_tuple(tup):\n    return '-'.join(str(i) for i in tup)\n\n# Test cases"
    ],
    "token_counts": [
      140
    ],
    "generation_times": [
      3.0373712591826916
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 422,
    "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
    "generated_codes": [
      "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average"
    ],
    "token_counts": [
      208
    ],
    "generation_times": [
      4.51039657369256
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 423,
    "prompt": "Write a function to solve gold mine problem.",
    "generated_codes": [
      "def get_maxgold(gold, m, n):\n    # Create a 2D table to store the maximum gold that can be collected at each cell\n    dp = [[0]*n for _ in range(m)]\n\n    # Initialize the last column of the dp table\n    for i in range(m):\n        dp[i][n-1] = gold[i][n-1]\n\n    # Fill the dp table in reverse order\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            # If the current cell is on the rightmost column, only one way to move\n            if i == 0:\n                dp[i][j] = gold[i][j] + max(dp[i][j+1], dp[i+1][j+1])\n            # If the current cell is on the leftmost column, only one way to move\n            elif i == m-1:\n                dp[i][j] = gold[i][j] + max(dp[i][j+1], dp[i-1][j+1])\n            # If the current cell is in the middle, there are three ways to move\n            else:\n                dp[i][j] = gold[i][j] + max(dp[i-1][j+1], dp[i][j+1], dp[i+1][j+1])\n\n    # The maximum gold that can be collected is the maximum value in the first column of the dp table\n    return max(dp[i][0] for i in range(m))"
    ],
    "token_counts": [
      576
    ],
    "generation_times": [
      12.475463651120663
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 424,
    "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
    "generated_codes": [
      "def extract_rear(tup):\n    return [s[-1] for s in tup]\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.6312737725675106
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 425,
    "prompt": "Write a function to count the number of sublists containing a particular element.",
    "generated_codes": [
      "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      193
    ],
    "generation_times": [
      4.195566181093454
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 426,
    "prompt": "Write a function to filter odd numbers using lambda function.",
    "generated_codes": [
      "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\n# Test cases"
    ],
    "token_counts": [
      161
    ],
    "generation_times": [
      3.5009362027049065
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 427,
    "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "generated_codes": [
      "import re\n\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)"
    ],
    "token_counts": [
      258
    ],
    "generation_times": [
      5.589934214949608
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 428,
    "prompt": "Write a function to sort the given array by using shell sort.",
    "generated_codes": [
      "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test cases"
    ],
    "token_counts": [
      322
    ],
    "generation_times": [
      6.950157351791859
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 429,
    "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "generated_codes": [
      "def and_tuples(t1, t2):\n    return tuple(i & j for i, j in zip(t1, t2))"
    ],
    "token_counts": [
      319
    ],
    "generation_times": [
      6.894367203116417
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 430,
    "prompt": "Write a function to find the directrix of a parabola.",
    "generated_codes": [
      "def parabola_directrix(a, h, k):\n    return h**2 - a*k\n\n# Test cases"
    ],
    "token_counts": [
      97
    ],
    "generation_times": [
      2.0980475917458534
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 431,
    "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
    "generated_codes": [
      "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return None"
    ],
    "token_counts": [
      42
    ],
    "generation_times": [
      0.9136464186012745
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 432,
    "prompt": "Write a function to find the median of a trapezium.",
    "generated_codes": [
      "def median_trapezium(a, b, c):\n    return (a + b + c) / 3"
    ],
    "token_counts": [
      185
    ],
    "generation_times": [
      3.997477449476719
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 433,
    "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "generated_codes": [
      "def check_greater(arr, num):\n    for i in arr:\n        if i <= num:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, the entered number is greater than those in the array'\n\n# Test cases"
    ],
    "token_counts": [
      189
    ],
    "generation_times": [
      4.099177226424217
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 434,
    "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
    "generated_codes": [
      "import re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      113
    ],
    "generation_times": [
      2.444867119193077
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 435,
    "prompt": "Write a python function to find the last digit of a given number.",
    "generated_codes": [
      "def last_Digit(n):\n    return n % 10"
    ],
    "token_counts": [
      23
    ],
    "generation_times": [
      0.5021558441221714
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 436,
    "prompt": "Write a python function to print negative numbers in a list.",
    "generated_codes": [
      "def neg_nos(lst):\n    return [i for i in lst if i < 0]\n\n# Test cases"
    ],
    "token_counts": [
      98
    ],
    "generation_times": [
      2.1183612048625946
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 437,
    "prompt": "Write a function to remove odd characters in a string.",
    "generated_codes": [
      "def remove_odd(s):\n    return s[::2]\n\n# Test cases"
    ],
    "token_counts": [
      66
    ],
    "generation_times": [
      1.431164775043726
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 438,
    "prompt": "Write a function to count bidirectional tuple pairs.",
    "generated_codes": [
      "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i] == tuples[j] or tuples[i] == tuples[j][::-1]:\n                count += 1\n    return count"
    ],
    "token_counts": [
      376
    ],
    "generation_times": [
      8.136604283005
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 439,
    "prompt": "Write a function to convert a list of multiple integers into a single integer.",
    "generated_codes": [
      "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n\n# Test cases"
    ],
    "token_counts": [
      121
    ],
    "generation_times": [
      2.6227880381047726
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 440,
    "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
    "generated_codes": [
      "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\nnltk.download('punkt')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('stopwords')\n\ndef find_adverb_position(sentence):\n    stop_words = set(stopwords.words('english'))\n    words = word_tokenize(sentence)\n    tagged = nltk.pos_tag(words)\n    adverbs = [word for word, pos in tagged if pos == 'RB' or pos == 'RBR' or pos == 'RBS' or pos == 'WRB']\n    if adverbs:\n        adverb = adverbs[0]\n        start_pos = words.index(adverb)\n        end_pos = start_pos + len(adverb) - 1\n        return (start_pos, end_pos, adverb)\n    else:\n        return None\n\n# Test cases"
    ],
    "token_counts": [
      427
    ],
    "generation_times": [
      9.240216501057148
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 441,
    "prompt": "Write a function to find the surface area of a cube.",
    "generated_codes": [
      "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2\n\n# Test cases"
    ],
    "token_counts": [
      77
    ],
    "generation_times": [
      1.6951854676008224
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 442,
    "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
    "generated_codes": [
      "def positive_count(arr):\n    positive_count = sum(1 for num in arr if num > 0)\n    total_count = len(arr)\n    return positive_count / total_count"
    ],
    "token_counts": [
      108
    ],
    "generation_times": [
      2.3624955303967
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 443,
    "prompt": "Write a python function to find the largest negative number from the given list.",
    "generated_codes": [
      "def largest_neg(lst):\n    return max(x for x in lst if x < 0)\n\n# Test cases"
    ],
    "token_counts": [
      93
    ],
    "generation_times": [
      2.0277839340269566
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 444,
    "prompt": "Write a function to trim each tuple by k in the given tuple list.",
    "generated_codes": [
      "def trim_tuple(tuples, k):\n    return [tuple(t[k:]) for t in tuples]\n\n# Test cases"
    ],
    "token_counts": [
      338
    ],
    "generation_times": [
      7.370586033910513
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 445,
    "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "generated_codes": [
      "def index_multiplication(tuples):\n    tuple1, tuple2 = tuples\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(a*b for a, b in zip(tuple1[i], tuple2[i])))\n    return tuple(result)"
    ],
    "token_counts": [
      166
    ],
    "generation_times": [
      3.628536731004715
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 446,
    "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
    "generated_codes": [
      "def count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n\n# Test cases"
    ],
    "token_counts": [
      156
    ],
    "generation_times": [
      3.4013588540256023
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 447,
    "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
    "generated_codes": [
      "def cube_nums(lst):\n    return list(map(lambda x: x**3, lst))\n\n# Test cases"
    ],
    "token_counts": [
      187
    ],
    "generation_times": [
      4.08055917173624
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 448,
    "prompt": "Write a function to calculate the sum of perrin numbers.",
    "generated_codes": [
      "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b, c = 2, 3, 0\n        for _ in range(3, n):\n            a, b, c = b, c, a + b + c\n        return a + b + c"
    ],
    "token_counts": [
      220
    ],
    "generation_times": [
      4.800140008330345
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 449,
    "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "generated_codes": [
      "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the sides of the triangle\n    side1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    side2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    side3 = ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** 0.5\n\n    # Check if the triangle is valid\n    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases"
    ],
    "token_counts": [
      272
    ],
    "generation_times": [
      5.911599803715944
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 450,
    "prompt": "Write a function to extract specified size of strings from a give list of string values.",
    "generated_codes": [
      "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"
    ],
    "token_counts": [
      81
    ],
    "generation_times": [
      1.7703790292143822
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 451,
    "prompt": "Write a function to remove all whitespaces from the given string using regex.",
    "generated_codes": [
      "import re\n\ndef remove_whitespaces(input_string):\n    return re.sub(r'\\s', '', input_string)\n\n# Test cases"
    ],
    "token_counts": [
      104
    ],
    "generation_times": [
      2.2641735561192036
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 452,
    "prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
    "generated_codes": [
      "def loss_amount(sell_price, cost_price):\n    if sell_price > cost_price:\n        return None\n    else:\n        return cost_price - sell_price"
    ],
    "token_counts": [
      50
    ],
    "generation_times": [
      1.092713475227356
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 453,
    "prompt": "Write a python function to find the sum of even factors of a number.",
    "generated_codes": [
      "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n# Test cases"
    ],
    "token_counts": [
      100
    ],
    "generation_times": [
      2.1814617179334164
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 454,
    "prompt": "Write a function that matches a word containing 'z'.",
    "generated_codes": [
      "import re\n\ndef text_match_wordz(text):\n    if re.search('z', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases"
    ],
    "token_counts": [
      114
    ],
    "generation_times": [
      2.4820399321615696
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 455,
    "prompt": "Write a function to check whether the given month number contains 31 days or not.",
    "generated_codes": [
      "def check_monthnumb_number(month_number):\n    # Months with 31 days: January, March, May, July, August, October, December\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    if month_number in months_with_31_days:\n        return True\n    else:\n        return False\n\n# Test cases"
    ],
    "token_counts": [
      153
    ],
    "generation_times": [
      3.327984321862459
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 456,
    "prompt": "Write a function to reverse strings in a given list of string values.",
    "generated_codes": [
      "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n\n# Test cases"
    ],
    "token_counts": [
      149
    ],
    "generation_times": [
      3.2559368796646595
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 457,
    "prompt": "Write a python function to find the sublist having minimum length.",
    "generated_codes": [
      "def Find_Min(lst):\n    return min(lst, key=len)\n\n# Test cases"
    ],
    "token_counts": [
      118
    ],
    "generation_times": [
      2.568379607051611
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 458,
    "prompt": "Write a function to find the area of a rectangle.",
    "generated_codes": [
      "def rectangle_area(length, width):\n    return length * width\n\n# Test cases"
    ],
    "token_counts": [
      69
    ],
    "generation_times": [
      1.505690935999155
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 459,
    "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
    "generated_codes": [
      "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]+', '', s)\n\n# Test cases"
    ],
    "token_counts": [
      140
    ],
    "generation_times": [
      3.042383525520563
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 460,
    "prompt": "Write a python function to get the first element of each sublist.",
    "generated_codes": [
      "def Extract(lst):\n    return [sublist[0] for sublist in lst]"
    ],
    "token_counts": [
      133
    ],
    "generation_times": [
      2.9006888195872307
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 461,
    "prompt": "Write a python function to count the upper case characters in a given string.",
    "generated_codes": [
      "def upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\n# Test cases"
    ],
    "token_counts": [
      67
    ],
    "generation_times": [
      1.462406724691391
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 462,
    "prompt": "Write a function to find all possible combinations of the elements of a given list.",
    "generated_codes": [
      "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain(*[combinations(lst, i) for i in range(len(lst)+1)]))"
    ],
    "token_counts": [
      1024
    ],
    "generation_times": [
      22.317138854414225
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 463,
    "prompt": "Write a function to find the maximum product subarray of the given array.",
    "generated_codes": [
      "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result"
    ],
    "token_counts": [
      293
    ],
    "generation_times": [
      6.337545998394489
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 464,
    "prompt": "Write a function to check if all values are same in a dictionary.",
    "generated_codes": [
      "def check_value(dictionary, value):\n    return all(val == value for val in dictionary.values())\n\n# Test cases"
    ],
    "token_counts": [
      192
    ],
    "generation_times": [
      4.158785805106163
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 465,
    "prompt": "Write a function to drop empty items from a given dictionary.",
    "generated_codes": [
      "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\n# Test cases"
    ],
    "token_counts": [
      148
    ],
    "generation_times": [
      3.2003293558955193
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 466,
    "prompt": "Write a function to find the peak element in the given array.",
    "generated_codes": [
      "def find_peak(arr, n):\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            return i\n    return -1\n\n# Test cases"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      3.355347193777561
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 467,
    "prompt": "Write a python function to convert decimal number to octal number.",
    "generated_codes": [
      "def decimal_to_Octal(decimal_number):\n    return int(str(oct(decimal_number))[2:])\n\n# Test cases"
    ],
    "token_counts": [
      86
    ],
    "generation_times": [
      1.868964921683073
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 468,
    "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "generated_codes": [
      "def max_product(arr, n):\n    # Initialize maximum product and current maximum and minimum product\n    max_prod = arr[0]\n    max_end = min_end = arr[0]\n\n    # Traverse through the array starting from the second element\n    for i in range(1, n):\n        # If the current element is negative, swap maximum and minimum product\n        if arr[i] < 0:\n            max_end, min_end = min_end, max_end\n\n        # Update maximum and minimum product for the current element\n        max_end = max(arr[i], max_end * arr[i])\n        min_end = min(arr[i], min_end * arr[i])\n\n        # Update maximum product if necessary\n        max_prod = max(max_prod, max_end)\n\n    return max_prod"
    ],
    "token_counts": [
      368
    ],
    "generation_times": [
      7.969887066632509
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 469,
    "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "generated_codes": [
      "def max_profit(prices, k):\n    n = len(prices)\n    if k >= n // 2:\n        return sum(prices[i] - prices[i - 1] for i in range(1, n) if prices[i] > prices[i - 1])\n\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j - 1] - prices[j])\n\n    return dp[k][-1]\n\n# Test cases"
    ],
    "token_counts": [
      301
    ],
    "generation_times": [
      6.497621804475784
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 470,
    "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "generated_codes": [
      "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n\n# Test cases"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      3.6605927608907223
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 471,
    "prompt": "Write a python function to find remainder of array multiplication divided by n.",
    "generated_codes": [
      "def find_remainder(arr, n, m):\n    product = 1\n    for num in arr:\n        product = (product * num) % m\n    return product % n\n\n# Test cases"
    ],
    "token_counts": [
      132
    ],
    "generation_times": [
      2.8499650433659554
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 472,
    "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "generated_codes": [
      "def check_Consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\n# Test cases"
    ],
    "token_counts": [
      104
    ],
    "generation_times": [
      2.246722735464573
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 473,
    "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "generated_codes": [
      "def tuple_intersection(tuples1, tuples2):\n    # Convert each tuple list to a set of frozensets\n    set1 = set(frozenset(t) for t in tuples1)\n    set2 = set(frozenset(t) for t in tuples2)\n\n    # Return the intersection of the two sets as a set of tuples\n    return set(tuple(s) for s in set1 & set2)"
    ],
    "token_counts": [
      273
    ],
    "generation_times": [
      5.927965335547924
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 474,
    "prompt": "Write a function to replace characters in a string.",
    "generated_codes": [
      "def replace_char(s, old, new):\n    return s.replace(old, new)\n\n# Test cases"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      1.99794976785779
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 475,
    "prompt": "Write a function to sort counter by value.",
    "generated_codes": [
      "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n# Test cases"
    ],
    "token_counts": [
      216
    ],
    "generation_times": [
      4.686328489333391
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 476,
    "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "generated_codes": [
      "def big_sum(arr):\n    return max(arr) + min(arr)\n\n# Test cases"
    ],
    "token_counts": [
      76
    ],
    "generation_times": [
      1.6535574868321419
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 477,
    "prompt": "Write a python function to convert the given string to lower case.",
    "generated_codes": [
      "def is_lower(s):\n    return s.lower()\n\n# Test cases"
    ],
    "token_counts": [
      68
    ],
    "generation_times": [
      1.4769898392260075
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 478,
    "prompt": "Write a function to remove lowercase substrings from a given string.",
    "generated_codes": [
      "def remove_lowercase(s):\n    return ''.join([c for c in s if c.isupper()])\n\n# Test cases"
    ],
    "token_counts": [
      91
    ],
    "generation_times": [
      1.9758593663573265
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 479,
    "prompt": "Write a python function to find the first digit of a given number.",
    "generated_codes": [
      "def first_Digit(n):\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n# Test cases"
    ],
    "token_counts": [
      80
    ],
    "generation_times": [
      1.7388080768287182
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 480,
    "prompt": "Write a python function to find the maximum occurring character in a given string.",
    "generated_codes": [
      "def get_max_occuring_char(s):\n    frequency = {}\n    for char in s:\n        if char not in frequency:\n            frequency[char] = 1\n        else:\n            frequency[char] += 1\n    max_freq = max(frequency.values())\n    for char, freq in frequency.items():\n        if freq == max_freq:\n            return char\n\n# Test cases"
    ],
    "token_counts": [
      158
    ],
    "generation_times": [
      3.4230628237128258
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 481,
    "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "generated_codes": [
      "def is_subset_sum(set, n, sum):\n    # The value of subset[i][j] will be True if there is a subset of set[0..j-1]\n    # with sum equal to i\n    subset =([[False for i in range(sum + 1)] for i in range(n + 1)])\n     \n    # If sum is 0, then answer is True\n    for i in range(n + 1):\n        subset[i][0] = True\n     \n    # If sum is not 0 and set is empty, then answer is False\n    for i in range(1, sum + 1):\n         subset[0][i]= False\n             \n    # Fill the subset table in bottom up manner\n    for i in range(1,n + 1):\n        for j in range(1,sum + 1):\n            if j<set[i-1]:\n                subset[i][j] = subset[i-1][j]\n            if j>= set[i-1]:\n                subset[i][j] = (subset[i-1][j] or subset[i - 1][j-set[i-1]])\n     \n    # return the last cell of the table which contains the final result\n    return subset[n][sum]"
    ],
    "token_counts": [
      387
    ],
    "generation_times": [
      8.386540349572897
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 482,
    "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "generated_codes": [
      "import re\n\ndef match(s):\n    pattern = '[A-Z][a-z]+'\n    if re.search(pattern, s):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases"
    ],
    "token_counts": [
      102
    ],
    "generation_times": [
      2.216789346188307
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 483,
    "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "generated_codes": [
      "def first_Factorial_Divisible_Number(x):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n\n# Test cases"
    ],
    "token_counts": [
      144
    ],
    "generation_times": [
      3.121816009283066
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 484,
    "prompt": "Write a function to remove the matching tuples from the given two tuples.",
    "generated_codes": [
      "def remove_matching_tuple(t1, t2):\n    # Convert tuples to lists\n    l1 = list(t1)\n    l2 = list(t2)\n    \n    # Iterate over the second list\n    for t in l2:\n        # If the tuple is in the first list, remove it\n        if t in l1:\n            l1.remove(t)\n    \n    # Convert the list back to a tuple and return\n    return tuple(l1)"
    ],
    "token_counts": [
      194
    ],
    "generation_times": [
      4.221283834427595
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 485,
    "prompt": "Write a function to find the largest palindromic number in the given array.",
    "generated_codes": [
      "def largest_palindrome(arr, n):\n    # Function to check if a number is palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Initialize the maximum palindrome as negative infinity\n    max_palindrome = float('-inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current number is a palindrome and greater than the current maximum\n        if is_palindrome(arr[i]) and arr[i] > max_palindrome:\n            # Update the maximum palindrome\n            max_palindrome = arr[i]\n\n    # Return the maximum palindrome\n    return max_palindrome\n\n# Test cases"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      6.283667240291834
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 486,
    "prompt": "Write a function to compute binomial probability for the given number.",
    "generated_codes": [
      "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Function to compute binomial probability\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success in one trial\n    :return: binomial probability\n    \"\"\"\n    # Calculate binomial coefficient\n    binom_coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n    # Calculate binomial probability\n    binom_prob = binom_coeff * (p ** k) * ((1 - p) ** (n - k))\n\n    return binom_prob\n\n# Test cases"
    ],
    "token_counts": [
      290
    ],
    "generation_times": [
      6.288825135678053
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 487,
    "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "generated_codes": [
      "def sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n# Test cases"
    ],
    "token_counts": [
      176
    ],
    "generation_times": [
      3.8204471804201603
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 488,
    "prompt": "Write a function to find the area of a pentagon.",
    "generated_codes": [
      "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Function to calculate the area of a pentagon.\n    The formula used is: Area = (5/4) * sqrt(5*(5+2*sqrt(5))) * side_length**2\n    \"\"\"\n    return (5/4) * math.sqrt(5*(5+2*math.sqrt(5))) * side_length**2\n\n# Test cases"
    ],
    "token_counts": [
      194
    ],
    "generation_times": [
      4.201557274907827
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 489,
    "prompt": "Write a python function to find the frequency of the largest value in a given array.",
    "generated_codes": [
      "def frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)"
    ],
    "token_counts": [
      118
    ],
    "generation_times": [
      2.5580911934375763
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 490,
    "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "generated_codes": [
      "def extract_symmetric(pairs):\n    symmetric_pairs = set()\n    for pair in pairs:\n        if (pair[1], pair[0]) in pairs:\n            symmetric_pairs.add(pair)\n    return symmetric_pairs"
    ],
    "token_counts": [
      141
    ],
    "generation_times": [
      3.065149586647749
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 491,
    "prompt": "Write a function to find the sum of geometric progression series.",
    "generated_codes": [
      "def sum_gp(a, r, n):\n    return a * (1 - r**n) / (1 - r)\n\n# Test cases"
    ],
    "token_counts": [
      88
    ],
    "generation_times": [
      1.9087975211441517
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 492,
    "prompt": "Write a function to search an element in the given array by using binary search.",
    "generated_codes": [
      "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n\n        mid = (high + low) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n\n        elif arr[mid] > x:\n            high = mid - 1\n\n        else:\n            return True\n\n    return False\n\n# Test cases"
    ],
    "token_counts": [
      198
    ],
    "generation_times": [
      4.295599814504385
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 493,
    "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "generated_codes": [
      "import math\n\ndef calculate_polygons(x1, y1, x2, y2, n):\n    # Calculate the radius and center of the hexagon\n    radius = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) / 2\n    center = ((x1 + x2) / 2, (y1 + y2) / 2)\n\n    # Calculate the angle between each point\n    angle = 2 * math.pi / n\n\n    # Calculate the coordinates of each point\n    polygons = []\n    for i in range(n):\n        x = center[0] + radius * math.cos(i * angle)\n        y = center[1] + radius * math.sin(i * angle)\n        polygons.append((x, y))\n\n    # Return the list of polygons\n    return [polygons]"
    ],
    "token_counts": [
      268
    ],
    "generation_times": [
      6.9219216629862785
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 494,
    "prompt": "Write a function to convert the given binary tuple to integer.",
    "generated_codes": [
      "def binary_to_integer(binary):\n    binary_str = ''.join(str(i) for i in binary)\n    return str(int(binary_str, 2))\n\n# Test cases"
    ],
    "token_counts": [
      155
    ],
    "generation_times": [
      3.3591116294264793
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 495,
    "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
    "generated_codes": [
      "import re\n\ndef remove_lowercase(s):\n    return ''.join(re.findall(r'[A-Z]+', s))\n\n# Test cases"
    ],
    "token_counts": [
      156
    ],
    "generation_times": [
      3.3808040469884872
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 496,
    "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "generated_codes": [
      "import heapq\n\ndef heap_queue_smallest(nums, k):\n    return heapq.nsmallest(k, nums)"
    ],
    "token_counts": [
      312
    ],
    "generation_times": [
      6.745425321161747
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 497,
    "prompt": "Write a function to find the surface area of a cone.",
    "generated_codes": [
      "import math\n\ndef surfacearea_cone(r, h):\n    # r is the radius of the base of the cone\n    # h is the height of the cone\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n\n# Test cases"
    ],
    "token_counts": [
      169
    ],
    "generation_times": [
      3.653188843280077
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 498,
    "prompt": "Write a python function to find gcd of two positive integers.",
    "generated_codes": [
      "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases"
    ],
    "token_counts": [
      81
    ],
    "generation_times": [
      1.7539756670594215
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 499,
    "prompt": "Write a function to find the diameter of a circle.",
    "generated_codes": [
      "def diameter_circle(radius):\n    return 2 * radius\n\n# Test cases"
    ],
    "token_counts": [
      62
    ],
    "generation_times": [
      1.3460934981703758
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 500,
    "prompt": "Write a function to concatenate all elements of the given list into a string.",
    "generated_codes": [
      "def concatenate_elements(lst):\n    return ' '.join(lst)\n\n# Test cases"
    ],
    "token_counts": [
      122
    ],
    "generation_times": [
      2.653704795986414
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 501,
    "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
    "generated_codes": [
      "def num_comm_div(num1, num2):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    return gcd(num1, num2)\n\n# Test cases"
    ],
    "token_counts": [
      112
    ],
    "generation_times": [
      2.4223412089049816
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 502,
    "prompt": "Write a python function to find remainder of two numbers.",
    "generated_codes": [
      "def find(a, b):\n    return a % b\n\n# Test cases"
    ],
    "token_counts": [
      57
    ],
    "generation_times": [
      1.2354705110192299
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 503,
    "prompt": "Write a function to add consecutive numbers of a given list.",
    "generated_codes": [
      "def add_consecutive_nums(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]\n\n# Test cases"
    ],
    "token_counts": [
      237
    ],
    "generation_times": [
      5.126396831125021
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 504,
    "prompt": "Write a python function to find the cube sum of first n natural numbers.",
    "generated_codes": [
      "def sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))\n\n# Test cases"
    ],
    "token_counts": [
      79
    ],
    "generation_times": [
      1.7105482406914234
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 505,
    "prompt": "Write a function to move all zeroes to the end of the given array.",
    "generated_codes": [
      "def re_order(arr):\n    # Count the number of zeros in the array\n    count = arr.count(0)\n    \n    # Remove all zeros from the array\n    arr = [i for i in arr if i!=0]\n    \n    # Extend the array with the number of zeros removed\n    arr.extend([0]*count)\n    \n    return arr"
    ],
    "token_counts": [
      97
    ],
    "generation_times": [
      2.109720453619957
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 506,
    "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "generated_codes": [
      "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // (factorial(n-k) * factorial(k))\n\n# Test cases"
    ],
    "token_counts": [
      134
    ],
    "generation_times": [
      2.9592489674687386
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 507,
    "prompt": "Write a function to remove specific words from a given list.",
    "generated_codes": [
      "def remove_words(lst, words_to_remove):\n    return [word for word in lst if word not in words_to_remove]"
    ],
    "token_counts": [
      126
    ],
    "generation_times": [
      2.77738368883729
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 508,
    "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "generated_codes": [
      "def same_order(list1, list2):\n    # Create a set of elements in list1\n    set1 = set(list1)\n    \n    # Iterate over list2\n    for i in range(len(list2)):\n        # If list2[i] is in set1 and its first occurrence is not at the same index in list1, return False\n        if list2[i] in set1 and list1.index(list2[i]) != i:\n            return False\n    # If we have not returned yet, the lists have the same elements in the same order, so return True\n    return True"
    ],
    "token_counts": [
      251
    ],
    "generation_times": [
      5.508057169616222
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  },
  {
    "task_id": 509,
    "prompt": "Write a python function to find the average of odd numbers till a given odd number.",
    "generated_codes": [
      "def average_Odd(n):\n    sum_of_odd = 0\n    count_of_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_of_odd += i\n            count_of_odd += 1\n    return sum_of_odd // count_of_odd\n\n# Test cases"
    ],
    "token_counts": [
      128
    ],
    "generation_times": [
      2.807955589145422
    ],
    "test_results": [
      true
    ],
    "test_passed": true
  },
  {
    "task_id": 510,
    "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "generated_codes": [
      "from typing import List\n\ndef no_of_subsequences(arr: List[int], k: int) -> int:\n    n = len(arr)\n    mod = 10**9 + 7\n    arr.sort()\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    cnt = [0] * (n + 1)\n    cnt[0] = 1\n    j = 0\n    for i in range(1, n + 1):\n        while arr[i - 1] > k and j >= 0:\n            k //= arr[j]\n            j -= 1\n        if j >= 0:\n            dp[i] = (dp[i - 1] + dp[j]) % mod\n            cnt[i] = (cnt[i - 1] + cnt[j]) % mod\n        else:\n            dp[i] = dp[i - 1]\n            cnt[i] = cnt[i - 1]\n        if i > j + 1 and arr[i - 1] * arr[j] < k:\n            dp[i] = (dp[i] + dp[j + 1]) % mod\n            cnt[i] = (cnt[i] + cnt[j + 1]) % mod\n        j = i\n    return cnt[n]\n\n# Test cases"
    ],
    "token_counts": [
      410
    ],
    "generation_times": [
      8.975814193487167
    ],
    "test_results": [
      false
    ],
    "test_passed": false
  }
]